/* Generated By:JavaCC: Do not edit this line. PrismParser.java */
package epmc.prism.model;
import epmc.prism.error.ProblemsPRISM;
import epmc.error.Positional;
import static epmc.error.UtilError.ensure;
import epmc.error.EPMCException;
import epmc.graph.Semantics;
import epmc.graph.SemanticsDTMCStandard;
import epmc.graph.SemanticsCTMC;
import epmc.graph.SemanticsMDP;
import epmc.graph.SemanticsSMG;
import epmc.graph.SemanticsIMC;
import epmc.graph.SemanticsMA;
import epmc.graph.SemanticsCTMDP;
import epmc.graph.SemanticsPTA;
import epmc.expression.Expression;
import epmc.expression.standard.ExpressionIdentifierStandard;
import epmc.expression.standard.ExpressionLiteral;
import epmc.prism.expression.PrismExpressionParser;
import epmc.prism.options.OptionsPRISM;
import epmc.options.Options;
import epmc.jani.model.type.JANIType;
import epmc.jani.model.type.JANITypeInt;
import epmc.jani.model.type.JANITypeReal;
import epmc.jani.model.type.JANITypeBool;
import epmc.jani.model.type.JANITypeBounded;
import epmc.time.JANITypeClock;
import epmc.expression.standard.ExpressionTypeInteger;

import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.HashMap;

final class PrismParser implements PrismParserConstants {
        private int sdcount = 0;
        private int modelcount = 0;
        private int initcount = 0;
        private final Set<String> moduleNames = new HashSet<String>();
        private final Set<String> playerNames = new HashSet<String>();
        private final Set<String> otherNames = new HashSet<String>();
        private final Set<String> rewardsNames = new HashSet<String>();
        private Token expressionToken;
        private ModelPRISM model;
        private Object part;

        public void setModel(ModelPRISM model) {
                this.model = model;
        }

        public void setPart(Object part) {
          this.part = part;
        }

        public ModelPRISM parseModel()  {
            Options options = Options.get();
                try {
                        return privParseModel(options);
                } catch (ParseException pe) {
                        Token errorToken = getToken(1);
                        ensure(errorToken.kind != UNEXPECTED_CHAR, ProblemsPRISM.PRISM_PARSER_UNEXPECTED_CHARACTER, newPositional(errorToken.endLine, errorToken.endColumn), errorToken.image);
                        ensure(false, ProblemsPRISM.PRISM_PARSER_SYNTAX_ERROR, newPositional(errorToken.beginLine, errorToken.beginColumn), errorToken.toString());
                        return null;
                } catch (EPMCException e) {
                   throw e;
                }
                 catch (Throwable t) {
                   ensure(false, ProblemsPRISM.PRISM_PARSER_GENERAL_ERROR, t, t);
                   return null;
                }
        }

        public ModelPRISM parseModel(boolean flatten)  {
                Options options = Options.get();
                options.set(OptionsPRISM.PRISM_FLATTEN, flatten);
                return parseModel();
        }

        private ModelPRISM privParseModel(Options options) throws ParseException {
                SystemDefinition[] sd = new SystemDefinition[1];
                sd[0] = null;
                Semantics model[] = new Semantics[1];
                model[0] = SemanticsMDP.MDP;
                Expression[] init = new Expression[1];
                init[0] = null;
                Formulas formulae = new Formulas();
                List<Module> modules = new ArrayList<Module>();
                Map<Expression, JANIType> globalVariables = new HashMap<Expression,JANIType>();
                Map<Expression, Expression> globalInitValues = new HashMap<Expression,Expression>();
                List<RewardStructure> rewards = new ArrayList<RewardStructure>();
                List<PlayerDefinition> players = new ArrayList<PlayerDefinition>();

                Token t = actualParser(sd, model, init, formulae, modules, globalVariables, globalInitValues, rewards, players);
                ensure(!modules.isEmpty(), ProblemsPRISM.PRISM_PARSER_NO_MODULE, newPositional(t.beginLine, t.beginColumn));
                try {
                  ModelPRISM result;
                  if (this.model == null) {
                        result = new ModelPRISM();
              } else {
                result = this.model;
              }
                        result.build(new ModelPRISM.Builder()
                          .setSemantics(model[0])
                          .setModules(modules)
                          .setInitialStates(init[0])
                          .setGlobalVariables(globalVariables)
                          .setGlobalInitValues(globalInitValues)
                          .setSystem(sd[0])
                          .setFormulas(formulae)
                          .setRewards(rewards)
                          .setPlayers(players));
                        return result;
                } catch (EPMCException ime) {
                        throw ime;
                }
                // catch (Throwable thr) {
                //	throw new EPMCRuntimeException(ProblemsPRISM.PRISM_PARSER_INTERNAL_ERROR, thr);
                //}
        }

    private Positional newPositional(long line, long column) {
        assert line >= 0;
        assert column >= 0;
        return new Positional.Builder()
                .setLine(line)
                .setColumn(column)
                .setPart(part)
                .build();
    }

  final private Token actualParser(SystemDefinition[] sd, Semantics[] model, Expression[] init, Formulas formulae, List<Module> modules, Map<Expression, JANIType> globalVariables, Map<Expression, Expression> globalInitValues, List<RewardStructure> rewards, List<PlayerDefinition> players) throws ParseException {
        Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
      case CTMC:
      case CTMDP:
      case DTMC:
      case FORMULA:
      case GLOBAL:
      case INIT:
      case IMC:
      case LABEL:
      case MA:
      case MDP:
      case MODULEBEGIN:
      case NONDETERMINISTIC:
      case PROBABILISTIC:
      case PROB:
      case PTA:
      case RATE:
      case REWARDSBEGIN:
      case STOCHASTIC:
      case SYSTEMBEGIN:
      case SMG:
      case PLAYERBEGIN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CTMC:
      case CTMDP:
      case DTMC:
      case IMC:
      case MA:
      case MDP:
      case NONDETERMINISTIC:
      case PROBABILISTIC:
      case PTA:
      case STOCHASTIC:
      case SMG:
        model[0] = parseModelType();
        break;
      case CONSTANT:
      case PROB:
      case RATE:
        parseConstant(formulae);
        break;
      case LABEL:
        parseLabel(formulae);
        break;
      case GLOBAL:
        parseGlobal(globalVariables, globalInitValues);
        break;
      case FORMULA:
        parseFormula(formulae);
        break;
      case MODULEBEGIN:
        parseModule(modules);
        break;
      case REWARDSBEGIN:
        parseRewards(rewards);
        break;
      case PLAYERBEGIN:
        parsePlayer(players);
        break;
      case INIT:
        init[0] = parseInit();
        break;
      case SYSTEMBEGIN:
        sd[0] = parseSystem();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t = jj_consume_token(0);
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final private Semantics parseModelType() throws ParseException {
        Semantics type = null;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MDP:
    case NONDETERMINISTIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MDP:
        t = jj_consume_token(MDP);
        break;
      case NONDETERMINISTIC:
        t = jj_consume_token(NONDETERMINISTIC);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  type = SemanticsMDP.MDP;
      break;
    case DTMC:
    case PROBABILISTIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DTMC:
        t = jj_consume_token(DTMC);
        break;
      case PROBABILISTIC:
        t = jj_consume_token(PROBABILISTIC);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  type = SemanticsDTMCStandard.DTMC;
      break;
    case CTMC:
    case STOCHASTIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CTMC:
        t = jj_consume_token(CTMC);
        break;
      case STOCHASTIC:
        t = jj_consume_token(STOCHASTIC);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  type = SemanticsCTMC.CTMC;
      break;
    case CTMDP:
      t = jj_consume_token(CTMDP);
                  type = SemanticsCTMDP.CTMDP;
      break;
    case IMC:
      t = jj_consume_token(IMC);
                  type = SemanticsIMC.IMC;
      break;
    case MA:
      t = jj_consume_token(MA);
                  type = SemanticsMA.MA;
      break;
    case SMG:
      t = jj_consume_token(SMG);
                  type = SemanticsSMG.SMG;
      break;
    case PTA:
      t = jj_consume_token(PTA);
                  type = SemanticsPTA.PTA;
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (type != null) {
                        modelcount++;
                        ensure(modelcount <= 1, ProblemsPRISM.PRISM_PARSER_MULTIPLE_TYPE, newPositional(t.beginLine, t.beginColumn));
                }
                {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final private void parseConstant(Formulas formulae) throws ParseException {
        Expression id, value = null;
        JANIType type;
        Token idt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      jj_consume_token(CONSTANT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
                                  type = new JANITypeInt();
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
                                  type = new JANITypeReal();
        break;
      case BOOL:
        jj_consume_token(BOOL);
                                  type = new JANITypeBool();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PROB:
    case RATE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RATE:
        jj_consume_token(RATE);
        break;
      case PROB:
        jj_consume_token(PROB);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          type = new JANITypeReal();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                  idt = getToken(1);
    id = parseIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      value = parseExpSemicolon();
      jj_consume_token(NESTING_SEMICOLON_SEMICOLON);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        String ids = id.toString();
                        ensure(!otherNames.contains(ids), ProblemsPRISM.PRISM_PARSER_REPEATED_CONSTANT, newPositional(idt.beginLine, idt.beginColumn), ids);
                        otherNames.add(ids);
                        formulae.addConstant(ids, value, type);
  }

  final private Expression parseIdentifier() throws ParseException {
        Token literal;
    literal = jj_consume_token(IDENTIFIER);
          {if (true) return new ExpressionIdentifierStandard.Builder()
                .setName(literal.toString())
                .build();}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseInt() throws ParseException {
        Token intg;
    intg = jj_consume_token(NUM_INT);
          {if (true) return new ExpressionLiteral.Builder()
                .setValue(intg.toString())
                .setType(ExpressionTypeInteger.TYPE_INTEGER)
                .build();}
    throw new Error("Missing return statement in function");
  }

  final private void parseLabel(Formulas formulae) throws ParseException {
        Expression id, value;
        Token t, tid;
        String ids;
    jj_consume_token(LABEL);
    t = jj_consume_token(QUOTE);
    tid = jj_consume_token(IDENTIFIER);
    jj_consume_token(QUOTE);
                ids = "\u005c"" + tid.toString() + "\u005c"";
                id = new ExpressionIdentifierStandard.Builder()
                        .setName(ids)
                        .build();
    jj_consume_token(EQ);
    value = parseExpSemicolon();
    jj_consume_token(NESTING_SEMICOLON_SEMICOLON);
            ensure(!otherNames.contains(ids), ProblemsPRISM.PRISM_PARSER_REPEATED_LABEL, newPositional(t.beginLine, t.beginColumn), ids);
                otherNames.add(ids);
                formulae.addLabel(ids, value);
  }

  final private void parseGlobal(Map<Expression, JANIType> globalVariables, Map<Expression, Expression> globalInitValues) throws ParseException {
    jj_consume_token(GLOBAL);
    parseVariableDeclaration(globalVariables, globalInitValues);
  }

  final private void parseFormula(Formulas formulae) throws ParseException {
        Expression id, value;
        Token t;
    jj_consume_token(FORMULA);
    t = jj_consume_token(IDENTIFIER);
          id = new ExpressionIdentifierStandard.Builder()
                .setName(t.toString())
                .build();
    jj_consume_token(EQ);
    value = parseExpSemicolon();
    jj_consume_token(NESTING_SEMICOLON_SEMICOLON);
                String ids = id.toString();
                ensure(!otherNames.contains(ids), ProblemsPRISM.PRISM_PARSER_REPEATED_FORMULA, newPositional(t.beginLine, t.beginColumn), ids);
                otherNames.add(ids);
                formulae.addFormula(id.toString(), value);
  }

  final private void parsePlayer(List<PlayerDefinition> players) throws ParseException {
        Token item;
        Set<String> modules = new HashSet<String>();
        Set<String> actions = new HashSet<String>();
        Token id;
        Token playerBegin;
        String ids;
    playerBegin = jj_consume_token(PLAYERBEGIN);
    id = jj_consume_token(IDENTIFIER);
                ids = id.toString();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      item = jj_consume_token(IDENTIFIER);
                  modules.add(item.toString());
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      item = jj_consume_token(IDENTIFIER);
      jj_consume_token(RBRACKET);
                  actions.add(item.toString());
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        item = jj_consume_token(IDENTIFIER);
                          modules.add(item.toString());
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        item = jj_consume_token(IDENTIFIER);
        jj_consume_token(RBRACKET);
                          actions.add(item.toString());
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(PLAYEREND);
            ensure(!playerNames.contains(ids), ProblemsPRISM.PRISM_PARSER_REPEATED_PLAYER, newPositional(id.beginLine, id.beginColumn), ids);
                playerNames.add(ids);
                players.add(new PlayerDefinition(ids, modules, actions, newPositional(playerBegin.beginLine, playerBegin.beginColumn)));
  }

  final private void parseModule(List<Module> modules) throws ParseException {
        Module m;
        Expression id;
        Map<Expression, JANIType> variables = new HashMap<Expression,JANIType>();
        Map<Expression, Expression> initValues = new HashMap<Expression,Expression>();
        Expression[] invariants = new Expression[1];
        List<Command> commands = new ArrayList<Command>();
        Token t;
        String ids;
    jj_consume_token(MODULEBEGIN);
    t = jj_consume_token(IDENTIFIER);
                ids = t.toString();
                id = new ExpressionIdentifierStandard.Builder()
                        .setName(ids)
                        .build();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      m = parseModuleRename(id);
      break;
    default:
      jj_la1[13] = jj_gen;
      parseModuleContent(variables, initValues, invariants, commands);
                  m = new ModuleCommands(id.toString(), variables, initValues, commands, invariants[0], null);
    }
    jj_consume_token(MODULEEND);
            ensure(!moduleNames.contains(ids), ProblemsPRISM.PRISM_PARSER_REPEATED_MODULE, newPositional(t.beginLine, t.beginColumn), ids);
                moduleNames.add(ids);
                modules.add(m);
  }

  final private Module parseModuleRename(Expression newId) throws ParseException {
        Expression oldId;
        Map<Expression, Expression> map = new HashMap<Expression,Expression>();
    oldId = ExpressionIdentifier();
    jj_consume_token(LBRACKET);
    parseRenaming(map);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      parseRenaming(map);
    }
    jj_consume_token(RBRACKET);
          {if (true) return new ModuleRename(newId, oldId, map, null);}
    throw new Error("Missing return statement in function");
  }

  final private void parseRenaming(Map<Expression, Expression> map) throws ParseException {
        Expression oldId;
        Expression newId;
    oldId = ExpressionIdentifier();
    jj_consume_token(EQ);
    newId = ExpressionIdentifier();
          map.put(oldId, newId);
  }

  final private void parseModuleContent(Map<Expression,JANIType> variables, Map<Expression,Expression> initValues, Expression[] invariants, List<Command> commands) throws ParseException {
        Command c;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
      parseVariableDeclaration(variables, initValues);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INVARIANT_OPEN:
      invariants[0] = parseInvariantDeclaration();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      c = parseGuardedCommandDeclaration();
                  commands.add(c);
    }
  }

  final private void parseVariableDeclaration(Map<Expression, JANIType> variables, Map<Expression, Expression> initValues) throws ParseException {
        Expression id;
        JANIType type;
        Expression initValue = null;
        Token t;
        String ids;
    t = jj_consume_token(IDENTIFIER);
                ids = t.toString();
                id = new ExpressionIdentifierStandard.Builder()
                        .setName(ids)
                        .build();
    jj_consume_token(COLON);
    type = parseVariable();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INIT:
      jj_consume_token(INIT);
      initValue = parseExpSemicolon();
      jj_consume_token(NESTING_SEMICOLON_SEMICOLON);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            ensure(!otherNames.contains(ids), ProblemsPRISM.PRISM_PARSER_REPEATED_VARIABLE, newPositional(t.beginLine, t.beginColumn), ids);
                otherNames.add(ids);
                variables.put(id, type);
                if (initValue != null) {
                        initValues.put(id, initValue);
                }
  }

  final private JANIType parseVariable() throws ParseException {
        JANIType type;
        Expression low, high;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
      jj_consume_token(BOOL);
                  type = new JANITypeBool();
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      low = parseExpSepinterval();
      jj_consume_token(SEPINTERVAL_SEPINTERVAL);
      high = parseExpBrack();
      jj_consume_token(NESTING_BRACKET_RBRACKET);
                  JANITypeBounded typeBounded = new JANITypeBounded();
                typeBounded.setLowerBound(low);
                typeBounded.setUpperBound(high);
                type = typeBounded;
      break;
    case CLOCK:
      jj_consume_token(CLOCK);
                  type = new JANITypeClock();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseInvariantDeclaration() throws ParseException {
        Expression invar;
    jj_consume_token(INVARIANT_OPEN);
    invar = parseExpInvariant();
    jj_consume_token(INVARIANT_CLOSE);
          token_source.SwitchTo(DEFAULT);
          {if (true) return invar;}
    throw new Error("Missing return statement in function");
  }

  final private void parseRewards(List<RewardStructure> rewards) throws ParseException {
        Expression id = null;
        Expression label;
        Expression guard;
        Expression value;
        List<Reward> locRew = new ArrayList<Reward>();
        Token t;
        String ids;
    jj_consume_token(REWARDSBEGIN);
    if (jj_2_1(2147483647)) {
      jj_consume_token(QUOTE);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(QUOTE);
                        ids = "\u005c"" + t.toString() + "\u005c"";
                        id = new ExpressionIdentifierStandard.Builder()
                                .setName(ids)
                                .build();
                        ensure(!rewardsNames.contains(ids), ProblemsPRISM.PRISM_PARSER_REPEATED_REWARD, newPositional(t.beginLine, t.beginColumn), ids);
    } else {
      ;
    }
                if (id == null) {
                        id = new ExpressionIdentifierStandard.Builder()
                                .setName("")
                                .build();
                }
    label_6:
    while (true) {
                  label = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
                          label = new ExpressionIdentifierStandard.Builder()
                                        .setName("")
                                        .build();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
                                  label = new ExpressionIdentifierStandard.Builder()
                                        .setName(t.toString())
                                        .build();
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
                  token_source.SwitchTo(NESTING_COLON);
                  expressionToken = getToken(1);
                  t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case MINUS:
      case LPAR:
      case NOT:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
          t = jj_consume_token(TRUE);
          break;
        case FALSE:
          t = jj_consume_token(FALSE);
          break;
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
          break;
        case LPAR:
          t = jj_consume_token(LPAR);
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
          break;
        case NOT:
          t = jj_consume_token(NOT);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      guard = parseExpColon(t);
                  token_source.SwitchTo(NESTING_SEMICOLON);
      jj_consume_token(NESTING_COLON_COLON);
      value = parseExpSemicolon();
      jj_consume_token(NESTING_SEMICOLON_SEMICOLON);
                        if (label == null) {
                                locRew.add(new StateReward(guard, value, null));
                        } else {
                                locRew.add(new TransitionReward(label.toString(), guard, value, null));
                        }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case MINUS:
      case LBRACKET:
      case LPAR:
      case NOT:
      case IDENTIFIER:
      case UPDATE_TRUE:
      case UPDATE_LPAR:
      case UPDATE_IDENTIFIER:
      case UPDATE_OTHER:
      case NESTING_COLON_COLON:
      case NESTING_COLON_OTHER:
      case NESTING_COLON_QUESTION:
      case NESTING_COLON_INNER_OTHER:
      case NESTING_COLON_INNER_QUESTION:
      case NESTING_COLON_INNER_COLON:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_6;
      }
    }
    jj_consume_token(REWARDSEND);
                ids = id.toString();
                rewardsNames.add(ids);
                rewards.add(new RewardStructure(ids, locRew, null));
  }

  final private Expression parseInit() throws ParseException {
        Expression init;
        Token t;
    t = jj_consume_token(INIT);
    init = parseExpInit();
    jj_consume_token(INIT_CLOSE);
                initcount++;
                ensure(initcount <= 1, ProblemsPRISM.PRISM_PARSER_MULTIPLE_INIT, newPositional(t.beginLine, t.beginColumn));
                {if (true) return init;}
    throw new Error("Missing return statement in function");
  }

  final private SystemDefinition parseSystem() throws ParseException {
        SystemDefinition sd;
        Token t;
    t = jj_consume_token(SYSTEMBEGIN);
    sd = parseSystemContent();
    jj_consume_token(SYSTEMEND);
                sdcount++;
                ensure(sdcount <= 1, ProblemsPRISM.PRISM_PARSER_MULTIPLE_SYSTEM, newPositional(t.beginLine, t.beginColumn));
                {if (true) return sd;}
    throw new Error("Missing return statement in function");
  }

  final private SystemDefinition parseSystemContent() throws ParseException {
        SystemDefinition sd;
    sd = parseSystemParallelCommonActions();
          {if (true) return sd;}
    throw new Error("Missing return statement in function");
  }

  final private SystemDefinition parseSystemParallelCommonActions() throws ParseException {
        SystemDefinition sd;
        SystemDefinition other;
    sd = parseSystemParallelAsynchronous();
    label_7:
    while (true) {
      if (jj_2_2(2147483647)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(OR);
      jj_consume_token(OR);
      other = parseSystemParallelSetActions();
                  sd = new SystemAlphaParallel(sd, other, null);
    }
          {if (true) return sd;}
    throw new Error("Missing return statement in function");
  }

  final private SystemDefinition parseSystemParallelAsynchronous() throws ParseException {
        SystemDefinition sd;
        SystemDefinition other;
    sd = parseSystemParallelSetActions();
    label_8:
    while (true) {
      if (jj_2_3(2147483647)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(OR);
      jj_consume_token(OR);
      jj_consume_token(OR);
      other = parseSystemParallelCommonActions();
                  sd = new SystemAsyncParallel(sd, other, null);
    }
          {if (true) return sd;}
    throw new Error("Missing return statement in function");
  }

  final private SystemDefinition parseSystemParallelSetActions() throws ParseException {
        SystemDefinition sd;
        SystemDefinition other;
        Set<Expression> idSet;
    sd = parseSystemRenHid();
    if (jj_2_4(2147483647)) {
      jj_consume_token(OR);
      jj_consume_token(LBRACKET);
      idSet = parseIdSet();
      jj_consume_token(RBRACKET);
      jj_consume_token(OR);
      other = parseSystemRenHid();
                  sd = new SystemRestrictedParallel(sd, other, idSet, null);
    } else {
      ;
    }
          {if (true) return sd;}
    throw new Error("Missing return statement in function");
  }

  final private SystemDefinition parseSystemRenHid() throws ParseException {
        SystemDefinition sd;
        Set<Expression> idSet;
        Map<Expression, Expression> renMap;
    sd = parseSystemBase();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
      case LCURL:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
        jj_consume_token(DIVIDE);
        jj_consume_token(LCURL);
        idSet = parseIdSet();
        jj_consume_token(RCURL);
                  sd = new SystemHide(sd, idSet, null);
        break;
      case LCURL:
        jj_consume_token(LCURL);
        renMap = parseRenameMap();
        jj_consume_token(RCURL);
                  sd = new SystemRename(sd, renMap, null);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return sd;}
    throw new Error("Missing return statement in function");
  }

  final private Map<Expression, Expression> parseRenameMap() throws ParseException {
        Map<Expression, Expression> map = new HashMap<Expression,Expression>();
        Expression oldId, newId;
    oldId = ExpressionIdentifier();
    jj_consume_token(RENAME);
    newId = ExpressionIdentifier();
          map.put(oldId, newId);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      oldId = ExpressionIdentifier();
      jj_consume_token(RENAME);
      newId = ExpressionIdentifier();
                  map.put(oldId, newId);
    }
          {if (true) return map;}
    throw new Error("Missing return statement in function");
  }

  final private Set<Expression> parseIdSet() throws ParseException {
        Set<Expression> le = new HashSet<Expression>();
        Expression e;
    e = ExpressionIdentifier();
          le.add(e);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      e = ExpressionIdentifier();
                  le.add(e);
    }
          {if (true) return le;}
    throw new Error("Missing return statement in function");
  }

  final private SystemDefinition parseSystemBase() throws ParseException {
        Expression e;
        SystemDefinition sd;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      e = ExpressionIdentifier();
                  sd = new SystemModule(e.toString(), null);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      sd = parseSystemParallelCommonActions();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return sd;}
    throw new Error("Missing return statement in function");
  }

  final private Command parseGuardedCommandDeclaration() throws ParseException {
        Token literal;
        Expression identifier = null;
        Expression guard;
        List<Alternative> updates;
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RATE:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        literal = jj_consume_token(IDENTIFIER);
        break;
      case RATE:
        literal = jj_consume_token(RATE);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  identifier = new ExpressionIdentifierStandard.Builder()
                        .setName(literal.toString())
                        .build();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
                if (identifier == null) {
                        identifier = new ExpressionIdentifierStandard.Builder()
                                .setName("")
                                .build();
                }
    jj_consume_token(RBRACKET);
    guard = parseCondition();
    jj_consume_token(ARROW_ARROW);
    updates = parseUpdate();
          token_source.SwitchTo(DEFAULT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UPDATE_SEMICOLON:
      jj_consume_token(UPDATE_SEMICOLON);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new Command(identifier, guard, updates, null);}
    throw new Error("Missing return statement in function");
  }

  final private List<Alternative> parseUpdate() throws ParseException {
        List<Alternative> updates = new ArrayList<Alternative>();
        Expression one = ExpressionLiteral.getOne();
    if (jj_2_5(2147483647)) {
      parseDetUpdate(one, updates);
    } else if (jj_2_6(2147483647)) {
      parseDetUpdate(one, updates);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPDATE_TRUE:
      case UPDATE_LPAR:
      case UPDATE_IDENTIFIER:
      case UPDATE_OTHER:
        parseProbUpdate(updates);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return updates;}
    throw new Error("Missing return statement in function");
  }

  final private void parseProbUpdate(List<Alternative> updates) throws ParseException {
        Expression weight;
        Token t;
          token_source.SwitchTo(NESTING_COLON);
          expressionToken = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UPDATE_OTHER:
      t = jj_consume_token(UPDATE_OTHER);
      break;
    case UPDATE_LPAR:
      t = jj_consume_token(UPDATE_LPAR);
      break;
    case UPDATE_IDENTIFIER:
      t = jj_consume_token(UPDATE_IDENTIFIER);
      break;
    case UPDATE_TRUE:
      t = jj_consume_token(UPDATE_TRUE);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    weight = parseExpColon(t);
          token_source.SwitchTo(UPDATE_ENV);
    jj_consume_token(NESTING_COLON_COLON);
    parseDetUpdate(weight, updates);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPDATE_PLUS:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_12;
      }
      jj_consume_token(UPDATE_PLUS);
                  expressionToken = getToken(1);
      weight = parseExpColon(null);
                  token_source.SwitchTo(UPDATE_ENV);
      jj_consume_token(NESTING_COLON_COLON);
      parseDetUpdate(weight, updates);
    }
  }

  final private void parseDetUpdate(Expression weight, List<Alternative> updates) throws ParseException {
        Expression id, value;
        Map<Expression, Expression> effect = new HashMap<Expression,Expression>();
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UPDATE_TRUE:
      jj_consume_token(UPDATE_TRUE);
      break;
    case UPDATE_LPAR:
      jj_consume_token(UPDATE_LPAR);
      t = jj_consume_token(UPDATE_IDENTIFIER);
                  id = new ExpressionIdentifierStandard.Builder()
                        .setName(t.toString())
                        .build();
      jj_consume_token(UPDATE_PRIME);
      jj_consume_token(UPDATE_EQ);
      value = parseExpParenth();
                  token_source.SwitchTo(UPDATE_ENV);
      jj_consume_token(NESTING_PAR_RPAR);
                    ensure(!effect.containsKey(id), ProblemsPRISM.PRISM_PARSER_REPEATED_UPDATE, newPositional(t.beginLine, t.beginColumn), t);
                        effect.put(id, value);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UPDATE_AND:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_13;
        }
        jj_consume_token(UPDATE_AND);
        jj_consume_token(UPDATE_LPAR);
        t = jj_consume_token(UPDATE_IDENTIFIER);
                          id = new ExpressionIdentifierStandard.Builder()
                                .setName(t.toString())
                                .build();
        jj_consume_token(UPDATE_PRIME);
        jj_consume_token(UPDATE_EQ);
        value = parseExpParenth();
                          token_source.SwitchTo(UPDATE_ENV);
        jj_consume_token(NESTING_PAR_RPAR);
                            ensure(!effect.containsKey(id), ProblemsPRISM.PRISM_PARSER_REPEATED_UPDATE, newPositional(t.beginLine, t.beginColumn), t.toString());
                                effect.put(id, value);
      }
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          token_source.SwitchTo(UPDATE_ENV);
          updates.add(new Alternative(weight, effect, null));
  }

  final private Expression parseCondition() throws ParseException {
        Expression e;
        token_source.SwitchTo(ARROW_ENV);
    e = parseExpArrow();
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseExpSemicolon() throws ParseException {
        Token t;
        StringBuilder exp = new StringBuilder();
        Expression expression = null;
        token_source.nestingLevel = 0;
        token_source.SwitchTo(NESTING_SEMICOLON);
          expressionToken = getToken(1);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NESTING_SEMICOLON_OTHER:
      case NESTING_SEMICOLON_BRACKET_OPEN:
      case NESTING_SEMICOLON_INNER_OTHER:
      case NESTING_SEMICOLON_INNER_BRACKET_OPEN:
      case NESTING_SEMICOLON_INNER_BRACKET_CLOSE:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NESTING_SEMICOLON_OTHER:
        t = jj_consume_token(NESTING_SEMICOLON_OTHER);
                  exp.append(t.toString());
        break;
      case NESTING_SEMICOLON_BRACKET_OPEN:
        t = jj_consume_token(NESTING_SEMICOLON_BRACKET_OPEN);
                  exp.append(t.toString());
        break;
      case NESTING_SEMICOLON_INNER_OTHER:
        t = jj_consume_token(NESTING_SEMICOLON_INNER_OTHER);
                  exp.append(t.toString());
        break;
      case NESTING_SEMICOLON_INNER_BRACKET_OPEN:
        t = jj_consume_token(NESTING_SEMICOLON_INNER_BRACKET_OPEN);
                 exp.append(t.toString());
        break;
      case NESTING_SEMICOLON_INNER_BRACKET_CLOSE:
        t = jj_consume_token(NESTING_SEMICOLON_INNER_BRACKET_CLOSE);
                  exp.append(t.toString());
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                PrismExpressionParser ep = new PrismExpressionParser(new StringReader(exp.toString()));
                {if (true) return ep.parseExpression(part, expressionToken.beginLine, expressionToken.beginColumn, exp.toString());}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseExpParenth() throws ParseException {
        Token t;
        StringBuilder exp = new StringBuilder();
        Expression expression = null;
        token_source.nestingLevel = 0;
        token_source.SwitchTo(NESTING_PAR);
          expressionToken = getToken(1);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NESTING_PAR_OTHER:
        t = jj_consume_token(NESTING_PAR_OTHER);
                  exp.append(t.toString());
        break;
      case NESTING_PAR_PAR_OPEN:
        t = jj_consume_token(NESTING_PAR_PAR_OPEN);
                  exp.append(t.toString());
        break;
      case NESTING_PAR_INNER_OTHER:
        t = jj_consume_token(NESTING_PAR_INNER_OTHER);
                  exp.append(t.toString());
        break;
      case NESTING_PAR_INNER_PAR_OPEN:
        t = jj_consume_token(NESTING_PAR_INNER_PAR_OPEN);
                 exp.append(t.toString());
        break;
      case NESTING_PAR_INNER_PAR_CLOSE:
        t = jj_consume_token(NESTING_PAR_INNER_PAR_CLOSE);
                  exp.append(t.toString());
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NESTING_PAR_OTHER:
      case NESTING_PAR_PAR_OPEN:
      case NESTING_PAR_INNER_OTHER:
      case NESTING_PAR_INNER_PAR_OPEN:
      case NESTING_PAR_INNER_PAR_CLOSE:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_15;
      }
    }
                PrismExpressionParser ep = new PrismExpressionParser(new StringReader(exp.toString()));
                {if (true) return ep.parseExpression(part, expressionToken.beginLine, expressionToken.beginColumn, exp.toString());}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseExpBrack() throws ParseException {
        Token t;
        StringBuilder exp = new StringBuilder();
        Expression expression = null;
        token_source.nestingLevel = 0;
        token_source.SwitchTo(NESTING_BRACKET);
          expressionToken = getToken(1);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NESTING_BRACKET_OTHER:
        t = jj_consume_token(NESTING_BRACKET_OTHER);
                  exp.append(t.toString());
        break;
      case NESTING_BRACKET_BRACKET_OPEN:
        t = jj_consume_token(NESTING_BRACKET_BRACKET_OPEN);
                  exp.append(t.toString());
        break;
      case NESTING_BRACKET_INNER_OTHER:
        t = jj_consume_token(NESTING_BRACKET_INNER_OTHER);
                  exp.append(t.toString());
        break;
      case NESTING_BRACKET_INNER_BRACKET_OPEN:
        t = jj_consume_token(NESTING_BRACKET_INNER_BRACKET_OPEN);
                 exp.append(t.toString());
        break;
      case NESTING_BRACKET_INNER_BRACKET_CLOSE:
        t = jj_consume_token(NESTING_BRACKET_INNER_BRACKET_CLOSE);
                  exp.append(t.toString());
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NESTING_BRACKET_OTHER:
      case NESTING_BRACKET_BRACKET_OPEN:
      case NESTING_BRACKET_INNER_OTHER:
      case NESTING_BRACKET_INNER_BRACKET_OPEN:
      case NESTING_BRACKET_INNER_BRACKET_CLOSE:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_16;
      }
    }
                PrismExpressionParser ep = new PrismExpressionParser(new StringReader(exp.toString()));
                {if (true) return ep.parseExpression(part, expressionToken.beginLine, expressionToken.beginColumn, exp.toString());}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseExpColon(Token old) throws ParseException {
        Token t;
        StringBuilder exp = new StringBuilder();
        if (old != null) {
                exp.append(old.toString());
        }
        Expression expression = null;
        token_source.nestingLevel = 0;
        token_source.SwitchTo(NESTING_COLON);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPDATE_TRUE:
      case UPDATE_LPAR:
      case UPDATE_IDENTIFIER:
      case UPDATE_OTHER:
      case NESTING_COLON_OTHER:
      case NESTING_COLON_QUESTION:
      case NESTING_COLON_INNER_OTHER:
      case NESTING_COLON_INNER_QUESTION:
      case NESTING_COLON_INNER_COLON:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPDATE_OTHER:
        t = jj_consume_token(UPDATE_OTHER);
                  exp.append(t.toString());
        break;
      case UPDATE_LPAR:
        t = jj_consume_token(UPDATE_LPAR);
                  exp.append(t.toString());
        break;
      case UPDATE_IDENTIFIER:
        t = jj_consume_token(UPDATE_IDENTIFIER);
                  exp.append(t.toString());
        break;
      case UPDATE_TRUE:
        t = jj_consume_token(UPDATE_TRUE);
                  exp.append(t.toString());
        break;
      case NESTING_COLON_OTHER:
        t = jj_consume_token(NESTING_COLON_OTHER);
                  exp.append(t.toString());
        break;
      case NESTING_COLON_QUESTION:
        t = jj_consume_token(NESTING_COLON_QUESTION);
                  exp.append(t.toString());
        break;
      case NESTING_COLON_INNER_OTHER:
        t = jj_consume_token(NESTING_COLON_INNER_OTHER);
                  exp.append(t.toString());
        break;
      case NESTING_COLON_INNER_QUESTION:
        t = jj_consume_token(NESTING_COLON_INNER_QUESTION);
                 exp.append(t.toString());
        break;
      case NESTING_COLON_INNER_COLON:
        t = jj_consume_token(NESTING_COLON_INNER_COLON);
                  exp.append(t.toString());
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                PrismExpressionParser ep = new PrismExpressionParser(new StringReader(exp.toString()));
                {if (true) return ep.parseExpression(part, expressionToken.beginLine, expressionToken.beginColumn, exp.toString());}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseExpInvariant() throws ParseException {
        StringBuilder content = new StringBuilder();
        Token t;
          expressionToken = getToken(1);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INVARIANT_IDENTIFIER:
      case INVARIANT_OTHER:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INVARIANT_IDENTIFIER:
        t = jj_consume_token(INVARIANT_IDENTIFIER);
              content.append(t.toString());
        break;
      case INVARIANT_OTHER:
        t = jj_consume_token(INVARIANT_OTHER);
              content.append(t.toString());
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                PrismExpressionParser ep = new PrismExpressionParser(new StringReader(content.toString()));
                {if (true) return ep.parseExpression(part, expressionToken.beginLine, expressionToken.beginColumn, content.toString());}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseExpInit() throws ParseException {
        StringBuilder content = new StringBuilder();
        Token t;
        token_source.SwitchTo(INIT_ENV);
          expressionToken = getToken(1);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INIT_IDENTIFIER:
      case INIT_OTHER:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INIT_IDENTIFIER:
        t = jj_consume_token(INIT_IDENTIFIER);
              content.append(t.toString());
        break;
      case INIT_OTHER:
        t = jj_consume_token(INIT_OTHER);
              content.append(t.toString());
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                PrismExpressionParser ep = new PrismExpressionParser(new StringReader(content.toString()));
                {if (true) return ep.parseExpression(part, expressionToken.beginLine, expressionToken.beginColumn, content.toString());}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseExpSepinterval() throws ParseException {
        Token content;
        token_source.SwitchTo(SEPINTERVAL_ENV);
          expressionToken = getToken(1);
    content = jj_consume_token(SEPINTERVAL_ARG);
                PrismExpressionParser ep = new PrismExpressionParser(new StringReader(content.toString()));
                {if (true) return ep.parseExpression(part, expressionToken.beginLine, expressionToken.beginColumn, content.toString());}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseExpArrow() throws ParseException {
        Token content;
        token_source.SwitchTo(ARROW_ENV);
          expressionToken = getToken(1);
    content = jj_consume_token(ARROW_ARG);
                PrismExpressionParser ep = new PrismExpressionParser(new StringReader(content.toString()));
                {if (true) return ep.parseExpression(part, expressionToken.beginLine, expressionToken.beginColumn, content.toString());}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionIdentifier() throws ParseException {
        Token literal;
    literal = jj_consume_token(IDENTIFIER);
          {if (true) return new ExpressionIdentifierStandard.Builder()
                .setName(literal.toString())
                .build();}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3_2() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(UPDATE_LPAR)) return true;
    if (jj_scan_token(UPDATE_IDENTIFIER)) return true;
    if (jj_scan_token(UPDATE_PRIME)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(UPDATE_TRUE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(QUOTE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PrismParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa9424e00,0xa9424e00,0x0,0x4000,0x400,0x88004c00,0x10002040,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x1000000,0x140,0x0,0x0,0x10000,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x6037092,0x6037092,0x82,0x1000,0x2000000,0x2005082,0x0,0x12000,0x12000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x20000000,0x20000000,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x401000,0x20,0x4000,0x20,0x400000,0x4000,0x0,0x0,0x20,0x1000,0x20,0x0,0x20,0x20084,0x20084,0x200a4,0x210,0x210,0x4000,0x4000,0x80,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x4,0xc0000004,0x0,0x0,0x0,0x0,0x4,0x4,0x4,0x0,0xc0000000,0xc0000000,0x0,0x0,0xc0000000,0x1f0000,0x1f0000,0x30000000,0x30000000,0x7c00000,0x7c00000,0xc0000000,0xc0000000,0xc00,0xc00,0x6000,0x6000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfc60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x60,0x60,0x8,0x10,0x0,0x0,0x0,0x380,0x380,0x0,0x0,0xf860,0xf860,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PrismParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PrismParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PrismParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PrismParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PrismParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PrismParser(PrismParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PrismParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[146];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 50; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 146; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
