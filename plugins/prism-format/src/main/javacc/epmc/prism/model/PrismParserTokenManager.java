/* Generated By:JavaCC: Do not edit this line. PrismParserTokenManager.java */
package epmc.prism.model;
import epmc.prism.error.ProblemsPRISM;
import epmc.error.Positional;
import static epmc.error.UtilError.ensure;
import epmc.error.EPMCException;
import epmc.graph.Semantics;
import epmc.graph.SemanticsDTMCStandard;
import epmc.graph.SemanticsCTMC;
import epmc.graph.SemanticsMDP;
import epmc.graph.SemanticsSMG;
import epmc.graph.SemanticsIMC;
import epmc.graph.SemanticsMA;
import epmc.graph.SemanticsCTMDP;
import epmc.graph.SemanticsPTA;
import epmc.expression.Expression;
import epmc.expression.standard.ExpressionIdentifierStandard;
import epmc.expression.standard.ExpressionLiteral;
import epmc.prism.expression.PrismExpressionParser;
import epmc.prism.options.OptionsPRISM;
import epmc.options.Options;
import epmc.jani.model.type.JANIType;
import epmc.jani.model.type.JANITypeInt;
import epmc.jani.model.type.JANITypeReal;
import epmc.jani.model.type.JANITypeBool;
import epmc.jani.model.type.JANITypeBounded;
import epmc.time.JANITypeClock;
import epmc.expression.standard.ExpressionTypeInteger;
import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.HashMap;

/** Token Manager. */
public class PrismParserTokenManager implements PrismParserConstants
{
        int nestingLevel;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_7(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_7(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_7(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_7(0, 1, 0);
      case 91:
         return jjStopAtPos(0, 115);
      case 93:
         return jjStopAtPos(0, 116);
      default :
         return jjMoveNfa_7(3, 0);
   }
}
private int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(0);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if ((0xffffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_4(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_4(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_4(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_4(0, 1, 0);
      case 40:
         return jjStopAtPos(0, 125);
      case 41:
         return jjStopAtPos(0, 123);
      default :
         return jjMoveNfa_4(3, 0);
   }
}
private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xfffffcffffffffffL & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0xfffffcffffffffffL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_2(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_2(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_2(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_2(0, 1, 0);
      case 40:
         return jjStopAtPos(0, 136);
      case 41:
         return jjStopAtPos(0, 137);
      default :
         return jjMoveNfa_2(3, 0);
   }
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xfffffcffffffffffL & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0xfffffcffffffffffL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x10L) != 0L)
            return 12;
         if ((active0 & 0xe0f8870004a09020L) != 0L)
            return 1;
         if ((active0 & 0x1f0778fffb5f6fc0L) != 0L || (active1 & 0x320000001L) != 0L)
         {
            jjmatchedKind = 98;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x180000000L) != 0L)
            return 1;
         if ((active0 & 0x1fdf7efe7b5f6fc0L) != 0L || (active1 & 0x320000001L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 1;
            }
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x481f58000000L) != 0L || (active1 & 0x20000000L) != 0L)
            return 1;
         if ((active0 & 0x1fdf36e0235f6fc0L) != 0L || (active1 & 0x300000001L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 2;
            }
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0xe0600f0224f2b00L) != 0L || (active1 & 0x300000001L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 3;
            }
            return 1;
         }
         if ((active0 & 0x11d93600011044c0L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0xe0610b002462000L) != 0L || (active1 & 0x300000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x4020090b00L) != 0L || (active1 & 0x1L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0xa0610a002020000L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x400001000442000L) != 0L || (active1 & 0x100000000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0xa0410a002000000L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x2000000020000L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0xa0410a002000000L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active0 & 0x204108000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x800002002000000L) != 0L || (active1 & 0x200000000L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x108000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x204000000000000L) != 0L)
            return 1;
         return -1;
      case 10:
         if ((active0 & 0x108000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active0 & 0x108000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 11;
            return 1;
         }
         return -1;
      case 12:
         if ((active0 & 0x100000000000L) != 0L)
            return 1;
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 13;
            return 1;
         }
         return -1;
      case 14:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0, long active1)
{
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_13()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_13(0x0L, 0x800000L);
      case 34:
         return jjStopAtPos(0, 92);
      case 38:
         return jjStopAtPos(0, 79);
      case 39:
         return jjStopAtPos(0, 85);
      case 40:
         return jjStopAtPos(0, 71);
      case 41:
         return jjStopAtPos(0, 72);
      case 42:
         return jjStopAtPos(0, 67);
      case 43:
         return jjStopAtPos(0, 65);
      case 44:
         return jjStopAtPos(0, 78);
      case 45:
         return jjStopAtPos(0, 66);
      case 47:
         return jjStartNfaWithStates_13(0, 68, 12);
      case 58:
         return jjStopAtPos(0, 77);
      case 59:
         return jjStopAtPos(0, 76);
      case 60:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_13(0x0L, 0x41080800L);
      case 61:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_13(0x0L, 0x40000L);
      case 62:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_13(0x0L, 0x88000000L);
      case 63:
         return jjStopAtPos(0, 84);
      case 65:
         return jjStartNfaWithStates_13(0, 5, 1);
      case 67:
         return jjStartNfaWithStates_13(0, 12, 1);
      case 69:
         return jjStartNfaWithStates_13(0, 15, 1);
      case 70:
         return jjStartNfaWithStates_13(0, 21, 1);
      case 71:
         return jjStartNfaWithStates_13(0, 23, 1);
      case 73:
         return jjStartNfaWithStates_13(0, 26, 1);
      case 80:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_13(0x60000000000L, 0x0L);
      case 82:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_13(0x18000000000000L, 0x0L);
      case 83:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_13(0xc0000000000000L, 0x0L);
      case 85:
         return jjStartNfaWithStates_13(0, 61, 1);
      case 87:
         return jjStartNfaWithStates_13(0, 62, 1);
      case 88:
         return jjStartNfaWithStates_13(0, 63, 1);
      case 91:
         return jjStopAtPos(0, 69);
      case 93:
         return jjStopAtPos(0, 70);
      case 98:
         return jjMoveStringLiteralDfa1_13(0x40L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_13(0xf80L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_13(0x6000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_13(0x804002000000000L, 0x200000000L);
      case 102:
         return jjMoveStringLiteralDfa1_13(0x1f0000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_13(0x400000L, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa1_13(0x1b000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_13(0x60000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_13(0x5f80000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_13(0x8000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_13(0x780000000000L, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa1_13(0x3000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_13(0x700000000000000L, 0x20000000L);
      case 116:
         return jjMoveStringLiteralDfa1_13(0x1000000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 73);
      case 124:
         return jjStopAtPos(0, 80);
      case 125:
         return jjStopAtPos(0, 74);
      default :
         return jjMoveNfa_13(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_13(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 60:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      case 61:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         return jjMoveStringLiteralDfa2_13(active0, 0L, active1, 0x80000L);
      case 62:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 97:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_13(active0, 0x1000120010000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_13(active0, 0x200000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_13(active0, 0x2000000000080L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_13(active0, 0x400040000L, active1, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa2_13(active0, 0x480100L, active1, 0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa2_13(active0, 0xd8060008000000L, active1, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa2_13(active0, 0x804002013000000L, active1, 0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa2_13(active0, 0x89840022240L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_13(active0, 0x100000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_13(active0, 0x1000300000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_13(active0, 0x200400000004c00L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_13(active0, 0x4000100000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_13(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_13(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(2, 83);
         break;
      case 97:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_13(2, 46, 1);
         return jjMoveStringLiteralDfa3_13(active0, 0x48020000000000L, active1, 0x100000000L);
      case 98:
         return jjMoveStringLiteralDfa3_13(active0, 0x20000000L, active1, 0L);
      case 99:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_13(2, 27, 1);
         break;
      case 100:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_13(active0, 0x804003000000000L, active1, 0x200000000L);
      case 103:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_13(2, 30, 1);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_13(2, 93, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_13(active0, 0x90040001000080L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_13(active0, 0x4000050000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_13(active0, 0x4c00L, active1, 0L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_13(2, 34, 1);
         return jjMoveStringLiteralDfa3_13(active0, 0x8000100200L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_13(active0, 0x200300000480140L, active1, 0L);
      case 112:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_13(2, 33, 1);
         break;
      case 114:
         return jjMoveStringLiteralDfa3_13(active0, 0x100000000020000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_13(active0, 0x400000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_13(2, 28, 1);
         return jjMoveStringLiteralDfa3_13(active0, 0x1000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_13(active0, 0x1000000000002000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_13(active0, 0x2000000L, active1, 0x1L);
      case 119:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_13(2, 43, 1);
         return jjMoveStringLiteralDfa3_13(active0, 0x2000000000000L, active1, 0L);
      case 120:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_13(2, 32, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_13(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_13(active0, 0x2000002000000L, active1, 0L);
      case 98:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_13(active0, 0x100000402000L, active1, 0L);
      case 99:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_13(3, 10, 1);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_13(3, 14, 1);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_13(3, 20, 1);
         return jjMoveStringLiteralDfa4_13(active0, 0x200000000000100L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_13(active0, 0x8000000800L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 48, 1);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 60, 1);
         return jjMoveStringLiteralDfa4_13(active0, 0x20000000L, active1, 0x1L);
      case 108:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_13(3, 6, 1);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_13(3, 7, 1);
         break;
      case 109:
         return jjMoveStringLiteralDfa4_13(active0, 0x2000020000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 42, 1);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 52, 1);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 55, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_13(active0, 0x80000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_13(active0, 0L, active1, 0x200000000L);
      case 114:
         return jjMoveStringLiteralDfa4_13(active0, 0x4000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_13(active0, 0x800000000010200L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_13(3, 24, 1);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 56, 1);
         return jjMoveStringLiteralDfa4_13(active0, 0x400004000040000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_13(active0, 0x1000000000L, active1, 0L);
      case 120:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 41, 1);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 51, 1);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 54, 1);
         break;
      case 121:
         return jjMoveStringLiteralDfa4_13(active0, 0L, active1, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_13(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_13(active0, 0x100000400000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_13(4, 16, 1);
         return jjMoveStringLiteralDfa5_13(active0, 0x404008000040000L, active1, 0x100000000L);
      case 104:
         return jjMoveStringLiteralDfa5_13(active0, 0x200000000000000L, active1, 0L);
      case 105:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_13(4, 38, 1);
         break;
      case 107:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_13(4, 8, 1);
         break;
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_13(4, 29, 1);
         return jjMoveStringLiteralDfa5_13(active0, 0x1000002000L, active1, 0x200000000L);
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_13(4, 64, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_13(active0, 0x2000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_13(4, 11, 1);
         break;
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_13(4, 19, 1);
         return jjMoveStringLiteralDfa5_13(active0, 0x2000002000000L, active1, 0L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_13(4, 9, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_13(active0, 0x20000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_13(active0, 0x800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_13(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_13(active0, 0x200000000000000L, active1, 0x200000000L);
      case 98:
         return jjMoveStringLiteralDfa6_13(active0, 0x100000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_13(active0, 0x2002000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_13(5, 13, 1);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_13(5, 36, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_13(active0, 0x2000000L, active1, 0L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_13(5, 22, 1);
         return jjMoveStringLiteralDfa6_13(active0, 0x20000L, active1, 0L);
      case 109:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_13(5, 58, 1);
         break;
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_13(5, 18, 1);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_13(5, 96, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_13(active0, 0x800000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_13(active0, 0x8000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_13(active0, 0x4000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_13(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_13(6, 17, 1);
         return jjMoveStringLiteralDfa7_13(active0, 0x4000002000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_13(active0, 0x8000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_13(active0, 0x100000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_13(6, 49, 1);
         return jjMoveStringLiteralDfa7_13(active0, 0x200000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa7_13(active0, 0x800000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_13(active0, 0x2000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa7_13(active0, 0L, active1, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_13(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_13(active0, 0x800000000000000L, active1, 0x200000000L);
      case 108:
         return jjMoveStringLiteralDfa8_13(active0, 0x102000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_13(active0, 0x2000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_13(active0, 0x4008000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_13(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_13(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa9_13(active0, 0x4000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_13(8, 37, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_13(active0, 0x200100000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_13(8, 59, 1);
         return jjMoveStringLiteralDfa9_13(active0, 0x8000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_13(8, 97, 1);
         break;
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_13(8, 25, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_13(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_13(9, 57, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_13(active0, 0x8000000000L);
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_13(9, 50, 1);
         return jjMoveStringLiteralDfa10_13(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_13(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_13(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_13(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa11_13(active0, 0x8000000000L);
      case 116:
         return jjMoveStringLiteralDfa11_13(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_13(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_13(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_13(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_13(active0, 0x108000000000L);
      default :
         break;
   }
   return jjStartNfa_13(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_13(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_13(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_13(12, 44, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa13_13(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_13(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_13(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_13(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa14_13(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_13(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_13(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_13(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_13(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_13(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_13(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_13(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_13(15, 39, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_13(14, active0, 0L);
}
private int jjStartNfaWithStates_13(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_13(state, pos + 1);
}
private int jjMoveNfa_13(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 11);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 12;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAdd(3);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 99)
                        kind = 99;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 48 && kind > 99)
                     kind = 99;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 11);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddStates(0, 3);
                  break;
               case 12:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(1);
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(4, 5);
                  break;
               case 13:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1eL) != 0L)
            return 2;
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 109;
            return 1;
         }
         return -1;
      case 1:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_9(0, 3, 2);
      case 10:
         return jjStartNfaWithStates_9(0, 4, 2);
      case 13:
         return jjStartNfaWithStates_9(0, 2, 2);
      case 32:
         return jjStartNfaWithStates_9(0, 1, 2);
      case 101:
         return jjMoveStringLiteralDfa1_9(0x100000000000L);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_9(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_9(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_9(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_9(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_9(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa3_9(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_9(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_9(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_9(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa4_9(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_9(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_9(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_9(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa5_9(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_9(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_9(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_9(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_9(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_9(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_9(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_9(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_9(6, 108, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_9(5, 0L, active1);
}
private int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(2);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(1);
                  }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(2);
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0xf800000178000001L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_0(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_0(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_0(0, 1, 0);
      case 58:
         return jjStopAtPos(0, 143);
      case 63:
         return jjStopAtPos(0, 142);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7bffffffffffffffL & l) != 0L)
                  {
                     if (kind > 141)
                        kind = 141;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0x7bffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_6(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_6(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_6(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_6(0, 1, 0);
      case 91:
         return jjStopAtPos(0, 119);
      case 93:
         return jjStopAtPos(0, 117);
      default :
         return jjMoveNfa_6(3, 0);
   }
}
private int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(0);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if ((0xffffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_1(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_1(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_1(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_1(0, 1, 0);
      case 58:
         return jjStopAtPos(0, 138);
      case 63:
         return jjStopAtPos(0, 140);
      default :
         return jjMoveNfa_1(3, 0);
   }
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7bffffffffffffffL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0x7bffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x2000000000L) != 0L)
            return 2;
         if ((active0 & 0x1eL) != 0L)
            return 6;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0, long active1)
{
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_12()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_12(0, 3, 6);
      case 10:
         return jjStartNfaWithStates_12(0, 4, 6);
      case 13:
         return jjStartNfaWithStates_12(0, 2, 6);
      case 32:
         return jjStartNfaWithStates_12(0, 1, 6);
      case 45:
         return jjMoveStringLiteralDfa1_12(0x2000000000L);
      default :
         return jjMoveNfa_12(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_12(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_12(0, 0L, active1);
}
private int jjStartNfaWithStates_12(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_12(state, pos + 1);
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 102)
                        kind = 102;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 102)
                        kind = 102;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0xffffdfffffffffffL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 3:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 0:
               case 2:
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 5:
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 4:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 0:
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            return 1;
         }
         return -1;
      case 1:
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 38:
         return jjStopAtPos(0, 132);
      case 39:
         return jjStopAtPos(0, 129);
      case 40:
         return jjStopAtPos(0, 127);
      case 43:
         return jjStopAtPos(0, 131);
      case 59:
         return jjStopAtPos(0, 128);
      case 61:
         return jjStopAtPos(0, 130);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x4000000000000000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa2_3(active1, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa2_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(0, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa3_3(active1, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa3_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(1, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, 0L, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 126, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_3(2, 0L, active1, 0L);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_5(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_5(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_5(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_5(0, 1, 0);
      case 91:
         return jjStopAtPos(0, 121);
      case 93:
         return jjStopAtPos(0, 122);
      default :
         return jjMoveNfa_5(3, 0);
   }
}
private int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(0);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if ((0xffffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8000000000L) != 0L)
            return 0;
         if ((active0 & 0x1eL) != 0L)
            return 5;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0, long active1)
{
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_11()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_11(0, 3, 5);
      case 10:
         return jjStartNfaWithStates_11(0, 4, 5);
      case 13:
         return jjStartNfaWithStates_11(0, 2, 5);
      case 32:
         return jjStartNfaWithStates_11(0, 1, 5);
      case 46:
         return jjMoveStringLiteralDfa1_11(0x8000000000L);
      default :
         return jjMoveNfa_11(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_11(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      default :
         break;
   }
   return jjStartNfa_11(0, 0L, active1);
}
private int jjStartNfaWithStates_11(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_11(state, pos + 1);
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xffffbfffffffffffL & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(0);
                  break;
               case 4:
                  if ((0xffffbfffffffffffL & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(0);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffbfffffffffffL & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 46)
                     jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 0:
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 4:
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 3:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_8(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_8(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_8(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_8(0, 1, 0);
      case 59:
         return jjStopAtPos(0, 111);
      case 91:
         return jjStopAtPos(0, 113);
      default :
         return jjMoveNfa_8(3, 0);
   }
}
private int jjStartNfaWithStates_8(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_8(state, pos + 1);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if ((0xfffffffff7ffffffL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1eL) != 0L)
            return 2;
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 106;
            return 1;
         }
         return -1;
      case 1:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      case 9:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_10(0, 3, 2);
      case 10:
         return jjStartNfaWithStates_10(0, 4, 2);
      case 13:
         return jjStartNfaWithStates_10(0, 2, 2);
      case 32:
         return jjStartNfaWithStates_10(0, 1, 2);
      case 101:
         return jjMoveStringLiteralDfa1_10(0x20000000000L);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_10(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_10(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_10(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa3_10(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_10(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa4_10(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_10(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa5_10(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_10(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa6_10(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_10(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_10(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_10(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa8_10(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_10(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_10(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_10(7, 0L, active1);
}
private int jjMoveStringLiteralDfa9_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_10(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_10(8, 0L, active1);
}
private int jjMoveStringLiteralDfa10_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(8, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa11_10(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_10(9, 0L, active1);
}
private int jjMoveStringLiteralDfa11_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(9, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_10(11, 105, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_10(10, 0L, active1);
}
private int jjStartNfaWithStates_10(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_10(state, pos + 1);
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(2);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar != 47)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAdd(1);
                  }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(2);
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0xf800000178000001L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   6, 7, 8, 11, 9, 10, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\101", "\142\157\157\154", "\143\145\151\154", 
"\143\154\157\143\153", "\143\157\156\163\164", "\143\164\155\143", "\143\164\155\144\160", "\103", 
"\144\157\165\142\154\145", "\144\164\155\143", "\105", "\146\141\154\163\145", 
"\146\157\162\155\165\154\141", "\146\151\154\164\145\162", "\146\154\157\157\162", "\146\165\156\143", 
"\106", "\147\154\157\142\141\154", "\107", "\151\156\151\164", 
"\151\156\166\141\162\151\141\156\164", "\111", "\151\155\143", "\151\156\164", "\154\141\142\145\154", 
"\154\157\147", "\155\141", "\155\141\170", "\155\144\160", "\155\151\156", "\155\157\144", 
"\155\157\144\165\154\145", "\145\156\144\155\157\144\165\154\145", "\155\165\154\164\151", 
"\156\157\156\144\145\164\145\162\155\151\156\151\163\164\151\143", "\120", "\120\155\141\170", "\120\155\151\156", "\160\157\167", 
"\160\162\157\142\141\142\151\154\151\163\164\151\143", "\160\162\157\142", "\160\164\141", "\122", "\162\141\164\145", 
"\162\145\167\141\162\144\163", "\145\156\144\162\145\167\141\162\144\163", "\122\155\141\170", 
"\122\155\151\156", "\123", "\123\155\141\170", "\123\155\151\156", "\163\161\162\164", 
"\163\164\157\143\150\141\163\164\151\143", "\163\171\163\164\145\155", "\145\156\144\163\171\163\164\145\155", 
"\164\162\165\145", "\125", "\127", "\130", "\147\151\166\145\156", "\53", "\55", "\52", "\57", 
"\133", "\135", "\50", "\51", "\173", "\175", "\74\55", "\73", "\72", "\54", "\46", 
"\174", "\41", "\75\76", "\74\75\76", "\77", "\47", "\75", "\41\75", "\74\75", "\74", 
"\76", "\76\75", "\42", "\163\155\147", "\74\74", "\76\76", 
"\160\154\141\171\145\162", "\145\156\144\160\154\141\171\145\162", null, null, null, "\55\76", null, 
"\56\56", null, "\145\156\144\151\156\166\141\162\151\141\156\164", null, null, 
"\145\156\144\151\156\151\164", null, null, "\73", null, "\133", null, "\133", "\135", "\135", null, "\133", 
null, "\133", "\135", "\51", null, "\50", "\164\162\165\145", "\50", "\73", "\47", 
"\75", "\53", "\46", null, null, null, "\50", "\51", "\72", null, "\77", null, "\77", 
"\72", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "NESTING_COLON_INNER",
   "NESTING_COLON",
   "NESTING_PAR_INNER",
   "UPDATE_ENV",
   "NESTING_PAR",
   "NESTING_BRACKET_INNER",
   "NESTING_BRACKET",
   "NESTING_SEMICOLON_INNER",
   "NESTING_SEMICOLON",
   "INIT_ENV",
   "INVARIANT_ENV",
   "SEPINTERVAL_ENV",
   "ARROW_ENV",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 3, -1, 13, -1, 13, -1, -1, 13, -1, -1, 13, -1, 7, -1, -1, -1, 13, -1, 5, -1, -1, -1, 13, -1, 
   2, -1, -1, 13, -1, 4, 1, -1, -1, 1, -1, -1, -1, 13, -1, 0, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0x2ffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x10000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x10000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[15];
private final int[] jjstateSet = new int[30];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public PrismParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PrismParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 15; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 14 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 13;
int defaultLexState = 13;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       if (jjmatchedPos == 0 && jjmatchedKind > 134)
       {
          jjmatchedKind = 134;
       }
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
     case 10:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
     case 11:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_11();
       break;
     case 12:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_12();
       break;
     case 13:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_13();
       if (jjmatchedPos == 0 && jjmatchedKind > 145)
       {
          jjmatchedKind = 145;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 113 :
        image.append(jjstrLiteralImages[113]);
        lengthOfMatch = jjstrLiteralImages[113].length();
                                                   nestingLevel++;
         break;
      case 115 :
        image.append(jjstrLiteralImages[115]);
        lengthOfMatch = jjstrLiteralImages[115].length();
                                                         nestingLevel++;
         break;
      case 116 :
        image.append(jjstrLiteralImages[116]);
        lengthOfMatch = jjstrLiteralImages[116].length();
                                                          nestingLevel--; if (nestingLevel <= 0) SwitchTo(NESTING_SEMICOLON);
         break;
      case 119 :
        image.append(jjstrLiteralImages[119]);
        lengthOfMatch = jjstrLiteralImages[119].length();
                                                 nestingLevel++;
         break;
      case 121 :
        image.append(jjstrLiteralImages[121]);
        lengthOfMatch = jjstrLiteralImages[121].length();
                                                       nestingLevel++;
         break;
      case 122 :
        image.append(jjstrLiteralImages[122]);
        lengthOfMatch = jjstrLiteralImages[122].length();
                                                        nestingLevel--; if (nestingLevel <= 0) SwitchTo(NESTING_BRACKET);
         break;
      case 125 :
        image.append(jjstrLiteralImages[125]);
        lengthOfMatch = jjstrLiteralImages[125].length();
                                         nestingLevel++;
         break;
      case 136 :
        image.append(jjstrLiteralImages[136]);
        lengthOfMatch = jjstrLiteralImages[136].length();
                                               nestingLevel++;
         break;
      case 137 :
        image.append(jjstrLiteralImages[137]);
        lengthOfMatch = jjstrLiteralImages[137].length();
                                                nestingLevel--; if (nestingLevel <= 0) SwitchTo(NESTING_PAR);
         break;
      case 140 :
        image.append(jjstrLiteralImages[140]);
        lengthOfMatch = jjstrLiteralImages[140].length();
                                           nestingLevel++;
         break;
      case 142 :
        image.append(jjstrLiteralImages[142]);
        lengthOfMatch = jjstrLiteralImages[142].length();
                                                 nestingLevel++;
         break;
      case 143 :
        image.append(jjstrLiteralImages[143]);
        lengthOfMatch = jjstrLiteralImages[143].length();
                                              nestingLevel--; if (nestingLevel <= 0) SwitchTo(NESTING_COLON);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
