/* Generated By:JavaCC: Do not edit this line. PrismExpressionParserTokenManager.java */
package epmc.prism.expression;
import epmc.prism.error.ProblemsPRISM;
import static epmc.error.UtilError.ensure;
import epmc.error.EPMCException;
import epmc.operator.Operator;
import epmc.operator.OperatorIte;
import epmc.operator.OperatorEq;
import epmc.operator.OperatorNe;
import epmc.operator.OperatorAdd;
import epmc.operator.OperatorSubtract;
import epmc.operator.OperatorLe;
import epmc.operator.OperatorLt;
import epmc.operator.OperatorGe;
import epmc.operator.OperatorGt;
import epmc.operator.OperatorMultiply;
import epmc.operator.OperatorDivide;
import epmc.prism.operator.OperatorPRISMPow;
import epmc.operator.OperatorMax;
import epmc.operator.OperatorMin;
import epmc.operator.OperatorCeil;
import epmc.operator.OperatorFloor;
import epmc.operator.OperatorLog;
import epmc.operator.OperatorMod;
import epmc.expression.*;
import epmc.expression.standard.ExpressionIdentifierStandard;
import epmc.expression.standard.ExpressionFilter;
import epmc.expression.standard.ExpressionMultiObjective;
import epmc.expression.standard.ExpressionCoalition;
import epmc.expression.standard.ExpressionQuantifier;
import epmc.expression.standard.ExpressionSteadyState;
import epmc.expression.standard.ExpressionLiteral;
import epmc.expression.standard.ExpressionOperator;
import epmc.expression.standard.FilterType;
import epmc.expression.standard.TimeBound;
import epmc.expression.standard.CmpType;
import epmc.expression.standard.DirType;
import static epmc.prism.expression.UtilPrismExpressionParser.*;
import epmc.expression.standard.ExpressionTypeReal;
import epmc.expression.standard.ExpressionTypeBoolean;
import epmc.expression.standard.ExpressionTypeInteger;
import java.util.ArrayList;
import java.util.List;

/** Token Manager. */
public class PrismExpressionParserTokenManager implements PrismExpressionParserConstants
{
    void CommonTokenAction(Token t)
    {
        MyToken token = (MyToken) t;
        token.offset = input_stream.tokenBegin;
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xf83bc7ffdebeefc0L) != 0L || (active1 & 0x6400000008L) != 0L)
         {
            jjmatchedKind = 103;
            return 1;
         }
         if ((active1 & 0x80L) != 0L)
            return 12;
         if ((active0 & 0x7c4380021411020L) != 0L || (active1 & 0x7L) != 0L)
            return 1;
         return -1;
      case 1:
         if ((active0 & 0xfefbf7f3debeefc0L) != 0L || (active1 & 0x6400000008L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0xc00000000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0xfef9b7011ebeefc0L) != 0L || (active1 & 0x6000000008L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 2;
            }
            return 1;
         }
         if ((active0 & 0x240fac0000000L) != 0L || (active1 & 0x400000000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x703007811c9e6b00L) != 0L || (active1 & 0x6000000008L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 3;
            }
            return 1;
         }
         if ((active0 & 0x8ec9b000022084c0L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x703085801c8c6000L) != 0L || (active1 & 0x6000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x20100120b00L) != 0L || (active1 & 0x8L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x503085001c042000L) != 0L || (active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x2000008000884000L) != 0L || (active1 & 0x2000000000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x10000004040000L) != 0L)
            return 1;
         if ((active0 & 0x5020850018002000L) != 0L || (active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000L) != 0L)
            return 1;
         if ((active0 & 0x5020850018000000L) != 0L || (active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active0 & 0x4000010008000000L) != 0L || (active1 & 0x4000000000L) != 0L)
            return 1;
         if ((active0 & 0x1020840010000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      case 9:
         if ((active0 & 0x1020000000000000L) != 0L)
            return 1;
         if ((active0 & 0x840010000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active0 & 0x840010000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active0 & 0x840000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 11;
            return 1;
         }
         if ((active0 & 0x10000000L) != 0L)
            return 1;
         return -1;
      case 12:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 12;
            return 1;
         }
         if ((active0 & 0x800000000000L) != 0L)
            return 1;
         return -1;
      case 13:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 13;
            return 1;
         }
         return -1;
      case 14:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      case 34:
         return jjStopAtPos(0, 96);
      case 38:
         return jjStopAtPos(0, 83);
      case 39:
         return jjStopAtPos(0, 89);
      case 40:
         return jjStopAtPos(0, 75);
      case 41:
         return jjStopAtPos(0, 76);
      case 42:
         return jjStopAtPos(0, 70);
      case 43:
         return jjStopAtPos(0, 68);
      case 44:
         return jjStopAtPos(0, 82);
      case 45:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 47:
         return jjStartNfaWithStates_0(0, 71, 12);
      case 58:
         return jjStopAtPos(0, 81);
      case 59:
         return jjStopAtPos(0, 80);
      case 60:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x810808000L);
      case 61:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 62:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1080000000L);
      case 63:
         return jjStopAtPos(0, 88);
      case 65:
         return jjStartNfaWithStates_0(0, 5, 1);
      case 67:
         return jjStartNfaWithStates_0(0, 12, 1);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 69:
         return jjStartNfaWithStates_0(0, 16, 1);
      case 70:
         return jjStartNfaWithStates_0(0, 22, 1);
      case 71:
         return jjStartNfaWithStates_0(0, 24, 1);
      case 73:
         return jjStartNfaWithStates_0(0, 29, 1);
      case 80:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x300000000000L, 0x0L);
      case 82:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0xc0000000000000L, 0x0L);
      case 83:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x600000000000000L, 0x0L);
      case 85:
         return jjStartNfaWithStates_0(0, 64, 1);
      case 87:
         return jjStartNfaWithStates_0(0, 65, 1);
      case 88:
         return jjStartNfaWithStates_0(0, 66, 1);
      case 91:
         return jjStopAtPos(0, 73);
      case 93:
         return jjStopAtPos(0, 74);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xf80L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4020010014000000L, 0x4000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3e0000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xca000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x300000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2fc00000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c00000000000L, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x18000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3800000000000000L, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 77);
      case 124:
         return jjStopAtPos(0, 84);
      case 125:
         return jjStopAtPos(0, 78);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 46:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 60:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         break;
      case 61:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L);
      case 62:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 97:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000900020000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000080L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000080000L, active1, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x900100L, active1, 0x2000000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x6c0300040000000L, active1, 0x400000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x402001009e000000L, active1, 0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x44c200044240L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8001800000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1002000000008c00L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000200000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(2, 87);
         break;
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
      case 97:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x240100000000000L, active1, 0x2000000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 99:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 1);
         break;
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4020018014000000L, active1, 0x4000000000L);
      case 103:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 1);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 98, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x480200002000080L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000a0000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8c00L, active1, 0L);
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000200200L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1001800000900140L, active1, 0L);
      case 112:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 1);
         break;
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000040000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000004000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0x8L);
      case 119:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 120:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000008000000L, active1, 0L);
      case 98:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000804000L, active1, 0L);
      case 99:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 1);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 1);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000100L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000800L, active1, 0L);
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 1);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x14000000L, active1, 0L);
      case 108:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 1);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 1);
         break;
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000040000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 1);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 1);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000020200L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 1);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000020000080000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0L);
      case 120:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 1);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 1);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 1);
         break;
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000800000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2020040000080000L, active1, 0x2000000000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      case 105:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 1);
         break;
      case 107:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 1);
         break;
      case 108:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000004000L, active1, 0x4000000000L);
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x14000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 1);
         break;
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000008000000L, active1, 0L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0x4000000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10010000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 1);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000L, active1, 0L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0L);
      case 109:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 1);
         break;
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 1);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
      case 97:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000018000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 84:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0x4000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x810000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x20040010000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000800010000000L, active1, 0L);
      case 109:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 62, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 102, 1);
         break;
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L);
      case 99:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 60, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L);
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 53, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x40010000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x840000000000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(11, 28, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 47, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 42, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 11);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 12;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                     jjCheckNAdd(3);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 104)
                        kind = 104;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 48 && kind > 104)
                     kind = 104;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 11);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(0, 3);
                  break;
               case 12:
                  if (curChar != 47)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(1);
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(4, 5);
                  break;
               case 13:
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   6, 7, 8, 11, 9, 10, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\101", "\142\157\157\154", "\143\145\151\154", 
"\143\154\157\143\153", "\143\157\156\163\164", "\143\164\155\143", "\143\164\155\144\160", "\103", 
"\104\111\123\103\117\125\116\124", "\144\157\165\142\154\145", "\144\164\155\143", "\105", 
"\146\141\154\163\145", "\146\157\162\155\165\154\141", "\146\151\154\164\145\162", 
"\146\154\157\157\162", "\146\165\156\143", "\106", "\147\154\157\142\141\154", "\107", 
"\151\156\151\164", "\145\156\144\151\156\151\164", "\151\156\166\141\162\151\141\156\164", 
"\145\156\144\151\156\166\141\162\151\141\156\164", "\111", "\151\155\143", "\151\156\164", "\154\141\142\145\154", 
"\154\157\147", "\155\141", "\155\141\170", "\155\144\160", "\155\151\156", "\155\157\144", 
"\155\157\144\165\154\145", "\145\156\144\155\157\144\165\154\145", "\155\165\154\164\151", 
"\156\157\156\144\145\164\145\162\155\151\156\151\163\164\151\143", "\120", "\120\155\141\170", "\120\155\151\156", "\160\157\167", 
"\160\162\157\142\141\142\151\154\151\163\164\151\143", "\160\162\157\142", "\160\164\141", "\122", "\162\141\164\145", 
"\162\145\167\141\162\144\163", "\145\156\144\162\145\167\141\162\144\163", "\122\155\141\170", 
"\122\155\151\156", "\123", "\123\155\141\170", "\123\155\151\156", "\163\161\162\164", 
"\163\164\157\143\150\141\163\164\151\143", "\163\171\163\164\145\155", "\145\156\144\163\171\163\164\145\155", 
"\164\162\165\145", "\125", "\127", "\130", "\147\151\166\145\156", "\53", "\55", "\52", "\57", 
"\55\76", "\133", "\135", "\50", "\51", "\173", "\175", "\74\55", "\73", "\72", "\54", 
"\46", "\174", "\41", "\75\76", "\74\75\76", "\77", "\47", "\75", "\41\75", "\74\75", 
"\74", "\76", "\76\75", "\42", "\56\56", "\163\155\147", "\74\74", "\76\76", 
"\160\154\141\171\145\162", "\145\156\144\160\154\141\171\145\162", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xbffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x40000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x40000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[15];
private final int[] jjstateSet = new int[30];
protected char curChar;
/** Constructor. */
public PrismExpressionParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PrismExpressionParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 15; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 107)
   {
      jjmatchedKind = 107;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
