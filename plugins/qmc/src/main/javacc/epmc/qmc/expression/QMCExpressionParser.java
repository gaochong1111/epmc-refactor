/* Generated By:JavaCC: Do not edit this line. QMCExpressionParser.java */
package epmc.qmc.expression;

import epmc.qmc.error.ProblemsQMC;
import static epmc.error.UtilError.ensure;
import epmc.error.EPMCException;
import epmc.operator.Operator;
import epmc.operator.OperatorIte;
import epmc.operator.OperatorEq;
import epmc.operator.OperatorNe;
import epmc.operator.OperatorAdd;
import epmc.operator.OperatorSubtract;
import epmc.operator.OperatorLe;
import epmc.operator.OperatorLt;
import epmc.operator.OperatorGe;
import epmc.operator.OperatorGt;
import epmc.operator.OperatorMultiply;
import epmc.operator.OperatorDivide;
import epmc.prism.operator.OperatorPRISMPow;
import epmc.operator.OperatorMax;
import epmc.operator.OperatorMin;
import epmc.operator.OperatorCeil;
import epmc.operator.OperatorFloor;
import epmc.operator.OperatorLog;
import epmc.operator.OperatorMod;
import epmc.expression.*;
import epmc.qmc.operator.OperatorConjugate;
import epmc.qmc.operator.OperatorQprob;
import epmc.qmc.operator.OperatorQeval;
import epmc.qmc.operator.OperatorKronecker;
import epmc.qmc.operator.OperatorTranspose;
import epmc.qmc.expression.ContextExpressionQMC;
import epmc.expression.standard.ExpressionTemporalNext;
import epmc.expression.standard.ExpressionIdentifierStandard;
import epmc.expression.standard.ExpressionFilter;
import epmc.expression.standard.ExpressionQuantifier;
import epmc.expression.standard.ExpressionSteadyState;
import epmc.expression.standard.ExpressionLiteral;
import epmc.expression.standard.ExpressionOperator;
import epmc.expression.standard.ExpressionTemporalFinally;
import epmc.expression.standard.ExpressionTemporalGlobally;
import epmc.expression.standard.ExpressionTemporalRelease;
import epmc.expression.standard.ExpressionTemporalUntil;
import epmc.expression.standard.FilterType;
import epmc.expression.standard.TimeBound;
import epmc.expression.standard.CmpType;
import epmc.expression.standard.DirType;
import static epmc.qmc.expression.UtilQMCExpressionParser.*;
import epmc.expression.standard.ExpressionTypeInteger;
import epmc.expression.standard.ExpressionTypeReal;
import epmc.expression.standard.ExpressionTypeBoolean;

import java.util.ArrayList;
import java.util.List;

public final class QMCExpressionParser implements QMCExpressionParserConstants {
        private static enum UnType {
                NEXT,
                FINALLY,
                GLOBALLY
        };

        private static enum BinType {
                UNTIL,
                RELEASE,
                WEAK
        };

        private static enum MatrixType {
                IDENTITY,
                PAULIX,
                PAULIY,
                PAULIZ,
                HADAMARD,
                CNOT,
                M0,
                M1,
                PHASESHIFT,
                FREDKIN,
                SWAP,
                TOFFOLI
        };

        private Expression getPredefinedMatrix(MatrixType type)  {
                switch (type) {
                        case PAULIX :
                                return getPauliX();
                        case PAULIY :
                                return getPauliY();
                        case PAULIZ :
                                return getPauliZ();
                        case HADAMARD :
                                return getHadamard();
                        case M0:
                                return getM0();
                        case M1:
                                return getM1();
                        case CNOT :
                                return getCnot();
                        case TOFFOLI :
                                return getToffoli();
                        case FREDKIN :
                                return getFredkin();
                        case SWAP :
                                return getSwap();
                        default:
                            assert false;
                            return null;
                }
        }

//	private Expression getPredefinedMatrix(MatrixType type, int size) {
//		switch (type) {
//			case IDENTITY :
//				return getIdentity(size);
//			default:
//				throw new IllegalArgumentException();
//		}
//	}

//	private Expression getPredefinedMatrix(MatrixType type, double radian) {
//		switch (type) {
//			case PHASESHIFT :
//				return getPhaseShift(radian);
//			default:
//				throw new IllegalArgumentException();
//		}
//	}

//	private Expression getIdentity(int size) {
//		List<List<Expression>> matr = new ArrayList<List<Expression>>(size);
//		List<Expression> row;
//
//		for (int r = 0; r < size; r++) {
//			row = new ArrayList<Expression>(2);
//			for (int c = 0; c < size; c++) {
//				if (c == r) {
//				    row.add(newLiteral(1));
//				} else {
//				    row.add(newLiteral(0));
//				}
//			}
//			matr.add(row);
//		}
//		return contextExp.newMatrix(matr);
//	}

        private Expression getPauliX() {
                List<List<Expression>> matr = new ArrayList<List<Expression>>(2);
                List<Expression> row;

                row = new ArrayList<Expression>(2);
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                matr.add(row);
                row = new ArrayList<Expression>(2);
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                matr.add(row);
                return contextExpQMC.newMatrix(matr);
        }

        private Expression getPauliY() {
                List<List<Expression>> matr = new ArrayList<List<Expression>>(2);
                List<Expression> row;

                row = new ArrayList<Expression>(2);
                row.add(newLiteral(0));
                row.add(contextExpQMC.newComplex(0, -1));
                matr.add(row);
                row = new ArrayList<Expression>(2);
                row.add(contextExpQMC.newComplex(0, 1));
                row.add(newLiteral(0));
                matr.add(row);
                return contextExpQMC.newMatrix(matr);
        }

        private Expression getPauliZ() {
                List<List<Expression>> matr = new ArrayList<List<Expression>>(2);
                List<Expression> row;

                row = new ArrayList<Expression>(2);
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(2);
                row.add(newLiteral(0));
                row.add(newLiteral(-1));
                matr.add(row);
                return contextExpQMC.newMatrix(matr);
        }

        private Expression getHadamard()  {
                List<List<Expression>> matr = new ArrayList<List<Expression>>(2);
                List<Expression> row;
                row = new ArrayList<Expression>(2);
                row.add(UtilQMCExpressionParser.newHadamardEntry());
                row.add(UtilQMCExpressionParser.newHadamardEntry());
                matr.add(row);
                row = new ArrayList<Expression>(2);
                row.add(UtilQMCExpressionParser.newHadamardEntry());
                row.add(UtilQMCExpressionParser.newMHadamardEntry());
                matr.add(row);
                return contextExpQMC.newMatrix(matr);
        }

        private Expression getCnot() {
                List<List<Expression>> matr = new ArrayList<List<Expression>>(4);
                List<Expression> row;

                row = new ArrayList<Expression>(4);
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(4);
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(4);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                matr.add(row);
                row = new ArrayList<Expression>(4);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                matr.add(row);
                return contextExpQMC.newMatrix(matr);
        }

        private Expression getM1() {
                List<List<Expression>> matr = new ArrayList<List<Expression>>(2);
                List<Expression> row;

                row = new ArrayList<Expression>(2);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(2);
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                matr.add(row);
                return contextExpQMC.newMatrix(matr);
        }

        private Expression getM0() {
                List<List<Expression>> matr = new ArrayList<List<Expression>>(2);
                List<Expression> row;

                row = new ArrayList<Expression>(2);
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(2);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                return contextExpQMC.newMatrix(matr);
        }

        private Expression getSwap() {
                List<List<Expression>> matr = new ArrayList<List<Expression>>(4);
                List<Expression> row;

                row = new ArrayList<Expression>(4);
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(4);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(4);
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(4);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                matr.add(row);
                return contextExpQMC.newMatrix(matr);
        }

        private Expression getToffoli() {
                List<List<Expression>> matr = new ArrayList<List<Expression>>(8);
                List<Expression> row;

                row = new ArrayList<Expression>(8);
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                matr.add(row);
                return contextExpQMC.newMatrix(matr);
        }

        private Expression getFredkin() {
                List<List<Expression>> matr = new ArrayList<List<Expression>>(8);
                List<Expression> row;

                row = new ArrayList<Expression>(8);
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                matr.add(row);
                row = new ArrayList<Expression>(8);
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(0));
                row.add(newLiteral(1));
                matr.add(row);
                return contextExpQMC.newMatrix(matr);
        }

        private final static class OldSchoolFilter {
                private final FilterType type;
                private final Expression states;
                private final InfoExpression info;

                OldSchoolFilter(FilterType type, Expression states, InfoExpression info) {
                        this.type = type;
                        this.states = states;
                        this.info = info;
                }

                FilterType getType() {
                        return type;
                }

                Expression getStates() {
                        return states;
                }

                InfoExpression getInfo() {
                  return info;
                }
        };

        private ContextExpressionQMC contextExpQMC;
        private int initialLine;
        private int initialColumn;
        private String string;
        private int errorLine;
        private int errorColumn;

        private void computeErrorPosition(int tline, int tcolumn) {
                errorLine = tline + initialLine - 1;
                errorColumn = tcolumn;
                if (tline == 1) {
                        errorColumn += initialColumn - 1;
                }
        }

        public Expression parseExpression(int line, int column, String string)  {
                this.contextExpQMC = new ContextExpressionQMC();
                this.initialLine = line;
                this.initialColumn = column;
                this.string = string;

                try {
                        return parseCompleteExp();
                } catch (ParseException pe) {
                        Token errorToken = getToken(1);
                        if (errorToken.kind == UNEXPECTED_CHAR) {
                                computeErrorPosition(errorToken.endLine, errorToken.endColumn);
                                ensure(false, ProblemsQMC.EXPRESSION_PARSER_UNEXPECTED_CHARACTER, newPositional(errorLine, errorColumn), errorToken.image);
                        } else {
                                computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                                ensure(false, ProblemsQMC.EXPRESSION_PARSER_SYNTAX_ERROR, newPositional(errorLine, errorColumn), errorToken.toString());
                        }
                        return null;
        } catch (EPMCException e) {
                   throw e;
                }
                catch (Throwable t) {
                  ensure(false, ProblemsQMC.EXPRESSION_PARSER_GENERAL_ERROR, t, t);
                  return null;
                }
        }

        public Expression parseExpressionAsProperty(int line, int column, String string)  {
                this.contextExpQMC = new ContextExpressionQMC();
                this.initialLine = line;
                this.initialColumn = column;
                this.string = string;

                try {
                        return parseCompleteProp();
                } catch (ParseException pe) {
                        Token errorToken = getToken(1);
                        if (errorToken.kind == UNEXPECTED_CHAR) {
                                computeErrorPosition(errorToken.endLine, errorToken.endColumn);
                                ensure(false, ProblemsQMC.EXPRESSION_PARSER_UNEXPECTED_CHARACTER, newPositional(errorLine, errorColumn), errorToken.image);
                        } else {
                                computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                                ensure(false, ProblemsQMC.EXPRESSION_PARSER_SYNTAX_ERROR, newPositional(errorLine, errorColumn), errorToken.toString());
                        }
                        return null;
                } catch (EPMCException e) {
                   throw e;
                } catch (Throwable t) {
                    ensure(false, ProblemsQMC.EXPRESSION_PARSER_GENERAL_ERROR, t, t);
                    return null;
                }
        }

        private ExpressionLiteral newLiteral(int value) {
                return new ExpressionLiteral.Builder()
                        .setValue(String.valueOf(value))
                        .setType(ExpressionTypeInteger.TYPE_INTEGER)
                        .build();
        }

        private void beginExpression(InfoExpression info) {
                assert info != null;
                info.setStart(getToken(1).offset);
        }

        private void endExpression(InfoExpression info) {
                assert info != null;
                info.setEnd(getToken(0).offset + getToken(0).toString().length());
        }

  final private Expression parseCompleteExp() throws ParseException {
        Expression e;
    e = parseExp(true);
    jj_consume_token(0);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseCompleteProp() throws ParseException {
        Expression e;
        Expression label = null;
    if (jj_2_1(2147483647)) {
      label = parseLabel();
      jj_consume_token(COLON);
    } else {
      ;
    }
    e = parseExp(false);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseExpTemporal(boolean parseExp) throws ParseException {
        Expression e;
    e = parseTemporalBinary(parseExp);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseExp(boolean parseExp) throws ParseException {
        Expression e;
    e = ExpressionITE(parseExp);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionITE(boolean parseExp) throws ParseException {
        Expression prop;
        Expression propThen;
        Expression propElse;
        InfoExpression info = new InfoExpression(string);
      beginExpression(info);
    prop = ExpressionImplies(parseExp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTION:
      jj_consume_token(QUESTION);
      propThen = ExpressionImplies(parseExp);
      jj_consume_token(COLON);
      propElse = ExpressionITE(parseExp);
          endExpression(info);
                  prop = new ExpressionOperator.Builder()
                        .setOperator(OperatorIte.ITE)
                        .setOperands(prop, propThen, propElse)
                        .setPositional(info.toPositional())
                        .build();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
          {if (true) return prop;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionImplies(boolean parseExp) throws ParseException {
        Expression p;
        Expression nextProp;
        InfoExpression info = new InfoExpression(string);
      beginExpression(info);
    p = ExpressionIff(parseExp);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLIES:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(IMPLIES);
      nextProp = ExpressionIff(parseExp);
                  endExpression(info);
                  p = implies(p, nextProp, info);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionIff(boolean parseExp) throws ParseException {
        Expression p;
        Expression nextProp;
        InfoExpression info = new InfoExpression(string);
      beginExpression(info);
    p = ExpressionOr(parseExp);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IFF:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(IFF);
      nextProp = ExpressionOr(parseExp);
                  endExpression(info);
                  p = iff(p, nextProp, info);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionOr(boolean parseExp) throws ParseException {
        Expression p;
        Expression nextProp;
        InfoExpression info = new InfoExpression(string);
     beginExpression(info);
    p = ExpressionAnd(parseExp);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      nextProp = ExpressionAnd(parseExp);
                  endExpression(info);
                  p = or(p, nextProp, info);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionAnd(boolean parseExp) throws ParseException {
        Expression p;
        Expression nextProp;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    p = ExpressionNot(parseExp);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      nextProp = ExpressionNot(parseExp);
         endExpression(info);
          p = and(p, nextProp, info);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionNot(boolean parseExp) throws ParseException {
          Expression p;
        InfoExpression info = new InfoExpression(string);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
             beginExpression(info);
      jj_consume_token(NOT);
      p = ExpressionNot(parseExp);
             endExpression(info);
             p = not(p, info);
      break;
    default:
      jj_la1[6] = jj_gen;
      if (jj_2_2(1)) {
        p = ExpressionEqNe(parseExp);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionEqNe(boolean parseExp) throws ParseException {
        Expression p;
        Expression nextProp;
        Operator type;
        InfoExpression info = new InfoExpression(string);
      beginExpression(info);
    p = ExpressionROp(parseExp);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NEQ:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      type = EqNe();
      nextProp = ExpressionROp(parseExp);
          endExpression(info);
         p = newOperator(type, p, nextProp, info);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Operator EqNe() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
                  {if (true) return OperatorEq.EQ;}
      break;
    case NEQ:
      jj_consume_token(NEQ);
                  {if (true) return OperatorNe.NE;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionROp(boolean parseExp) throws ParseException {
        Expression p;
        Expression nextProp;
        Operator type;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    p = ExpressionPlusMinus(parseExp);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEQ:
      case LT:
      case GT:
      case GEQ:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      type = LtGtLeGe();
      nextProp = ExpressionPlusMinus(parseExp);
          endExpression(info);
          p = newOperator(type, p, nextProp, info);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Operator LtGtLeGe() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
                  {if (true) return OperatorLt.LT;}
      break;
    case LEQ:
      jj_consume_token(LEQ);
                  {if (true) return OperatorLe.LE;}
      break;
    case GT:
      jj_consume_token(GT);
                  {if (true) return OperatorGt.GT;}
      break;
    case GEQ:
      jj_consume_token(GEQ);
                  {if (true) return OperatorGe.GE;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionPlusMinus(boolean parseExp) throws ParseException {
        Expression p;
        Expression nextProp;
        Operator type;
        InfoExpression info = new InfoExpression(string);
      beginExpression(info);
    p = ExpressionTimesDivide(parseExp);
    label_7:
    while (true) {
      if (jj_2_3(2147483647)) {
        ;
      } else {
        break label_7;
      }
      type = PlusMinus();
      nextProp = ExpressionTimesDivide(parseExp);
                  endExpression(info);
                  p = newOperator(type, p, nextProp, info);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Operator PlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                  {if (true) return OperatorAdd.ADD;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
                  {if (true) return OperatorSubtract.SUBTRACT;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionTimesDivide(boolean parseExp) throws ParseException {
        Expression p;
        Expression nextProp;
        Operator type;
        InfoExpression info = new InfoExpression(string);
      beginExpression(info);
    p = ExpressionUnaryMinus(parseExp);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      type = TimesDivide();
      nextProp = ExpressionUnaryMinus(parseExp);
                  endExpression(info);
                  p = newOperator(type, p, nextProp, info);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Operator TimesDivide() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
      jj_consume_token(TIMES);
                  {if (true) return OperatorMultiply.MULTIPLY;}
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
                  {if (true) return OperatorDivide.DIVIDE;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionUnaryMinus(boolean parseExp) throws ParseException {
          Expression p;
        InfoExpression info = new InfoExpression(string);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
            beginExpression(info);
      jj_consume_token(MINUS);
      p = ExpressionUnaryMinus(parseExp);
                  endExpression(info);
                  p = addInverse(p);
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_4(1)) {
        p = ExpressionTranspose(parseExp);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionTranspose(boolean parseExp) throws ParseException {
        Expression p;
        InfoExpression info = new InfoExpression(string);
          beginExpression(info);
    p = parseBasic(parseExp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIME:
      jj_consume_token(PRIME);
                  endExpression(info);
                  p = newOperator(OperatorTranspose.TRANSPOSE, p);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseBasic(boolean parseExp) throws ParseException {
        Expression e;
    if (jj_2_5(2147483647)) {
      e = parseImaginary();
    } else if (jj_2_6(2147483647)) {
      e = parseImaginary();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
        e = parseBoolean();
        break;
      case CEIL:
      case CONJ:
      case CTRAN:
      case FLOOR:
      case FUNCTION:
      case KRON:
      case LOG:
      case MAX:
      case MIN:
      case MOD:
      case POW:
      case QEVAL:
      case QPROB:
      case SQRT:
      case TRAN:
        e = parseFunction(parseExp);
        break;
      case IDENTIFIER:
        e = parseIdentifier();
        break;
      case NUM_INT:
        e = parseInt();
        break;
      case NUM_REAL:
        e = parseReal();
        break;
      case LBRACKET:
      case IDENTITY:
      case ID:
      case PAULIX:
      case PX:
      case PAULIY:
      case PY:
      case PAULIZ:
      case PZ:
      case HADAMARD:
      case HD:
      case CNOT:
      case CN:
      case M0:
      case M1:
      case FREDKIN:
      case FK:
      case SWAP:
      case SW:
      case PHASESHIFT:
      case PS:
      case TOFFOLI:
      case TF:
        e = parseMatrix(parseExp);
        break;
      case P:
      case PMAX:
      case PMIN:
      case Q:
      case QMAX:
      case QMIN:
        e = parseProbQuant(parseExp);
        break;
      case R:
      case RMAX:
      case RMIN:
        e = parseRewQuant(parseExp);
        break;
      case S:
      case SMAX:
      case SMIN:
        e = parseSteadyQuant(parseExp);
        break;
      case SOMF:
      case SUPEROPERATOR_OPEN:
        e = parseSuperOperator(parseExp);
        break;
      case LPAR:
        e = parseParenth(parseExp);
        break;
      case QUOTE:
        e = parseLabel();
        break;
      case FILTER:
        e = parseFilter(parseExp);
        break;
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_7(1)) {
          e = parseBraKet(parseExp);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseBra(boolean parseExp) throws ParseException {
        Expression result = null;
        Expression first = null;
        Expression hilbert = null;
        Token firstToken = null;
        Token hilbertToken = null;
        String hilbertStr = null;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BRA_ZERO:
      jj_consume_token(BRA_ZERO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNDERSCORE:
        jj_consume_token(UNDERSCORE);
        hilbertToken = jj_consume_token(NUM_INT);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      first = contextExpQMC.newLiteralInt("0");
      if (hilbertToken == null) {
                hilbertStr = "2";
      } else {
        hilbertStr = hilbertToken.toString();
      }
      break;
    case BRA_ONE:
      jj_consume_token(BRA_ONE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNDERSCORE:
        jj_consume_token(UNDERSCORE);
        hilbertToken = jj_consume_token(NUM_INT);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
          first = contextExpQMC.newLiteralInt("1");
      if (hilbertToken == null) {
                hilbertStr = "2";
      } else {
        hilbertStr = hilbertToken.toString();
      }
      break;
    case LT:
      jj_consume_token(LT);
      if (getToken(1).kind == NUM_INT) {
        firstToken = jj_consume_token(NUM_INT);
        jj_consume_token(OR);
        jj_consume_token(UNDERSCORE);
        hilbertToken = jj_consume_token(NUM_INT);
                  first = contextExpQMC.newLiteralInt(hilbertToken.toString());
          hilbertStr = hilbertToken.toString();
      } else if (getToken(1).kind == IDENTIFIER) {
        first = parseIdentifier();
        jj_consume_token(OR);
                  // TODO: get hilbert value from model object
                  hilbertStr = "2";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        endExpression(info);
        hilbert = contextExpQMC.newLiteralInt(hilbertStr);
        result = contextExpQMC.newBaseBra(first, hilbert);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseKet(boolean parseExp) throws ParseException {
        Expression result = null;
        Expression first = null;
        Expression hilbert = null;
        Token firstToken = null;
        Token hilbertToken = null;
        String hilbertStr = null;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KET_ZERO:
      jj_consume_token(KET_ZERO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNDERSCORE:
        jj_consume_token(UNDERSCORE);
        hilbertToken = jj_consume_token(NUM_INT);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      first = contextExpQMC.newLiteralInt("0");
      if (hilbertToken == null) {
                hilbertStr = "2";
      } else {
        hilbertStr = hilbertToken.toString();
      }
      break;
    case KET_ONE:
      jj_consume_token(KET_ONE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNDERSCORE:
        jj_consume_token(UNDERSCORE);
        hilbertToken = jj_consume_token(NUM_INT);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      first = contextExpQMC.newLiteralInt("1");
      if (hilbertToken == null) {
                hilbertStr = "2";
      } else {
        hilbertStr = hilbertToken.toString();
      }
      break;
    case OR:
      jj_consume_token(OR);
      if (getToken(1).kind == NUM_INT) {
        firstToken = jj_consume_token(NUM_INT);
        jj_consume_token(GT);
        jj_consume_token(UNDERSCORE);
        hilbertToken = jj_consume_token(NUM_INT);
                  first = contextExpQMC.newLiteralInt(hilbertToken.toString());
          hilbertStr = hilbertToken.toString();
      } else if (getToken(1).kind == IDENTIFIER) {
        first = parseIdentifier();
        jj_consume_token(GT);
                  // TODO: get hilbert value from model object
                  hilbertStr = "2";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        endExpression(info);
        hilbert = contextExpQMC.newLiteralInt(hilbertStr);
        result = contextExpQMC.newBaseKet(first, hilbert);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseBraKet(boolean parseExp) throws ParseException {
        Expression first;
        boolean firstBra = false;
        Expression second = null;
        boolean secondBra = false;
        Expression hilbert;
        InfoExpression info = new InfoExpression(string);
          beginExpression(info);
    if (getToken(1).kind == LT
                            && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT)
                            && getToken(3).kind == OR
                            && (getToken(4).kind == IDENTIFIER || getToken(4).kind == NUM_INT)) {
                  firstBra = true;
      jj_consume_token(LT);
      first = getIdOrInt();
      jj_consume_token(OR);
      second = getIdOrInt();
      jj_consume_token(GT);
                  {if (true) return newOperator(OperatorMultiply.MULTIPLY, first, second);}
    } else if ((getToken(1).kind == KET_ZERO || getToken(1).kind == KET_ONE
                            || (getToken(1).kind == OR
                            && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT)
                            && getToken(3).kind == GT))) {
      first = parseKet(parseExp);
      if (jj_2_8(1)) {
        if ((getToken(1).kind == KET_ZERO || getToken(1).kind == KET_ONE
                                || (getToken(1).kind == OR
                                && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT)
                                && getToken(3).kind == GT))) {
          second = parseKet(parseExp);
        } else if ((getToken(1).kind == BRA_ZERO || getToken(1).kind == BRA_ONE
                                || (getToken(1).kind == LT
                                && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT)
                                && getToken(3).kind == OR))) {
                          secondBra = true;
          second = parseBra(parseExp);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } else if ((getToken(1).kind == BRA_ZERO || getToken(1).kind == BRA_ONE
                    || (getToken(1).kind == LT
                    && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT)
                    && getToken(3).kind == OR))) {
                  firstBra = true;
      first = parseBra(parseExp);
      if ((getToken(1).kind == BRA_ZERO || getToken(1).kind == BRA_ONE
                      || (getToken(1).kind == LT
                      && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT)
                      && getToken(3).kind == OR))) {
                    secondBra = true;
        second = parseBra(parseExp);
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                endExpression(info);
                if (second == null) {
                        {if (true) return first;}
                } else {
                        if (firstBra == secondBra) {
                                {if (true) return newOperator(OperatorKronecker.KRONECKER, first, second);}
                        } else {
                                {if (true) return newOperator(OperatorMultiply.MULTIPLY, first, second);}
                        }
                }
    throw new Error("Missing return statement in function");
  }

  final private Expression parseBraKet1(boolean parseExp) throws ParseException {
        Expression first;
        boolean firstBra = false;
        Expression second = null;
        boolean secondBra = false;
        Expression hilbert;
        InfoExpression info = new InfoExpression(string);
          beginExpression(info);
    if (getToken(1).kind == LT && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT) && getToken(3).kind == OR) {
                  firstBra = true;
      jj_consume_token(LT);
      first = getIdOrInt();
      jj_consume_token(OR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case NUM_INT:
        second = getIdOrInt();
        jj_consume_token(GT);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(UNDERSCORE);
      hilbert = getIdOrInt();
                        first = contextExpQMC.newBaseBra(first, hilbert);
                        if (second != null) {
                                second = contextExpQMC.newBaseKet(second, hilbert);
                                {if (true) return newOperator(OperatorMultiply.MULTIPLY, first, second);}
                        }
    } else if (getToken(1).kind == OR && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT) && getToken(3).kind == GT) {
      jj_consume_token(OR);
      first = getIdOrInt();
      jj_consume_token(GT);
      jj_consume_token(UNDERSCORE);
      hilbert = getIdOrInt();
                  first = contextExpQMC.newBaseKet(first, hilbert);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_9(1)) {
      if (getToken(1).kind == LT && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT) && getToken(3).kind == OR) {
                  secondBra = true;
        jj_consume_token(LT);
        second = getIdOrInt();
        jj_consume_token(OR);
        jj_consume_token(UNDERSCORE);
        hilbert = getIdOrInt();
                  second = contextExpQMC.newBaseBra(second, hilbert);
      } else if (getToken(1).kind == OR && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT) && getToken(3).kind == GT) {
        jj_consume_token(OR);
        second = getIdOrInt();
        jj_consume_token(GT);
        jj_consume_token(UNDERSCORE);
        hilbert = getIdOrInt();
                  second = contextExpQMC.newBaseKet(second, hilbert);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
                endExpression(info);
                if (second == null) {
                        {if (true) return first;}
                } else {
                        if (firstBra == secondBra) {
                                {if (true) return newOperator(OperatorKronecker.KRONECKER, first, second);}
                        } else {
                                {if (true) return newOperator(OperatorMultiply.MULTIPLY, first, second);}
                        }
                }
    throw new Error("Missing return statement in function");
  }

  final private Expression getIdOrInt() throws ParseException {
        Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM_INT:
      e = parseInt();
      break;
    case IDENTIFIER:
      e = parseIdentifier();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseFunction(boolean parseExp) throws ParseException {
        Expression e;
        Expression ne;
        Operator type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CTRAN:
    case SQRT:
      e = parseSpecialFunction(parseExp);
      break;
    case MAX:
    case MIN:
      type = functionMultipleParams();
      jj_consume_token(LPAR);
      e = parseFunctionN(parseExp, type);
      jj_consume_token(RPAR);
      break;
    case KRON:
    case LOG:
    case MOD:
    case POW:
    case QEVAL:
    case QPROB:
      type = functionTwoParams();
      jj_consume_token(LPAR);
      e = parseFunction2(parseExp, type);
      jj_consume_token(RPAR);
      break;
    case CEIL:
    case CONJ:
    case FLOOR:
    case TRAN:
      type = functionOneParam();
      jj_consume_token(LPAR);
      e = parseFunction1(parseExp, type);
      jj_consume_token(RPAR);
      break;
    case FUNCTION:
      jj_consume_token(FUNCTION);
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQRT:
        e = parseSqrt(parseExp);
        break;
      case MAX:
      case MIN:
        type = functionMultipleParams();
        jj_consume_token(COMMA);
        e = parseFunctionN(parseExp, type);
        break;
      case KRON:
      case LOG:
      case MOD:
      case POW:
      case QEVAL:
      case QPROB:
        type = functionTwoParams();
        jj_consume_token(COMMA);
        e = parseFunction2(parseExp, type);
        break;
      case CEIL:
      case CONJ:
      case FLOOR:
      case TRAN:
        type = functionOneParam();
        jj_consume_token(COMMA);
        e = parseFunction1(parseExp, type);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseSpecialFunction(boolean parseExp) throws ParseException {
        Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQRT:
      e = parseSqrt(parseExp);
      break;
    case CTRAN:
      e = parseCtran(parseExp);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseSqrt(boolean parseExp) throws ParseException {
        Expression e;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    jj_consume_token(SQRT);
    jj_consume_token(LPAR);
    e = parseExp(parseExp);
    jj_consume_token(RPAR);
          endExpression(info);
           {if (true) return newOperator(OperatorPRISMPow.PRISM_POW, e,
                new ExpressionLiteral.Builder()
                        .setValue("0.5")
                        .setType(ExpressionTypeReal.TYPE_REAL)
                        .build(), info);}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseCtran(boolean parseExp) throws ParseException {
        Expression e;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    jj_consume_token(CTRAN);
    jj_consume_token(LPAR);
    e = parseExp(parseExp);
    jj_consume_token(RPAR);
          endExpression(info);
          {if (true) return newOperator(OperatorConjugate.CONJUGATE, newOperator(OperatorTranspose.TRANSPOSE, e));}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseFunctionN(boolean parseExp, Operator type) throws ParseException {
        Expression e;
        Expression ne;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    e = parseExp(parseExp);
    label_9:
    while (true) {
      jj_consume_token(COMMA);
      ne = parseExp(parseExp);
                  endExpression(info);
                  e = newOperator(type, e, ne, info);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_9;
      }
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseFunction2(boolean parseExp, Operator type) throws ParseException {
        Expression e;
        Expression ne;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    e = parseExp(parseExp);
    jj_consume_token(COMMA);
    ne = parseExp(parseExp);
          endExpression(info);
          {if (true) return newOperator(type, e, ne, info);}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseFunction1(boolean parseExp, Operator type) throws ParseException {
        Expression e;
    e = parseExp(parseExp);
          {if (true) return newOperator(type, e);}
    throw new Error("Missing return statement in function");
  }

  final private Operator functionMultipleParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAX:
      jj_consume_token(MAX);
                  {if (true) return OperatorMax.MAX;}
      break;
    case MIN:
      jj_consume_token(MIN);
                  {if (true) return OperatorMin.MIN;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Operator functionOneParam() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOOR:
      jj_consume_token(FLOOR);
                  {if (true) return OperatorFloor.FLOOR;}
      break;
    case CEIL:
      jj_consume_token(CEIL);
                  {if (true) return OperatorCeil.CEIL;}
      break;
    case TRAN:
      jj_consume_token(TRAN);
                  {if (true) return OperatorTranspose.TRANSPOSE;}
      break;
    case CONJ:
      jj_consume_token(CONJ);
                  {if (true) return OperatorConjugate.CONJUGATE;}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Operator functionTwoParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POW:
      jj_consume_token(POW);
                  {if (true) return OperatorPRISMPow.PRISM_POW;}
      break;
    case MOD:
      jj_consume_token(MOD);
                  {if (true) return OperatorMod.MOD;}
      break;
    case LOG:
      jj_consume_token(LOG);
                  {if (true) return OperatorLog.LOG;}
      break;
    case KRON:
      jj_consume_token(KRON);
                  {if (true) return OperatorKronecker.KRONECKER;}
      break;
    case QEVAL:
      jj_consume_token(QEVAL);
                  {if (true) return OperatorQeval.QEVAL;}
      break;
    case QPROB:
      jj_consume_token(QPROB);
                  {if (true) return OperatorQprob.QPROB;}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression parseParenth(boolean parseExp) throws ParseException {
        Expression p;
    jj_consume_token(LPAR);
    p = parseExpTemporal(parseExp);
    jj_consume_token(RPAR);
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseIdentifier() throws ParseException {
        Token literal;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    literal = jj_consume_token(IDENTIFIER);
          endExpression(info);
          {if (true) return new ExpressionIdentifierStandard.Builder()
                .setName(literal.toString())
                .build();}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseLabel() throws ParseException {
        Token literal;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    jj_consume_token(QUOTE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      literal = jj_consume_token(IDENTIFIER);
      break;
    case INIT:
      literal = jj_consume_token(INIT);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(QUOTE);
    endExpression(info);
          {if (true) return new ExpressionIdentifierStandard.Builder()
                .setName("\u005c"" + literal.toString() + "\u005c"")
//		.setPositional(info.toPositional())
                .build();}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseReal() throws ParseException {
        Token real;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    real = jj_consume_token(NUM_REAL);
          endExpression(info);
        {if (true) return new ExpressionLiteral.Builder()
                .setValue(real.toString())
                .setType(ExpressionTypeReal.TYPE_REAL)
                .setPositional(info.toPositional())
                .build();}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseImaginary() throws ParseException {
        Token imag;
        Expression value;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMAG:
      jj_consume_token(IMAG);
                  value = contextExpQMC.newComplex(0, 1);
      break;
    default:
      jj_la1[33] = jj_gen;
      if (jj_2_10(2147483647)) {
        imag = jj_consume_token(NUM_REAL);
        jj_consume_token(IMAG);
                  value = contextExpQMC.newComplex("0", imag.toString());
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          endExpression(info);
         {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseInt() throws ParseException {
        Token intg;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    intg = jj_consume_token(NUM_INT);
          endExpression(info);
            {if (true) return new ExpressionLiteral.Builder()
            .setValue(intg.toString())
            .setType(ExpressionTypeInteger.TYPE_INTEGER)
                .setPositional(info.toPositional())
                .build();}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseSuperOperator(boolean parseExp) throws ParseException {
        List<Expression> matrices = null;
        Expression matrix = null;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUPEROPERATOR_OPEN:
      jj_consume_token(SUPEROPERATOR_OPEN);
      matrices = parseList(parseExp);
      jj_consume_token(SUPEROPERATOR_CLOSE);
      break;
    case SOMF:
      jj_consume_token(SOMF);
      jj_consume_token(LPAR);
      matrix = parseExp(parseExp);
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                endExpression(info);
                if (matrices == null) {
                        {if (true) return contextExpQMC.newSuperOperatorFromMatrix(matrix);}
                } else {
                        {if (true) return contextExpQMC.newSuperOperatorFromList(matrices);}
                }
    throw new Error("Missing return statement in function");
  }

  final private List<Expression> parseList(boolean parseExp) throws ParseException {
        List<Expression> vector = new ArrayList<Expression>();
        Expression element;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    element = parseExp(parseExp);
          vector.add(element);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      element = parseExp(parseExp);
                  vector.add(element);
    }
          endExpression(info);
          {if (true) return vector;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseVector(boolean parseExp) throws ParseException {
        List<Expression> vector;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    jj_consume_token(LCURL);
    vector = parseList(parseExp);
    jj_consume_token(RCURL);
          endExpression(info);
          {if (true) return contextExpQMC.newList(vector);}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseBoolean() throws ParseException {
        InfoExpression info = new InfoExpression(string);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
            beginExpression(info);
      jj_consume_token(TRUE);
                  endExpression(info);
                  {if (true) return new ExpressionLiteral.Builder()
                        .setValue("true")
                        .setType(ExpressionTypeBoolean.TYPE_BOOLEAN)
                        .setPositional(info.toPositional())
                        .build();}
      break;
    case FALSE:
            beginExpression(info);
      jj_consume_token(FALSE);
                  endExpression(info);
                  {if (true) return new ExpressionLiteral.Builder()
                        .setValue("false")
                        .setType(ExpressionTypeBoolean.TYPE_BOOLEAN)
                        .setPositional(info.toPositional())
                        .build();}
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression parseMatrix(boolean parseExp) throws ParseException {
        Expression matrix;
        Expression param;
        InfoExpression info = new InfoExpression(string);
      beginExpression(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTITY:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTITY:
        jj_consume_token(IDENTITY);
        break;
      case ID:
        jj_consume_token(ID);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAR);
      param = parseExp(parseExp);
      jj_consume_token(RPAR);
                  matrix = contextExpQMC.newIdentityMatrix(param);
      break;
    case PAULIX:
    case PX:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAULIX:
        jj_consume_token(PAULIX);
        break;
      case PX:
        jj_consume_token(PX);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  matrix = getPredefinedMatrix(MatrixType.PAULIX);
      break;
    case PAULIY:
    case PY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAULIY:
        jj_consume_token(PAULIY);
        break;
      case PY:
        jj_consume_token(PY);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  matrix = getPredefinedMatrix(MatrixType.PAULIY);
      break;
    case PAULIZ:
    case PZ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAULIZ:
        jj_consume_token(PAULIZ);
        break;
      case PZ:
        jj_consume_token(PZ);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  matrix = getPredefinedMatrix(MatrixType.PAULIZ);
      break;
    case HADAMARD:
    case HD:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HADAMARD:
        jj_consume_token(HADAMARD);
        break;
      case HD:
        jj_consume_token(HD);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  matrix = getPredefinedMatrix(MatrixType.HADAMARD);
      break;
    case CNOT:
    case CN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CNOT:
        jj_consume_token(CNOT);
        break;
      case CN:
        jj_consume_token(CN);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  matrix = getPredefinedMatrix(MatrixType.CNOT);
      break;
    case M0:
      jj_consume_token(M0);
                  matrix = getPredefinedMatrix(MatrixType.M0);
      break;
    case M1:
      jj_consume_token(M1);
                  matrix = getPredefinedMatrix(MatrixType.M1);
      break;
    case PHASESHIFT:
    case PS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHASESHIFT:
        jj_consume_token(PHASESHIFT);
        break;
      case PS:
        jj_consume_token(PS);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAR);
      param = parseExp(parseExp);
      jj_consume_token(RPAR);
                  matrix = contextExpQMC.newPhaseShiftMatrix(param);
      break;
    case SWAP:
    case SW:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SWAP:
        jj_consume_token(SWAP);
        break;
      case SW:
        jj_consume_token(SW);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  matrix = getPredefinedMatrix(MatrixType.SWAP);
      break;
    case TOFFOLI:
    case TF:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOFFOLI:
        jj_consume_token(TOFFOLI);
        break;
      case TF:
        jj_consume_token(TF);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  matrix = getPredefinedMatrix(MatrixType.TOFFOLI);
      break;
    case FREDKIN:
    case FK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FREDKIN:
        jj_consume_token(FREDKIN);
        break;
      case FK:
        jj_consume_token(FK);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  matrix = getPredefinedMatrix(MatrixType.FREDKIN);
      break;
    case LBRACKET:
      matrix = parseSingleMatrix(parseExp);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          endExpression(info);
          {if (true) return matrix;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseSingleMatrix(boolean parseExp) throws ParseException {
        List<List<Expression>> matrix = new ArrayList<List<Expression>>();
        List<Expression> row;
        int size;
        Token errorToken;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    jj_consume_token(LBRACKET);
    row = parseRow(parseExp);
                matrix.add(row);
                size = row.size();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_11;
      }
                  errorToken = getToken(1);
      jj_consume_token(SEMICOLON);
      row = parseRow(parseExp);
                        if (row.size() != size) {
                                computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                                ensure(false, ProblemsQMC.EXPRESSION_PARSER_MATRIX_ROW_DIFFERENT_SIZE, newPositional(errorLine, errorColumn));
                        }
                        matrix.add(row);
    }
    jj_consume_token(RBRACKET);
          endExpression(info);
          {if (true) return contextExpQMC.newMatrix(matrix);}
    throw new Error("Missing return statement in function");
  }

  final private List<Expression> parseRow(boolean parseExp) throws ParseException {
        List<Expression> row = new ArrayList<Expression>();
        Expression element;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    element = parseExp(parseExp);
                row.add(element);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      element = parseExp(parseExp);
                        row.add(element);
    }
                endExpression(info);
                {if (true) return row;}
    throw new Error("Missing return statement in function");
  }

  final private OldSchoolFilter OldSchoolFilter() throws ParseException {
        Expression states;
        boolean min = false;
        boolean max = false;
        InfoExpression info = new InfoExpression(string);
    beginExpression(info);
    jj_consume_token(LCURL);
    states = parseExpTemporal(false);
    jj_consume_token(RCURL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURL:
      jj_consume_token(LCURL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAX:
        jj_consume_token(MAX);
        jj_consume_token(RCURL);
                          max = true;
        break;
      case MIN:
        jj_consume_token(MIN);
        jj_consume_token(RCURL);
                          min = true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LCURL:
          jj_consume_token(LCURL);
          jj_consume_token(MAX);
          jj_consume_token(RCURL);
                                  max = true;
          break;
        default:
          jj_la1[50] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
                endExpression(info);
                FilterType type = null;
                if (!min && !max) {
                        type = FilterType.STATE;
                } else if (min && !max) {
                        type = FilterType.MIN;
                } else if (!min && max) {
                        type = FilterType.MAX;
                } else if (min && max) {
                        type = FilterType.RANGE;
                }
                {if (true) return new OldSchoolFilter(type, states, info);}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseProbQuant(boolean parseExp) throws ParseException {
        Expression prop;
        Expression cmp;
        Expression cond = getTrue();
        DirType dirType;
        CmpType cmpType;
        OldSchoolFilter filter = null;
        InfoExpression info = new InfoExpression(string);
                if (parseExp) {
                        Token errorToken = getToken(1);
                        computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                        ensure(false, ProblemsQMC.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(errorLine, errorColumn), errorToken);
                        {if (true) return null;}
                }
                beginExpression(info);
    dirType = PropQuantProbDirType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTION:
        jj_consume_token(QUESTION);
                                        cmpType = CmpType.IS;
                                        cmp = getTrue();
        break;
      default:
        jj_la1[53] = jj_gen;
        if (jj_2_11(1)) {
          cmp = parseExpTemporal(parseExp);
                                  cmpType = CmpType.EQ;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(LBRACKET);
      prop = parseExpTemporal(parseExp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COND:
        jj_consume_token(COND);
        cond = parseExpTemporal(parseExp);
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURL:
        filter = OldSchoolFilter();
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
      break;
    case LEQ:
    case LT:
    case GT:
    case GEQ:
      cmpType = PropQuantCmpType();
      cmp = parseExpTemporal(parseExp);
      jj_consume_token(LBRACKET);
      prop = parseExpTemporal(parseExp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COND:
        jj_consume_token(COND);
        cond = parseExpTemporal(parseExp);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURL:
        filter = OldSchoolFilter();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            endExpression(info);
                Expression result = new ExpressionQuantifier.Builder()
                        .setDirType(dirType)
                        .setCmpType(cmpType)
                        .setQuantified(prop)
                        .setCompare(cmp)
                        .setCondition(cond)
                        .setPositional(info.toPositional())
                        .build();
                if (filter != null) {
                  result = new ExpressionFilter.Builder()
                                .setFilterType(filter.getType())
                                .setProp(result)
                                .setStates(filter.getStates())
                                .setPositional(filter.getInfo().toPositional())
                                .build();
                }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseSteadyQuant(boolean parseExp) throws ParseException {
        Expression prop;
        Expression cmp;
        Expression cond = getTrue();
        DirType dirType;
        CmpType cmpType;
        OldSchoolFilter filter = null;
        InfoExpression info = new InfoExpression(string);
                if (parseExp) {
                        Token errorToken = getToken(1);
                        computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                        ensure(false, ProblemsQMC.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(errorLine, errorColumn), errorToken.toString());
                        {if (true) return null;}
                }
                beginExpression(info);
    dirType = SteadyQuantProbDirType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTION:
        jj_consume_token(QUESTION);
                                cmpType = CmpType.IS;
                                cmp = getTrue();
        break;
      default:
        jj_la1[59] = jj_gen;
        if (jj_2_12(1)) {
          cmp = parseExpTemporal(parseExp);
                          cmpType = CmpType.EQ;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(LBRACKET);
      prop = parseExpTemporal(parseExp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COND:
        jj_consume_token(COND);
        cond = parseExpTemporal(parseExp);
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURL:
        filter = OldSchoolFilter();
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
      break;
    case LEQ:
    case LT:
    case GT:
    case GEQ:
      cmpType = PropQuantCmpType();
      cmp = parseExpTemporal(parseExp);
      jj_consume_token(LBRACKET);
      prop = parseExpTemporal(parseExp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COND:
        jj_consume_token(COND);
        cond = parseExpTemporal(parseExp);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURL:
        filter = OldSchoolFilter();
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                prop = new ExpressionSteadyState.Builder()
                        .setStates(prop)
                        .build();
                Expression result = new ExpressionQuantifier.Builder()
                        .setDirType(dirType)
                        .setCmpType(cmpType)
                        .setQuantified(prop)
                        .setCompare(cmp)
                        .setCondition(cond)
                        .setPositional(info.toPositional())
                        .build();
                if (filter != null) {
                        result = new ExpressionFilter.Builder()
                                .setFilterType(filter.getType())
                                .setProp(result)
                                .setStates(filter.getStates())
                                .setPositional(filter.getInfo().toPositional())
                                .build();
                }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final private CmpType PropQuantCmpType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEQ:
      jj_consume_token(LEQ);
                  {if (true) return CmpType.LE;}
      break;
    case LT:
      jj_consume_token(LT);
                  {if (true) return CmpType.LT;}
      break;
    case GEQ:
      jj_consume_token(GEQ);
                  {if (true) return CmpType.GE;}
      break;
    case GT:
      jj_consume_token(GT);
                  {if (true) return CmpType.GT;}
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression parseRewardPath(boolean parseExp, Expression rewardStructure) throws ParseException {
        Expression prop;
        Expression timebound;
        Expression discount;
        InfoExpression info = new InfoExpression(string);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case F:
            beginExpression(info);
      jj_consume_token(F);
      prop = parseExpTemporal(parseExp);
                  endExpression(info);
                  {if (true) return newRewardReachability(rewardStructure, prop, info);}
      break;
    case C:
      jj_consume_token(C);
                  timebound = ExpressionLiteral.getPosInf();
                  discount = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEQ:
        jj_consume_token(LEQ);
        timebound = parseExpTemporal(parseExp);
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        jj_consume_token(DISCOUNT);
        jj_consume_token(EQ);
        discount = parseExpTemporal(parseExp);
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
                        if (discount == null) {
                                {if (true) return newRewardCumulative(rewardStructure, timebound);}
                        } else {
                                {if (true) return newRewardDiscounted(rewardStructure, timebound, discount);}
                        }
      break;
    case I:
      jj_consume_token(I);
      jj_consume_token(EQ);
      prop = parseExpTemporal(parseExp);
                  {if (true) return newRewardInstantaneous(rewardStructure, prop);}
      break;
    case S:
      jj_consume_token(S);
                  {if (true) return newRewardSteadyState(rewardStructure);}
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression parseRewardStructure(boolean parseExp) throws ParseException {
        Expression rewardStructure = null;
        Token literal;
    jj_consume_token(LCURL);
    if (jj_2_13(2147483647)) {
      jj_consume_token(QUOTE);
      literal = jj_consume_token(IDENTIFIER);
      jj_consume_token(QUOTE);
                  rewardStructure = new ExpressionIdentifierStandard.Builder()
                        .setName("\u005c"" + literal.toString() + "\u005c"")
                        .build();
    } else if (jj_2_14(1)) {
      rewardStructure = parseExp(true);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RCURL);
          {if (true) return rewardStructure;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseRewQuant(boolean parseExp) throws ParseException {
        Expression prop;
        Expression cmp;
        Expression cond = getTrue();
        DirType dirType;
        CmpType cmpType;
        Expression rewardStructure = getTrue();
        OldSchoolFilter filter = null;
        Token oper;
          oper = getToken(1);
                if (parseExp) {
                    ensure(false, ProblemsQMC.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(oper.beginLine, oper.beginColumn),  oper.toString());
                    {if (true) return null;}
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case R:
      jj_consume_token(R);
                  dirType = DirType.NONE;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURL:
        rewardStructure = parseRewardStructure(parseExp);
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAX:
      case MIN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MIN:
          jj_consume_token(MIN);
                          dirType = DirType.MIN;
          break;
        case MAX:
          jj_consume_token(MAX);
                          dirType = DirType.MAX;
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      break;
    case RMIN:
      jj_consume_token(RMIN);
                  dirType = DirType.MIN;
      break;
    case RMAX:
      jj_consume_token(RMAX);
                  dirType = DirType.MAX;
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
                        cmpType = CmpType.IS;
                        cmp = getTrue();
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTION:
        jj_consume_token(QUESTION);
                                cmpType = CmpType.IS;
                                cmp = getTrue();
        break;
      default:
        jj_la1[73] = jj_gen;
        if (jj_2_15(1)) {
          cmp = parseExpTemporal(parseExp);
                          cmpType = CmpType.EQ;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case LEQ:
    case LT:
    case GT:
    case GEQ:
      cmpType = PropQuantCmpType();
      cmp = parseExpTemporal(parseExp);
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    prop = parseRewardPath(parseExp, rewardStructure);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COND:
      jj_consume_token(COND);
      cond = parseExpTemporal(parseExp);
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURL:
      filter = OldSchoolFilter();
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
                Expression result = new ExpressionQuantifier.Builder()
                        .setDirType(dirType)
                        .setCmpType(cmpType)
                        .setQuantified(prop)
                        .setCompare(cmp)
                        .setCondition(cond)
                        .build();
                if (filter != null) {
                        result = new ExpressionFilter.Builder()
                                .setFilterType(filter.getType())
                                .setProp(result)
                                .setStates(filter.getStates())
                                .build();
                }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public DirType PropQuantProbDirType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case P:
      jj_consume_token(P);
                  {if (true) return DirType.NONE;}
      break;
    case PMAX:
      jj_consume_token(PMAX);
                  {if (true) return DirType.MAX;}
      break;
    case PMIN:
      jj_consume_token(PMIN);
                  {if (true) return DirType.MIN;}
      break;
    case Q:
      jj_consume_token(Q);
                  {if (true) return DirType.NONE;}
      break;
    case QMAX:
      jj_consume_token(QMAX);
                  {if (true) return DirType.MAX;}
      break;
    case QMIN:
      jj_consume_token(QMIN);
                  {if (true) return DirType.MIN;}
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private DirType SteadyQuantProbDirType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S:
      jj_consume_token(S);
                  {if (true) return DirType.NONE;}
      break;
    case SMAX:
      jj_consume_token(SMAX);
                  {if (true) return DirType.MAX;}
      break;
    case SMIN:
      jj_consume_token(SMIN);
                  {if (true) return DirType.MIN;}
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private FilterType ExpressionFilterType() throws ParseException {
        FilterType type = null;
        Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MIN:
      jj_consume_token(MIN);
                  type = FilterType.MIN;
      break;
    case MAX:
      jj_consume_token(MAX);
                  type = FilterType.MAX;
      break;
    case PLUS:
      jj_consume_token(PLUS);
                  type = FilterType.SUM;
      break;
    case AND:
      jj_consume_token(AND);
                  type = FilterType.FORALL;
      break;
    case OR:
      jj_consume_token(OR);
                  type = FilterType.EXISTS;
      break;
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
                        switch (id.image) {
                                case "count" :
                                        type = FilterType.COUNT;
                                        break;
                                case "sum" :
                                        type = FilterType.SUM;
                                        break;
                                case "avg":
                                        type = FilterType.AVG;
                                        break;
                                case "first":
                                        type = FilterType.FIRST;
                                        break;
                                case "range":
                                        type = FilterType.RANGE;
                                        break;
                                case "forall":
                                        type = FilterType.FORALL;
                                        break;
                                case "exists":
                                        type = FilterType.EXISTS;
                                        break;
                                case "state":
                                        type = FilterType.STATE;
                                        break;
                                case "argmin":
                                        type = FilterType.ARGMIN;
                                        break;
                                case "argmax":
                                        type = FilterType.ARGMAX;
                                        break;
                                case "print":
                                        type = FilterType.PRINT;
                                        break;
                                case "printall":
                                        type = FilterType.PRINTALL;
                                        break;
                                default:
                                        computeErrorPosition(id.beginLine, id.beginColumn);
                                        ensure(false, ProblemsQMC.EXPRESSION_PARSER_UNKNOWN_FILTER_TYPE, newPositional(errorLine, errorColumn), id.toString());
                        }
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseFilter(boolean parseExp) throws ParseException {
        FilterType type;
        Expression prop;
        Expression states = getTrue();
        InfoExpression info = new InfoExpression(string);
                if (parseExp) {
                        Token errorToken = getToken(1);
                        computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                        ensure(false, ProblemsQMC.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(errorLine, errorColumn), errorToken.toString());
                }
          beginExpression(info);
    jj_consume_token(FILTER);
    jj_consume_token(LPAR);
    type = ExpressionFilterType();
    jj_consume_token(COMMA);
    prop = parseExpTemporal(parseExp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      states = parseExpTemporal(parseExp);
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
          endExpression(info);
          {if (true) return new ExpressionFilter.Builder()
                .setFilterType(type)
                .setProp(prop)
                .setStates(states)
                .setPositional(info.toPositional())
                .build();}
    throw new Error("Missing return statement in function");
  }

//private Expression parseExpAsProp(boolean parseExp)  :
//{
//	Expression p;
//}
//{
//	p = parseTemporalBinary(parseExp)
//	{ return p; }
//}
  final public TimeBound TimeBound() throws ParseException {
        Expression left;
        Expression right;
        TimeBound timeBound = newTimeBound();
        boolean leftOpen = true;
        boolean rightOpen = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
    case RBRACKET:
    case LEQ:
    case LT:
    case GT:
    case GEQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        //		right = parseExpForTimeBound(true)
                        right = parseExp(true);
                  timeBound = newTimeBound(ExpressionLiteral.getZero(), right, false, true);
        break;
      case LEQ:
        jj_consume_token(LEQ);
        //		right = parseExpForTimeBound(true)
                        right = parseExp(true);
                  timeBound = newTimeBound(ExpressionLiteral.getZero(), right, false, false);
        break;
      case GT:
        jj_consume_token(GT);
        //		left = parseExpForTimeBound(true)
                        left = parseExp(true);
                  timeBound = newTimeBound(left, ExpressionLiteral.getPosInf(), true, true);
        break;
      case GEQ:
        jj_consume_token(GEQ);
        //		left = parseExpForTimeBound(true)
                        left = parseExp(true);
                  timeBound = newTimeBound(left, ExpressionLiteral.getPosInf(), false, true);
        break;
      default:
        jj_la1[83] = jj_gen;
        if (jj_2_16(2147483647)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            jj_consume_token(LBRACKET);
                          leftOpen = false;
            break;
          case RBRACKET:
            jj_consume_token(RBRACKET);
                          leftOpen = true;
            break;
          default:
            jj_la1[81] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          left = parseExp(true);
          jj_consume_token(COMMA);
          right = parseExp(true);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RBRACKET:
            jj_consume_token(RBRACKET);
                          rightOpen = false;
            break;
          case LBRACKET:
            jj_consume_token(LBRACKET);
                          rightOpen = true;
            break;
          default:
            jj_la1[82] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                  timeBound = newTimeBound(left, right, leftOpen, rightOpen);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
          {if (true) return timeBound;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseTemporalBinary(boolean parseExp) throws ParseException {
        ArrayList<Expression> expressions = new ArrayList<Expression>();
        ArrayList<TimeBound> timeBounds = new ArrayList<TimeBound>();
        Expression p;
        TimeBound timeBound;
        BinType lastType = null;
        BinType type = null;
        Token oper;
    p = parseTemporalUnary(parseExp);
          expressions.add(p);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case R:
    case U:
    case W:
                  oper = getToken(1);
                        if (parseExp) {
                                Token errorToken = getToken(1);
                                computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                                ensure(false, ProblemsQMC.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(errorLine, errorColumn), errorToken.toString());
                        }
      type = TempBinType();
                        if (lastType != null) {
                                if (lastType != BinType.UNTIL || type != BinType.UNTIL) {
                                  ensure(false, ProblemsQMC.PARSE_ERROR_MULTI_UNTIL, newPositional(token.endLine, token.endColumn), token.image);
                                }
                        }
                        lastType = type;
      timeBound = TimeBound();
                  timeBounds.add(timeBound);
      jj_consume_token(LPAR);
      p = parseTemporalBinary(parseExp);
      jj_consume_token(RPAR);
                  expressions.add(p);
      break;
    default:
      jj_la1[85] = jj_gen;
      ;
    }
                if (expressions.size() == 1) {
                        {if (true) return p;}
                } else {
                        switch (type) {
                        case RELEASE:
                                {if (true) return new ExpressionTemporalRelease.Builder()
                                        .setOperandLeft(expressions.get(0))
                                        .setOperandRight(expressions.get(1))
                                        .setTimeBound(timeBounds.get(0))
                                        .build();}
                        case UNTIL:
                                {if (true) return new ExpressionTemporalUntil.Builder()
                                        .setOperandLeft(expressions.get(0))
                                        .setOperandRight(expressions.get(1))
                                        .setTimeBound(timeBounds.get(0))
                                        .build();}
                        case WEAK: {
                                Expression or = or(expressions.get(0), expressions.get(1), null);
                                {if (true) return new ExpressionTemporalRelease.Builder()
                                        .setOperandLeft(expressions.get(1))
                                        .setOperandRight(or)
                                        .setTimeBound(timeBounds.get(0))
                                        .build();}
                        }
                        default:
                                assert(false);
                                {if (true) return null;}
                        }
                }
    throw new Error("Missing return statement in function");
  }

  final private BinType TempBinType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case W:
      jj_consume_token(W);
                  {if (true) return BinType.WEAK;}
      break;
    case R:
      jj_consume_token(R);
                  {if (true) return BinType.RELEASE;}
      break;
    case U:
      jj_consume_token(U);
                  {if (true) return BinType.UNTIL;}
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression parseTemporalUnary(boolean parseExp) throws ParseException {
        Expression p;
        UnType type;
        TimeBound timeBound;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case F:
    case G:
    case X:
                        if (parseExp) {
                                Token errorToken = getToken(1);
                                computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                                ensure(false, ProblemsQMC.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(errorLine, errorColumn), errorToken.toString());
                        }
      type = TempUnType();
      timeBound = TimeBound();
      jj_consume_token(LPAR);
      p = parseTemporalUnary(parseExp);
      jj_consume_token(RPAR);
                        switch (type) {
                        case NEXT:
                                p = new ExpressionTemporalNext.Builder()
                                        .setOperand(p)
                                        .setTimeBound(timeBound)
                                        .build();
                                break;
                        case FINALLY:
                                p = new ExpressionTemporalFinally.Builder()
                                        .setOperand(p)
                                        .setTimeBound(timeBound)
                                        .build();
                                break;
                        case GLOBALLY:
                                p = new ExpressionTemporalGlobally.Builder()
                                        .setOperand(p)
                                        .setTimeBound(timeBound)
                                        .build();
                                break;
                        }
      break;
    default:
      jj_la1[87] = jj_gen;
      if (jj_2_17(1)) {
        p = ExpressionITE(parseExp);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private UnType TempUnType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case X:
      jj_consume_token(X);
                  {if (true) return UnType.NEXT;}
      break;
    case F:
      jj_consume_token(F);
                  {if (true) return UnType.FINALLY;}
      break;
    case G:
      jj_consume_token(G);
                  {if (true) return UnType.GLOBALLY;}
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_3R_45() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(QUOTE)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(M1)) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(QUOTE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(QUOTE)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(M0)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(NUM_REAL)) return true;
    if (jj_scan_token(IMAG)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(IMAG)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_232()) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(LCURL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    if (jj_scan_token(RCURL)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_112()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_111()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(I)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_110()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(DISCOUNT)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    }
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(PRIME)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_scan_token(LEQ)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_112()) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_178()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(C)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_111()) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_177()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    }
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_110()) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_176()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(F)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(GEQ)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(LEQ)) return true;
    return false;
  }

  private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_159()) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    if (jj_3R_22()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_153()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) return true;
    }
    if (jj_3R_22()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    xsp = jj_scanpos;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) return true;
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(COND)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_scan_token(GEQ)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == LT && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT) && getToken(3).kind == OR;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_19()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == OR && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT) && getToken(3).kind == GT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_20()) return true;
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_3R_154()) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(COND)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_186()) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(LEQ)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_224()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(QUESTION)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_233() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(GEQ)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(SOMF)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(LEQ)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_21()) return true;
    xsp = jj_scanpos;
    if (jj_3R_198()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(SUPEROPERATOR_OPEN)) return true;
    if (jj_3R_202()) return true;
    if (jj_scan_token(SUPEROPERATOR_CLOSE)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_150()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_102()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(NUM_REAL)) return true;
    if (jj_scan_token(IMAG)) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(NUM_INT)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(NUM_REAL)) return true;
    if (jj_scan_token(IMAG)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(IMAG)) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(FILTER)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_174()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(COND)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_30()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_148()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(COND)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = (getToken(1).kind == KET_ZERO || getToken(1).kind == KET_ONE
                        || (getToken(1).kind == OR
                        && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT)
                        && getToken(3).kind == GT));
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_17()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = (getToken(1).kind == BRA_ZERO || getToken(1).kind == BRA_ONE
                        || (getToken(1).kind == LT
                        && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT)
                        && getToken(3).kind == OR));
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_18()) return true;
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_186()) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(QUESTION)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_146()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(NUM_REAL)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_209()) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_209()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_21()) return true;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == LT
                        && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT)
                        && getToken(3).kind == OR
                        && (getToken(4).kind == IDENTIFIER || getToken(4).kind == NUM_INT);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_26()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = (getToken(1).kind == KET_ZERO || getToken(1).kind == KET_ONE
                        || (getToken(1).kind == OR
                        && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT)
                        && getToken(3).kind == GT));
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_27()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = (getToken(1).kind == BRA_ZERO || getToken(1).kind == BRA_ONE
                || (getToken(1).kind == LT
                && (getToken(2).kind == IDENTIFIER || getToken(2).kind == NUM_INT)
                && getToken(3).kind == OR));
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_28()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(QUOTE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    if (jj_scan_token(QUOTE)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_98()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    }
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_142()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_62()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(LCURL)) return true;
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(RCURL)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(QPROB)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(SMIN)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(QEVAL)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(SMAX)) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(NUM_INT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(UNDERSCORE)) return true;
    if (jj_scan_token(NUM_INT)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(KRON)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_107()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(RCURL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(IFF)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(LOG)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(OR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == NUM_INT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_236()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_237()) return true;
    }
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(RCURL)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(POW)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(QMIN)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(G)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(QMAX)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(F)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(Q)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(X)) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(UNDERSCORE)) return true;
    if (jj_scan_token(NUM_INT)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(LCURL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(CONJ)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(KET_ONE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(PMIN)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(IMPLIES)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(TRAN)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(PMAX)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(CEIL)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(P)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(FLOOR)) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(UNDERSCORE)) return true;
    if (jj_scan_token(NUM_INT)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(LCURL)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RCURL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(KET_ZERO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(QUESTION)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_62()) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(COND)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_105()) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_186()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(QUESTION)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_228()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(NUM_INT)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(UNDERSCORE)) return true;
    if (jj_scan_token(NUM_INT)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(U)) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == NUM_INT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_240()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_241()) return true;
    }
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(R)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(W)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(RMAX)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(RMIN)) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(UNDERSCORE)) return true;
    if (jj_scan_token(NUM_INT)) return true;
    return false;
  }

  private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(BRA_ONE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_212()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_213()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(R)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_22()) return true;
    Token xsp;
    if (jj_3R_211()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(UNDERSCORE)) return true;
    if (jj_scan_token(NUM_INT)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) return true;
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(BRA_ZERO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_238()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) return true;
    }
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_169()) return true;
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(CTRAN)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_70()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public QMCExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[89];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x741280,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200280,0x601280,0x1000,0x0,0x0,0x200280,0x0,0x4000000,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40802000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2800000,0x2800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf1dc78d5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8840d5,0x8840d5,0x0,0x0,0x50,0x0,0x884085,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x50,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x50,0x50,0x31000000,0x0,0x0,0x0,0x0,0x543800,0xc0000000,0x50,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x2000000,0x0,0x80000000,0x0,0x20000000,0x10000000,0x40000000,0x0,0x0,0x0,0x0,0x3000,0xc000,0xc000,0x2000,0x0,0x140063,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x22,0x22,0x2,0x8000000,0x0,0x20,0x0,0x0,0x0,0x0,0x8000000,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x2000000,0x8000000,0x400000,0x0,0x400000,0x0,0x800,0x400000,0x800,0x400000,0x0,0x0,0x800,0x400000,0x800,0x400000,0x0,0x0,0x0,0x8000000,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x800,0x400000,0x0,0x1,0x30001000,0x8000000,0xc0000,0xc0000,0x0,0xc0000,0x280,0x280,0x400,0x400,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x2,0x0,0x1,0x0,0x0,0x0,0x18,0x18,0x1e0,0x1e0,0x0,0x0,0x0,0x0,0x4,0xdffe5400,0x200,0x200,0x40,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x5000,0x0,0x0,0x60000,0x180000,0x600000,0x1800000,0x6000000,0x18000000,0x0,0x0,0x0,0x0,0xdffe0000,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x1e8,0x2,0x0,0x0,0x0,0x0,0x1e8,0x1e0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x1e8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e0,0x1e0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x70ff,0x0,0x0,0xc00,0x0,0x0,0x300,0x3000,0x3000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0xc,0xc0,0x3,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[17];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public QMCExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public QMCExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QMCExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 89; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 89; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public QMCExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QMCExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 89; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 89; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public QMCExpressionParser(QMCExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 89; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(QMCExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 89; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[145];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 89; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 145; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 17; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
