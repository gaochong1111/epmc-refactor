/* Generated By:JavaCC: Do not edit this line. QMCExpressionParserConstants.java */
package epmc.qmc.expression;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface QMCExpressionParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int A = 5;
  /** RegularExpression Id. */
  int BOOL = 6;
  /** RegularExpression Id. */
  int CEIL = 7;
  /** RegularExpression Id. */
  int CLOCK = 8;
  /** RegularExpression Id. */
  int CONJ = 9;
  /** RegularExpression Id. */
  int CONSTANT = 10;
  /** RegularExpression Id. */
  int CTMC = 11;
  /** RegularExpression Id. */
  int CTRAN = 12;
  /** RegularExpression Id. */
  int C = 13;
  /** RegularExpression Id. */
  int DISCOUNT = 14;
  /** RegularExpression Id. */
  int DOUBLE = 15;
  /** RegularExpression Id. */
  int DTMC = 16;
  /** RegularExpression Id. */
  int E = 17;
  /** RegularExpression Id. */
  int FALSE = 18;
  /** RegularExpression Id. */
  int FORMULA = 19;
  /** RegularExpression Id. */
  int FILTER = 20;
  /** RegularExpression Id. */
  int FLOOR = 21;
  /** RegularExpression Id. */
  int FUNCTION = 22;
  /** RegularExpression Id. */
  int F = 23;
  /** RegularExpression Id. */
  int GLOBAL = 24;
  /** RegularExpression Id. */
  int G = 25;
  /** RegularExpression Id. */
  int INIT = 26;
  /** RegularExpression Id. */
  int INITEND = 27;
  /** RegularExpression Id. */
  int INVARIANT_OPEN = 28;
  /** RegularExpression Id. */
  int INVARIANT_CLOSE = 29;
  /** RegularExpression Id. */
  int I = 30;
  /** RegularExpression Id. */
  int INT = 31;
  /** RegularExpression Id. */
  int KRON = 32;
  /** RegularExpression Id. */
  int LABEL = 33;
  /** RegularExpression Id. */
  int LOG = 34;
  /** RegularExpression Id. */
  int MATRIX = 35;
  /** RegularExpression Id. */
  int MAX = 36;
  /** RegularExpression Id. */
  int MDP = 37;
  /** RegularExpression Id. */
  int MIN = 38;
  /** RegularExpression Id. */
  int MOD = 39;
  /** RegularExpression Id. */
  int MODULEBEGIN = 40;
  /** RegularExpression Id. */
  int MODULEEND = 41;
  /** RegularExpression Id. */
  int NONDETERMINISTIC = 42;
  /** RegularExpression Id. */
  int P = 43;
  /** RegularExpression Id. */
  int PMAX = 44;
  /** RegularExpression Id. */
  int PMIN = 45;
  /** RegularExpression Id. */
  int POW = 46;
  /** RegularExpression Id. */
  int PROBABILISTIC = 47;
  /** RegularExpression Id. */
  int PROB = 48;
  /** RegularExpression Id. */
  int PTA = 49;
  /** RegularExpression Id. */
  int Q = 50;
  /** RegularExpression Id. */
  int QEVAL = 51;
  /** RegularExpression Id. */
  int QMAX = 52;
  /** RegularExpression Id. */
  int QMC = 53;
  /** RegularExpression Id. */
  int QMIN = 54;
  /** RegularExpression Id. */
  int QPROB = 55;
  /** RegularExpression Id. */
  int R = 56;
  /** RegularExpression Id. */
  int RATE = 57;
  /** RegularExpression Id. */
  int REWARDSBEGIN = 58;
  /** RegularExpression Id. */
  int REWARDSEND = 59;
  /** RegularExpression Id. */
  int RMAX = 60;
  /** RegularExpression Id. */
  int RMIN = 61;
  /** RegularExpression Id. */
  int S = 62;
  /** RegularExpression Id. */
  int SMAX = 63;
  /** RegularExpression Id. */
  int SMIN = 64;
  /** RegularExpression Id. */
  int SQRT = 65;
  /** RegularExpression Id. */
  int STOCHASTIC = 66;
  /** RegularExpression Id. */
  int SYSTEMBEGIN = 67;
  /** RegularExpression Id. */
  int SYSTEMEND = 68;
  /** RegularExpression Id. */
  int TRAN = 69;
  /** RegularExpression Id. */
  int TRUE = 70;
  /** RegularExpression Id. */
  int U = 71;
  /** RegularExpression Id. */
  int VECTOR = 72;
  /** RegularExpression Id. */
  int W = 73;
  /** RegularExpression Id. */
  int X = 74;
  /** RegularExpression Id. */
  int COND = 75;
  /** RegularExpression Id. */
  int PLUS = 76;
  /** RegularExpression Id. */
  int MINUS = 77;
  /** RegularExpression Id. */
  int TIMES = 78;
  /** RegularExpression Id. */
  int DIVIDE = 79;
  /** RegularExpression Id. */
  int DOTPRODUCT = 80;
  /** RegularExpression Id. */
  int ARROW = 81;
  /** RegularExpression Id. */
  int LBRACKET = 82;
  /** RegularExpression Id. */
  int RBRACKET = 83;
  /** RegularExpression Id. */
  int LPAR = 84;
  /** RegularExpression Id. */
  int RPAR = 85;
  /** RegularExpression Id. */
  int LCURL = 86;
  /** RegularExpression Id. */
  int RCURL = 87;
  /** RegularExpression Id. */
  int RENAME = 88;
  /** RegularExpression Id. */
  int SEMICOLON = 89;
  /** RegularExpression Id. */
  int COLON = 90;
  /** RegularExpression Id. */
  int COMMA = 91;
  /** RegularExpression Id. */
  int AND = 92;
  /** RegularExpression Id. */
  int OR = 93;
  /** RegularExpression Id. */
  int NOT = 94;
  /** RegularExpression Id. */
  int IMPLIES = 95;
  /** RegularExpression Id. */
  int IFF = 96;
  /** RegularExpression Id. */
  int QUESTION = 97;
  /** RegularExpression Id. */
  int PRIME = 98;
  /** RegularExpression Id. */
  int EQ = 99;
  /** RegularExpression Id. */
  int NEQ = 100;
  /** RegularExpression Id. */
  int LEQ = 101;
  /** RegularExpression Id. */
  int LT = 102;
  /** RegularExpression Id. */
  int GT = 103;
  /** RegularExpression Id. */
  int GEQ = 104;
  /** RegularExpression Id. */
  int UNDERSCORE = 105;
  /** RegularExpression Id. */
  int QUOTE = 106;
  /** RegularExpression Id. */
  int SEPINTERVAL = 107;
  /** RegularExpression Id. */
  int SOMF = 108;
  /** RegularExpression Id. */
  int SUPEROPERATOR = 109;
  /** RegularExpression Id. */
  int SUPEROPERATOR_OPEN = 110;
  /** RegularExpression Id. */
  int SUPEROPERATOR_CLOSE = 111;
  /** RegularExpression Id. */
  int IMAG = 112;
  /** RegularExpression Id. */
  int IDENTITY = 113;
  /** RegularExpression Id. */
  int ID = 114;
  /** RegularExpression Id. */
  int PAULIX = 115;
  /** RegularExpression Id. */
  int PX = 116;
  /** RegularExpression Id. */
  int PAULIY = 117;
  /** RegularExpression Id. */
  int PY = 118;
  /** RegularExpression Id. */
  int PAULIZ = 119;
  /** RegularExpression Id. */
  int PZ = 120;
  /** RegularExpression Id. */
  int HADAMARD = 121;
  /** RegularExpression Id. */
  int HD = 122;
  /** RegularExpression Id. */
  int CNOT = 123;
  /** RegularExpression Id. */
  int CN = 124;
  /** RegularExpression Id. */
  int M01 = 125;
  /** RegularExpression Id. */
  int M0 = 126;
  /** RegularExpression Id. */
  int M1 = 127;
  /** RegularExpression Id. */
  int FREDKIN = 128;
  /** RegularExpression Id. */
  int FK = 129;
  /** RegularExpression Id. */
  int SWAP = 130;
  /** RegularExpression Id. */
  int SW = 131;
  /** RegularExpression Id. */
  int PHASESHIFT = 132;
  /** RegularExpression Id. */
  int PS = 133;
  /** RegularExpression Id. */
  int TOFFOLI = 134;
  /** RegularExpression Id. */
  int TF = 135;
  /** RegularExpression Id. */
  int KET_ZERO = 136;
  /** RegularExpression Id. */
  int KET_ONE = 137;
  /** RegularExpression Id. */
  int BRA_ZERO = 138;
  /** RegularExpression Id. */
  int BRA_ONE = 139;
  /** RegularExpression Id. */
  int IDENTIFIER = 140;
  /** RegularExpression Id. */
  int NUM_INT = 141;
  /** RegularExpression Id. */
  int NUM_REAL = 142;
  /** RegularExpression Id. */
  int COMMENT = 143;
  /** RegularExpression Id. */
  int UNEXPECTED_CHAR = 144;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"A\"",
    "\"bool\"",
    "\"ceil\"",
    "\"clock\"",
    "\"conj\"",
    "\"const\"",
    "\"ctmc\"",
    "\"ctran\"",
    "\"C\"",
    "\"DISCOUNT\"",
    "\"double\"",
    "\"dtmc\"",
    "\"E\"",
    "\"false\"",
    "\"formula\"",
    "\"filter\"",
    "\"floor\"",
    "\"func\"",
    "\"F\"",
    "\"global\"",
    "\"G\"",
    "\"init\"",
    "\"endinit\"",
    "\"invariant\"",
    "\"endinvariant\"",
    "\"I\"",
    "\"int\"",
    "\"kron\"",
    "\"label\"",
    "\"log\"",
    "\"matrix\"",
    "\"max\"",
    "\"mdp\"",
    "\"min\"",
    "\"mod\"",
    "\"module\"",
    "\"endmodule\"",
    "\"nondeterministic\"",
    "\"P\"",
    "\"Pmax\"",
    "\"Pmin\"",
    "\"pow\"",
    "\"probabilistic\"",
    "\"prob\"",
    "\"pta\"",
    "\"Q\"",
    "\"qeval\"",
    "\"Qmax\"",
    "\"qmc\"",
    "\"Qmin\"",
    "\"qprob\"",
    "\"R\"",
    "\"rate\"",
    "\"rewards\"",
    "\"endrewards\"",
    "\"Rmax\"",
    "\"Rmin\"",
    "\"S\"",
    "\"Smax\"",
    "\"Smin\"",
    "\"sqrt\"",
    "\"stochastic\"",
    "\"system\"",
    "\"endsystem\"",
    "\"tran\"",
    "\"true\"",
    "\"U\"",
    "\"vector\"",
    "\"W\"",
    "\"X\"",
    "\"given\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\".*\"",
    "\"->\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"<-\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"=>\"",
    "\"<=>\"",
    "\"?\"",
    "\"\\\'\"",
    "\"=\"",
    "\"!=\"",
    "\"<=\"",
    "\"<\"",
    "\">\"",
    "\">=\"",
    "\"_\"",
    "\"\\\"\"",
    "\"..\"",
    "\"mf2so\"",
    "\"superoperator\"",
    "\"<<\"",
    "\">>\"",
    "<IMAG>",
    "\"Identity\"",
    "\"ID\"",
    "\"PauliX\"",
    "\"PX\"",
    "\"PauliY\"",
    "\"PY\"",
    "\"PauliZ\"",
    "\"PZ\"",
    "\"Hadamard\"",
    "\"HD\"",
    "\"CNOT\"",
    "\"CN\"",
    "\"M01\"",
    "\"M0\"",
    "\"M1\"",
    "\"Fredkin\"",
    "\"FK\"",
    "\"Swap\"",
    "\"SW\"",
    "\"PhaseShift\"",
    "\"PS\"",
    "\"Toffoli\"",
    "\"TF\"",
    "\"|0>\"",
    "\"|1>\"",
    "\"<0|\"",
    "\"<1|\"",
    "<IDENTIFIER>",
    "<NUM_INT>",
    "<NUM_REAL>",
    "<COMMENT>",
    "<UNEXPECTED_CHAR>",
  };

}
