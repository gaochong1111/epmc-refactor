/* Generated By:JavaCC: Do not edit this line. QMCExpressionParserTokenManager.java */
package epmc.qmc.expression;
import epmc.qmc.error.ProblemsQMC;
import static epmc.error.UtilError.ensure;
import epmc.error.EPMCException;
import epmc.operator.Operator;
import epmc.operator.OperatorIte;
import epmc.operator.OperatorEq;
import epmc.operator.OperatorNe;
import epmc.operator.OperatorAdd;
import epmc.operator.OperatorSubtract;
import epmc.operator.OperatorLe;
import epmc.operator.OperatorLt;
import epmc.operator.OperatorGe;
import epmc.operator.OperatorGt;
import epmc.operator.OperatorMultiply;
import epmc.operator.OperatorDivide;
import epmc.prism.operator.OperatorPRISMPow;
import epmc.operator.OperatorMax;
import epmc.operator.OperatorMin;
import epmc.operator.OperatorCeil;
import epmc.operator.OperatorFloor;
import epmc.operator.OperatorLog;
import epmc.operator.OperatorMod;
import epmc.expression.*;
import epmc.qmc.operator.OperatorConjugate;
import epmc.qmc.operator.OperatorQprob;
import epmc.qmc.operator.OperatorQeval;
import epmc.qmc.operator.OperatorKronecker;
import epmc.qmc.operator.OperatorTranspose;
import epmc.qmc.expression.ContextExpressionQMC;
import epmc.expression.standard.ExpressionTemporalNext;
import epmc.expression.standard.ExpressionIdentifierStandard;
import epmc.expression.standard.ExpressionFilter;
import epmc.expression.standard.ExpressionQuantifier;
import epmc.expression.standard.ExpressionSteadyState;
import epmc.expression.standard.ExpressionLiteral;
import epmc.expression.standard.ExpressionOperator;
import epmc.expression.standard.ExpressionTemporalFinally;
import epmc.expression.standard.ExpressionTemporalGlobally;
import epmc.expression.standard.ExpressionTemporalRelease;
import epmc.expression.standard.ExpressionTemporalUntil;
import epmc.expression.standard.FilterType;
import epmc.expression.standard.TimeBound;
import epmc.expression.standard.CmpType;
import epmc.expression.standard.DirType;
import static epmc.qmc.expression.UtilQMCExpressionParser.*;
import epmc.expression.standard.ExpressionTypeInteger;
import epmc.expression.standard.ExpressionTypeReal;
import epmc.expression.standard.ExpressionTypeBoolean;
import java.util.ArrayList;
import java.util.List;

/** Token Manager. */
public class QMCExpressionParserTokenManager implements QMCExpressionParserConstants
{
    void CommonTokenAction(Token t)
    {
        MyToken token = (MyToken) t;
        token.offset = input_stream.tokenBegin;
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xf154380042822020L) != 0L || (active1 & 0x19fe000000000681L) != 0L || (active2 & 0x3fL) != 0L)
            return 2;
         if ((active1 & 0x8000L) != 0L)
            return 13;
         if ((active0 & 0xeabc7ff297ddfc0L) != 0L || (active1 & 0xe60030000000097eL) != 0L || (active2 & 0xc0L) != 0L)
         {
            jjmatchedKind = 140;
            return 2;
         }
         if ((active0 & 0x94000000L) != 0L)
         {
            jjmatchedKind = 112;
            return 2;
         }
         return -1;
      case 1:
         if ((active1 & 0xfd54000000000000L) != 0L || (active2 & 0xaaL) != 0L)
            return 2;
         if ((active0 & 0xbefbf7ffbd7ddfc0L) != 0L || (active1 & 0x2aa30000000097fL) != 0L || (active2 & 0x55L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 1;
            }
            return 2;
         }
         return -1;
      case 2:
         if ((active0 & 0x2241f480000000L) != 0L || (active1 & 0x2000000000000000L) != 0L)
            return 2;
         if ((active0 & 0xbed9b60b3d7ddfc0L) != 0L || (active1 & 0xaaa30000000097fL) != 0L || (active2 & 0x55L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 2;
            }
            return 2;
         }
         return -1;
      case 3:
         if ((active0 & 0xb251b00104410ac0L) != 0L || (active1 & 0x800000000000063L) != 0L || (active2 & 0x4L) != 0L)
            return 2;
         if ((active0 & 0xc88070a393cd500L) != 0L || (active1 & 0x2aa30000000091cL) != 0L || (active2 & 0x51L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 3;
            }
            return 2;
         }
         return -1;
      case 4:
         if ((active0 & 0x88000200241500L) != 0L || (active1 & 0x100000000800L) != 0L)
            return 2;
         if ((active0 & 0xc0087083918c000L) != 0L || (active1 & 0x2aa20000000011cL) != 0L || (active2 & 0x51L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 4;
            return 2;
         }
         return -1;
      case 5:
         if ((active0 & 0x10801108000L) != 0L || (active1 & 0xa8000000000108L) != 0L)
            return 2;
         if ((active0 & 0xc00860038084000L) != 0L || (active1 & 0x202200000000014L) != 0L || (active2 & 0x51L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
            return 2;
         }
         return -1;
      case 6:
         if ((active0 & 0x800860030004000L) != 0L || (active1 & 0x202200000000014L) != 0L || (active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 6;
            return 2;
         }
         if ((active0 & 0x400000008080000L) != 0L || (active2 & 0x41L) != 0L)
            return 2;
         return -1;
      case 7:
         if ((active0 & 0x800860030000000L) != 0L || (active1 & 0x200000000014L) != 0L || (active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 7;
            return 2;
         }
         if ((active0 & 0x4000L) != 0L || (active1 & 0x202000000000000L) != 0L)
            return 2;
         return -1;
      case 8:
         if ((active0 & 0x20010000000L) != 0L || (active1 & 0x10L) != 0L)
            return 2;
         if ((active0 & 0x800840020000000L) != 0L || (active1 & 0x200000000004L) != 0L || (active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 8;
            return 2;
         }
         return -1;
      case 9:
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x4L) != 0L || (active2 & 0x10L) != 0L)
            return 2;
         if ((active0 & 0x840020000000L) != 0L || (active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 9;
            return 2;
         }
         return -1;
      case 10:
         if ((active0 & 0x840020000000L) != 0L || (active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 10;
            return 2;
         }
         return -1;
      case 11:
         if ((active0 & 0x20000000L) != 0L)
            return 2;
         if ((active0 & 0x840000000000L) != 0L || (active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 11;
            return 2;
         }
         return -1;
      case 12:
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x200000000000L) != 0L)
            return 2;
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 12;
            return 2;
         }
         return -1;
      case 13:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 13;
            return 2;
         }
         return -1;
      case 14:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 14;
            return 2;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 106);
      case 38:
         return jjStopAtPos(0, 92);
      case 39:
         return jjStopAtPos(0, 98);
      case 40:
         return jjStopAtPos(0, 84);
      case 41:
         return jjStopAtPos(0, 85);
      case 42:
         return jjStopAtPos(0, 78);
      case 43:
         return jjStopAtPos(0, 76);
      case 44:
         return jjStopAtPos(0, 91);
      case 45:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L, 0x0L);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000010000L, 0x0L);
      case 47:
         return jjStartNfaWithStates_0(0, 79, 13);
      case 58:
         return jjStopAtPos(0, 90);
      case 59:
         return jjStopAtPos(0, 89);
      case 60:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x402101000000L, 0xc00L);
      case 61:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L, 0x0L);
      case 62:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x810000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 97);
      case 65:
         return jjStartNfaWithStates_0(0, 5, 2);
      case 67:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000000000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L);
      case 69:
         return jjStartNfaWithStates_0(0, 17, 2);
      case 70:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3L);
      case 71:
         return jjStartNfaWithStates_0(0, 25, 2);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000000000000L, 0x0L);
      case 73:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000000000L, 0x0L);
      case 80:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x300000000000L, 0x1f8000000000000L, 0x30L);
      case 81:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x50000000000000L, 0x0L, 0x0L);
      case 82:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x3000000000000000L, 0x0L, 0x0L);
      case 83:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1L, 0xcL);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc0L);
      case 85:
         return jjStartNfaWithStates_0(0, 71, 2);
      case 87:
         return jjStartNfaWithStates_0(0, 73, 2);
      case 88:
         return jjStartNfaWithStates_0(0, 74, 2);
      case 91:
         return jjStopAtPos(0, 82);
      case 93:
         return jjStopAtPos(0, 83);
      case 95:
         return jjStopAtPos(0, 105);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1f80L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x18000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800020028000000L, 0x10L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7c0000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x800L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x94000000L, 0x0L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x600000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1f800000000L, 0x100000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c00000000000L, 0x0L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0xa8000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x600000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000eL, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L, 0x0L);
      case 123:
         return jjStopAtPos(0, 86);
      case 124:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x300L);
      case 125:
         return jjStopAtPos(0, 87);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         break;
      case 45:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         break;
      case 46:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         break;
      case 48:
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x500L);
      case 49:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 127, 2);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xa00L);
      case 60:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      case 61:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 62:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 68:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 114, 2);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 122, 2);
         break;
      case 70:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 135, 2);
         break;
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L, active2, 0L);
      case 75:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 129, 2);
         break;
      case 78:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 83:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 133, 2);
         break;
      case 87:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 131, 2);
         break;
      case 88:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 116, 2);
         break;
      case 89:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 118, 2);
         break;
      case 90:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 120, 2);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200001a00040000L, active1, 0x2a8000000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0x2000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x408000000000080L, active1, 0x100L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000100000L, active1, 0x800L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1200100L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xb070300000000000L, active1, 0x1L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000200bc000000L, active1, 0x10L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x458400088640L, active1, 0L, active2, 0x40L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800100000000L, active1, 0x60L, active2, 0x1L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000011800L, active1, 0x4L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0x200000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 49:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 125, 2);
         break;
      case 50:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 62:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 96);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(2, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(2, 137);
         break;
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L, active2, 0L);
      case 97:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0x9010100000000000L, active1, 0x20L, active2, 0x14L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 99:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800030028000000L, active1, 0x200000000000010L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000L, active2, 0x1L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 103:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2040200004000080L, active1, 0x1L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x10800L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000400600L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800101200140L, active1, 0x4L, active2, 0L);
      case 112:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000081000L, active1, 0x2L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000800000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0xa8000000000040L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000010000000L, active1, 0x800L, active2, 0L);
      case 119:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 2);
         break;
      case 124:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(2, 138);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(2, 139);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L, active2, 0L);
      case 84:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 123, 2);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x408000010001000L, active1, 0x200000000000000L, active2, 0L);
      case 98:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800001008000L, active1, 0L, active2, 0L);
      case 99:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 2);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 2);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0x4L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L, active2, 0x1L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 2);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x200000000800L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x28000000L, active1, 0L, active2, 0L);
      case 106:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 2);
         break;
      case 108:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 2);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xa8000000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000080000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 2);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 2);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 2);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 2);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 2);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000200000L, active1, 0L, active2, 0L);
      case 112:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 130, 2);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000800000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40400L, active1, 0x100000000010L, active2, 0x10L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 2);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0x108L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 2);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 2);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 2);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x800001000000L, active1, 0L, active2, 0L);
      case 98:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 2);
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x800040000100000L, active1, 0x8L, active2, 0x10L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0xa8000000000000L, active2, 0L);
      case 107:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 2);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000008000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 2);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x28000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x100L, active2, 0x40L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000010000000L, active1, 0x200000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0L, active2, 0L);
      case 88:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 115, 2);
         break;
      case 89:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 2);
         break;
      case 90:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 2);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000004L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400020000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 2);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x18000000L, active1, 0x2000000000000L, active2, 0x1L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 2);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L, active2, 0x40L);
      case 109:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 2);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 2);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 2);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active1, 0L, active2, 0L);
      case 97:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 2);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000030000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 105:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 134, 2);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 128, 2);
         break;
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 2);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 2);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000010L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 84:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 2);
         break;
      case 100:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 121, 2);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000010L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x820000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x800040020000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 121:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 2);
         break;
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800020000000L, active1, 0x4L, active2, 0L);
      case 109:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 68, 2);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L, active1, 0x200000000000L, active2, 0L);
      case 99:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(9, 66, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 59, 2);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 132, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x40020000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x840000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 29, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 47, 2);
         break;
      case 114:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 109, 2);
         break;
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 42, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 12);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 13;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 141)
                        kind = 141;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 141)
                        kind = 141;
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 48 && kind > 141)
                     kind = 141;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 12);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(0, 3);
                  break;
               case 13:
                  if (curChar != 47)
                     break;
                  if (kind > 143)
                     kind = 143;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAdd(2);
                  }
                  if ((0x60000000000L & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(2);
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(4, 5);
                  break;
               case 14:
                  if (kind > 143)
                     kind = 143;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 143)
                     kind = 143;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   7, 8, 9, 12, 10, 11, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\101", "\142\157\157\154", "\143\145\151\154", 
"\143\154\157\143\153", "\143\157\156\152", "\143\157\156\163\164", "\143\164\155\143", 
"\143\164\162\141\156", "\103", "\104\111\123\103\117\125\116\124", "\144\157\165\142\154\145", 
"\144\164\155\143", "\105", "\146\141\154\163\145", "\146\157\162\155\165\154\141", 
"\146\151\154\164\145\162", "\146\154\157\157\162", "\146\165\156\143", "\106", 
"\147\154\157\142\141\154", "\107", "\151\156\151\164", "\145\156\144\151\156\151\164", 
"\151\156\166\141\162\151\141\156\164", "\145\156\144\151\156\166\141\162\151\141\156\164", "\111", "\151\156\164", 
"\153\162\157\156", "\154\141\142\145\154", "\154\157\147", "\155\141\164\162\151\170", 
"\155\141\170", "\155\144\160", "\155\151\156", "\155\157\144", "\155\157\144\165\154\145", 
"\145\156\144\155\157\144\165\154\145", "\156\157\156\144\145\164\145\162\155\151\156\151\163\164\151\143", "\120", 
"\120\155\141\170", "\120\155\151\156", "\160\157\167", 
"\160\162\157\142\141\142\151\154\151\163\164\151\143", "\160\162\157\142", "\160\164\141", "\121", "\161\145\166\141\154", 
"\121\155\141\170", "\161\155\143", "\121\155\151\156", "\161\160\162\157\142", "\122", 
"\162\141\164\145", "\162\145\167\141\162\144\163", "\145\156\144\162\145\167\141\162\144\163", 
"\122\155\141\170", "\122\155\151\156", "\123", "\123\155\141\170", "\123\155\151\156", 
"\163\161\162\164", "\163\164\157\143\150\141\163\164\151\143", "\163\171\163\164\145\155", 
"\145\156\144\163\171\163\164\145\155", "\164\162\141\156", "\164\162\165\145", "\125", "\166\145\143\164\157\162", 
"\127", "\130", "\147\151\166\145\156", "\53", "\55", "\52", "\57", "\56\52", 
"\55\76", "\133", "\135", "\50", "\51", "\173", "\175", "\74\55", "\73", "\72", "\54", 
"\46", "\174", "\41", "\75\76", "\74\75\76", "\77", "\47", "\75", "\41\75", "\74\75", 
"\74", "\76", "\76\75", "\137", "\42", "\56\56", "\155\146\62\163\157", 
"\163\165\160\145\162\157\160\145\162\141\164\157\162", "\74\74", "\76\76", null, "\111\144\145\156\164\151\164\171", "\111\104", 
"\120\141\165\154\151\130", "\120\130", "\120\141\165\154\151\131", "\120\131", 
"\120\141\165\154\151\132", "\120\132", "\110\141\144\141\155\141\162\144", "\110\104", 
"\103\116\117\124", "\103\116", "\115\60\61", "\115\60", "\115\61", 
"\106\162\145\144\153\151\156", "\106\113", "\123\167\141\160", "\123\127", 
"\120\150\141\163\145\123\150\151\146\164", "\120\123", "\124\157\146\146\157\154\151", "\124\106", "\174\60\76", 
"\174\61\76", "\74\60\174", "\74\61\174", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0x17fffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x8000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x8000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[16];
private final int[] jjstateSet = new int[32];
protected char curChar;
/** Constructor. */
public QMCExpressionParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public QMCExpressionParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 16; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 144)
   {
      jjmatchedKind = 144;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
