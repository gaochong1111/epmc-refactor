/* Generated By:JavaCC: Do not edit this line. QMCParserTokenManager.java */
package epmc.qmc.model;
import epmc.qmc.error.ProblemsQMC;
import epmc.error.Positional;
import static epmc.error.UtilError.ensure;
import epmc.error.EPMCException;
import epmc.graph.Semantics;
import epmc.graph.SemanticsDTMCStandard;
import epmc.graph.SemanticsCTMC;
import epmc.graph.SemanticsMDP;
import epmc.graph.SemanticsQMC;
import epmc.expression.Expression;
import epmc.expression.standard.ExpressionIdentifierStandard;
import epmc.expression.standard.ExpressionLiteral;
import epmc.qmc.expression.QMCExpressionParser;
import epmc.options.Options;
import epmc.qmc.expression.ContextExpressionQMC;
import epmc.qmc.options.OptionsQMC;
import epmc.prism.model.Alternative;
import epmc.prism.model.Command;
import epmc.prism.model.Formulas;
import epmc.prism.model.ModelPRISM;
import epmc.prism.model.Module;
import epmc.prism.model.ModuleCommands;
import epmc.prism.model.ModuleRename;
import epmc.prism.model.PlayerDefinition;
import epmc.prism.model.Reward;
import epmc.prism.model.RewardStructure;
import epmc.prism.model.StateReward;
import epmc.prism.model.SystemAlphaParallel;
import epmc.prism.model.SystemAsyncParallel;
import epmc.prism.model.SystemDefinition;
import epmc.prism.model.SystemHide;
import epmc.prism.model.SystemModule;
import epmc.prism.model.SystemRename;
import epmc.prism.model.SystemRestrictedParallel;
import epmc.prism.model.TransitionReward;
import epmc.jani.model.type.JANIType;
import epmc.jani.model.type.JANITypeInt;
import epmc.jani.model.type.JANITypeReal;
import epmc.jani.model.type.JANITypeBool;
import epmc.jani.model.type.JANITypeBounded;
import epmc.time.JANITypeClock;
import epmc.expression.standard.ExpressionTypeInteger;
import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Collections;

/** Token Manager. */
public class QMCParserTokenManager implements QMCParserConstants
{
        int nestingLevel;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_7(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_7(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_7(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_7(0, 1, 0);
      case 91:
         return jjStopAtPos(0, 146);
      case 93:
         return jjStopAtPos(0, 147);
      default :
         return jjMoveNfa_7(3, 0);
   }
}
private int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAdd(0);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if ((0xffffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_4(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_4(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_4(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_4(0, 1, 0);
      case 40:
         return jjStopAtPos(0, 156);
      case 41:
         return jjStopAtPos(0, 154);
      default :
         return jjMoveNfa_4(3, 0);
   }
}
private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xfffffcffffffffffL & l) != 0L)
                  {
                     if (kind > 155)
                        kind = 155;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0xfffffcffffffffffL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_2(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_2(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_2(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_2(0, 1, 0);
      case 40:
         return jjStopAtPos(0, 167);
      case 41:
         return jjStopAtPos(0, 168);
      default :
         return jjMoveNfa_2(3, 0);
   }
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xfffffcffffffffffL & l) != 0L)
                  {
                     if (kind > 166)
                        kind = 166;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0xfffffcffffffffffL & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3e2a870009412020L) != 0L || (active1 & 0xfc67f800000000d0L) != 0L)
            return 2;
         if ((active1 & 0x1000L) != 0L)
            return 6;
         if ((active0 & 0x16000000L) != 0L)
         {
            jjmatchedKind = 106;
            return 2;
         }
         if ((active0 & 0xc1d578ffe0bedfc0L) != 0L || (active1 & 0x39800c00000012fL) != 0L || (active2 & 0x3L) != 0L)
         {
            jjmatchedKind = 130;
            return 2;
         }
         return -1;
      case 1:
         if ((active1 & 0xabf5500000000000L) != 0L || (active2 & 0x2L) != 0L)
            return 2;
         if ((active0 & 0xf7df7efff6bedfc0L) != 0L || (active1 & 0x540aa8c00000012fL) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 130;
               jjmatchedPos = 1;
            }
            return 2;
         }
         return -1;
      case 2:
         if ((active0 & 0x4483e90000000L) != 0L || (active1 & 0x80000000000000L) != 0L)
            return 2;
         if ((active0 & 0xf7db36c166bedfc0L) != 0L || (active1 & 0x542aa8c00000012fL) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 130;
               jjmatchedPos = 2;
            }
            return 2;
         }
         return -1;
      case 3:
         if ((active0 & 0x764a360022208ac0L) != 0L || (active1 & 0x102000000000000cL) != 0L)
            return 2;
         if ((active0 & 0x819100e1449e5500L) != 0L || (active1 & 0x440aa8c000000123L) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 130;
               jjmatchedPos = 3;
            }
            return 2;
         }
         return -1;
      case 4:
         if ((active0 & 0x818010e1048c4000L) != 0L || (active1 & 0x440aa88000000023L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 4;
            return 2;
         }
         if ((active0 & 0x11000040121500L) != 0L || (active1 & 0x4000000100L) != 0L)
            return 2;
         return -1;
      case 5:
         if ((active0 & 0x818010c004040000L) != 0L || (active1 & 0x4408088000000002L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 5;
            return 2;
         }
         if ((active0 & 0x2100884000L) != 0L || (active1 & 0x2a00000000021L) != 0L)
            return 2;
         return -1;
      case 6:
         if ((active0 & 0x810010c004000000L) != 0L || (active1 & 0x4008088000000002L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 6;
            return 2;
         }
         if ((active0 & 0x80000000040000L) != 0L || (active1 & 0x400000000000000L) != 0L || (active2 & 0x1L) != 0L)
            return 2;
         return -1;
      case 7:
         if ((active1 & 0x8080000000000L) != 0L)
            return 2;
         if ((active0 & 0x810010c004000000L) != 0L || (active1 & 0x4000008000000002L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 7;
            return 2;
         }
         return -1;
      case 8:
         if ((active0 & 0x4004000000L) != 0L || (active1 & 0x2L) != 0L)
            return 2;
         if ((active0 & 0x8100108000000000L) != 0L || (active1 & 0x4000008000000000L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 8;
            return 2;
         }
         return -1;
      case 9:
         if ((active0 & 0x8100000000000000L) != 0L || (active1 & 0x4000000000000000L) != 0L)
            return 2;
         if ((active0 & 0x108000000000L) != 0L || (active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 9;
            return 2;
         }
         return -1;
      case 10:
         if ((active0 & 0x108000000000L) != 0L || (active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 10;
            return 2;
         }
         return -1;
      case 11:
         if ((active0 & 0x108000000000L) != 0L || (active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 11;
            return 2;
         }
         return -1;
      case 12:
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0x8000000000L) != 0L)
            return 2;
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 12;
            return 2;
         }
         return -1;
      case 13:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 13;
            return 2;
         }
         return -1;
      case 14:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 14;
            return 2;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_13()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_13(0x0L, 0x80000000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 101);
      case 38:
         return jjStopAtPos(0, 87);
      case 39:
         return jjStopAtPos(0, 93);
      case 40:
         return jjStopAtPos(0, 79);
      case 41:
         return jjStopAtPos(0, 80);
      case 42:
         return jjStopAtPos(0, 75);
      case 43:
         return jjStopAtPos(0, 73);
      case 44:
         return jjStopAtPos(0, 86);
      case 45:
         return jjStopAtPos(0, 74);
      case 47:
         return jjStartNfaWithStates_13(0, 76, 6);
      case 58:
         return jjStopAtPos(0, 85);
      case 59:
         return jjStopAtPos(0, 84);
      case 60:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_13(0x0L, 0x10108080000L, 0x0L);
      case 61:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_13(0x0L, 0x4000000L, 0x0L);
      case 62:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_13(0x0L, 0x20800000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 92);
      case 65:
         return jjStartNfaWithStates_13(0, 5, 2);
      case 67:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_13(0x0L, 0x60000000000000L, 0x0L);
      case 69:
         return jjStartNfaWithStates_13(0, 16, 2);
      case 70:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_13(0x0L, 0xc00000000000000L, 0x0L);
      case 71:
         return jjStartNfaWithStates_13(0, 24, 2);
      case 72:
         return jjMoveStringLiteralDfa1_13(0x0L, 0x18000000000000L, 0x0L);
      case 73:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_13(0x0L, 0x180000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_13(0x0L, 0x380000000000000L, 0x0L);
      case 80:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_13(0x60000000000L, 0xc007e00000000000L, 0x0L);
      case 81:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_13(0xa000000000000L, 0x0L, 0x0L);
      case 82:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_13(0x600000000000000L, 0x0L, 0x0L);
      case 83:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_13(0x3000000000000000L, 0x3000000000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_13(0x0L, 0x0L, 0x3L);
      case 85:
         return jjStartNfaWithStates_13(0, 68, 2);
      case 87:
         return jjStartNfaWithStates_13(0, 70, 2);
      case 88:
         return jjStartNfaWithStates_13(0, 71, 2);
      case 91:
         return jjStopAtPos(0, 77);
      case 93:
         return jjStopAtPos(0, 78);
      case 95:
         return jjStopAtPos(0, 100);
      case 98:
         return jjMoveStringLiteralDfa1_13(0x40L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_13(0x1f80L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_13(0xc000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_13(0x100004000000000L, 0x2L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_13(0x3e0000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_13(0x800000L, 0x100L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_13(0x16000000L, 0x0L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_13(0x20000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_13(0xc0000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_13(0x3f00000000L, 0x4000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_13(0x8000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_13(0x780000000000L, 0x0L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_13(0x15000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_13(0xc0000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_13(0xc000000000000000L, 0x8000000001L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_13(0x0L, 0xcL, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_13(0x0L, 0x20L, 0x0L);
      case 123:
         return jjStopAtPos(0, 81);
      case 124:
         return jjStopAtPos(0, 88);
      case 125:
         return jjStopAtPos(0, 82);
      default :
         return jjMoveNfa_13(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_13(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      case 48:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_13(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 49:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_13(1, 121, 2);
         break;
      case 60:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         break;
      case 61:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         return jjMoveStringLiteralDfa2_13(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 62:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         break;
      case 68:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_13(1, 108, 2);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_13(1, 116, 2);
         break;
      case 70:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_13(1, 129, 2);
         break;
      case 75:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_13(1, 123, 2);
         break;
      case 78:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_13(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 83:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_13(1, 127, 2);
         break;
      case 87:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_13(1, 125, 2);
         break;
      case 88:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_13(1, 110, 2);
         break;
      case 89:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_13(1, 112, 2);
         break;
      case 90:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_13(1, 114, 2);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_13(active0, 0x40000340020000L, active1, 0xaa00000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_13(active0, 0x400000000L, active1, 0x80000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_13(active0, 0x81000000000080L, active1, 0x20L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_13(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_13(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_13(active0, 0x800080000L, active1, 0x100L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_13(active0, 0x900100L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_13(active0, 0x360e060000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_13(active0, 0x100004016000000L, active1, 0x2L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_13(active0, 0x8b080044640L, active1, 0L, active2, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa2_13(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_13(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_13(active0, 0x300020000000L, active1, 0x40000000000000cL, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_13(active0, 0x8000400000009800L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_13(active0, 0x200000L, active1, 0x8000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_13(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_13(active0, 0L, active1, 0x1L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_13(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_13(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_13(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 49:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_13(2, 119, 2);
         break;
      case 50:
         return jjMoveStringLiteralDfa3_13(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 62:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 91);
         break;
      case 79:
         return jjMoveStringLiteralDfa3_13(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 97:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_13(2, 46, 2);
         return jjMoveStringLiteralDfa3_13(active0, 0x1202020000000000L, active1, 0x5000000000000004L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_13(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 99:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_13(2, 50, 2);
         return jjMoveStringLiteralDfa3_13(active0, 0L, active1, 0x20L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_13(active0, 0x100006000000000L, active1, 0x8000000000002L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_13(active0, 0L, active1, 0x400080000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_13(active0, 0L, active1, 0L, active2, 0x1L);
      case 103:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_13(2, 31, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_13(active0, 0x2408040002000080L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_13(active0, 0xa0000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_13(active0, 0x8800L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_13(2, 35, 2);
         return jjMoveStringLiteralDfa3_13(active0, 0x8000200600L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_13(active0, 0x8000300020900140L, active1, 0L, active2, 0L);
      case 112:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_13(2, 34, 2);
         return jjMoveStringLiteralDfa3_13(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_13(active0, 0x4010000000041000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_13(active0, 0L, active1, 0x1L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_13(2, 28, 2);
         return jjMoveStringLiteralDfa3_13(active0, 0x40000100000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_13(active0, 0x4000L, active1, 0x2a00000000008L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_13(active0, 0x1000004000000L, active1, 0x100L, active2, 0L);
      case 119:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_13(2, 43, 2);
         return jjMoveStringLiteralDfa3_13(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_13(2, 33, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_13(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_13(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_13(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 84:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 117, 2);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_13(active0, 0x81000004001000L, active1, 0x8000000000000L, active2, 0L);
      case 98:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_13(active0, 0x100000804000L, active1, 0L, active2, 0L);
      case 99:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_13(3, 11, 2);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_13(3, 15, 2);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_13(3, 21, 2);
         return jjMoveStringLiteralDfa4_13(active0, 0x8000000000000100L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_13(active0, 0x8000000000L, active1, 0x400000000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 54, 2);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_13(3, 67, 2);
         return jjMoveStringLiteralDfa4_13(active0, 0x40000000L, active1, 0x8000000100L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_13(active0, 0L, active1, 0L, active2, 0x1L);
      case 106:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_13(3, 9, 2);
         break;
      case 108:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_13(3, 6, 2);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_13(3, 7, 2);
         return jjMoveStringLiteralDfa4_13(active0, 0L, active1, 0x2a00000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_13(active0, 0x4000040000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_13(3, 29, 2);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 42, 2);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 51, 2);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 58, 2);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 61, 2);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_13(3, 66, 2);
         return jjMoveStringLiteralDfa4_13(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_13(active0, 0x10000000100000L, active1, 0L, active2, 0L);
      case 112:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 124, 2);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_13(active0, 0x100000100000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_13(active0, 0x20400L, active1, 0x4000004000000002L, active2, 0L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_13(3, 25, 2);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 62, 2);
         return jjMoveStringLiteralDfa4_13(active0, 0x80000L, active1, 0x21L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_13(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 41, 2);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 49, 2);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 57, 2);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_13(3, 60, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_13(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_13(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_13(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_13(active0, 0x100000800000L, active1, 0L, active2, 0L);
      case 98:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_13(4, 52, 2);
         break;
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_13(4, 17, 2);
         return jjMoveStringLiteralDfa5_13(active0, 0x100008000080000L, active1, 0x4000000000000001L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_13(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_13(active0, 0x100000000L, active1, 0x2a00000000000L, active2, 0L);
      case 107:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_13(4, 8, 2);
         return jjMoveStringLiteralDfa5_13(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_13(4, 30, 2);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_13(4, 48, 2);
         return jjMoveStringLiteralDfa5_13(active0, 0x2000004000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_13(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_13(4, 12, 2);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_13(4, 72, 2);
         break;
      case 111:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_13(4, 102, 2);
         return jjMoveStringLiteralDfa5_13(active0, 0x4000000000L, active1, 0x20L, active2, 0x1L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_13(4, 20, 2);
         return jjMoveStringLiteralDfa5_13(active0, 0x80000004000000L, active1, 0x8000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_13(4, 10, 2);
         return jjMoveStringLiteralDfa5_13(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_13(active0, 0x40000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_13(active0, 0L, active1, 0x2L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_13(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_13(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_13(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa6_13(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 88:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_13(5, 109, 2);
         break;
      case 89:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_13(5, 111, 2);
         break;
      case 90:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_13(5, 113, 2);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_13(active0, 0x8000000000000000L, active1, 0x8000000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_13(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_13(active0, 0x80004000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_13(5, 14, 2);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_13(5, 37, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_13(active0, 0x4000000L, active1, 0x400080000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_13(5, 23, 2);
         return jjMoveStringLiteralDfa6_13(active0, 0x40000L, active1, 0L, active2, 0x1L);
      case 109:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_13(5, 64, 2);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_13(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_13(5, 19, 2);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_13(5, 69, 2);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_13(active0, 0L, active1, 0x2L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_13(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_13(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_13(5, 32, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_13(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_13(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_13(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_13(6, 18, 2);
         return jjMoveStringLiteralDfa7_13(active0, 0x100000004000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_13(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_13(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 105:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_13(6, 128, 2);
         return jjMoveStringLiteralDfa7_13(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_13(6, 122, 2);
         break;
      case 112:
         return jjMoveStringLiteralDfa7_13(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_13(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_13(6, 55, 2);
         return jjMoveStringLiteralDfa7_13(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa7_13(active0, 0L, active1, 0x80000000002L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_13(active0, 0x4000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_13(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_13(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_13(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_13(7, 115, 2);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_13(active0, 0L, active1, 0x8000000002L);
      case 105:
         return jjMoveStringLiteralDfa8_13(active0, 0L, active1, 0x4000000000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_13(active0, 0x104000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_13(active0, 0x4000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_13(active0, 0x100008000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_13(active0, 0x8000000000000000L, active1, 0L);
      case 121:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_13(7, 107, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_13(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa9_13(active0, 0x100000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_13(8, 38, 2);
         break;
      case 102:
         return jjMoveStringLiteralDfa9_13(active0, 0L, active1, 0x4000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_13(active0, 0x8000100000000000L, active1, 0L);
      case 109:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_13(8, 65, 2);
         return jjMoveStringLiteralDfa9_13(active0, 0x8000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_13(active0, 0L, active1, 0x8000000000L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_13(8, 26, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_13(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_13(active0, 0L, active1, 0x8000000000L);
      case 99:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_13(9, 63, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_13(active0, 0x8000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_13(9, 56, 2);
         return jjMoveStringLiteralDfa10_13(active0, 0x100000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_13(9, 126, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_13(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa11_13(active0, 0x8000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_13(active0, 0x100000000000L, active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_13(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_13(active0, 0x108000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_13(active0, 0L, active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_13(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_13(12, 44, 2);
         break;
      case 114:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_13(12, 103, 2);
         break;
      case 115:
         return jjMoveStringLiteralDfa13_13(active0, 0x8000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_13(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_13(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_13(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa14_13(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_13(12, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_13(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_13(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_13(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_13(13, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_13(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_13(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_13(15, 39, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_13(14, active0, 0L, 0L);
}
private int jjStartNfaWithStates_13(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_13(state, pos + 1);
}
private int jjMoveNfa_13(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 131)
                        kind = 131;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 48)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 48 && kind > 131)
                     kind = 131;
                  break;
               case 6:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 130)
                        kind = 130;
                     jjCheckNAdd(2);
                  }
                  if ((0x60000000000L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                  }
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAdd(2);
                  break;
               case 7:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 140;
            return 1;
         }
         if ((active0 & 0x1eL) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_9(0, 3, 2);
      case 10:
         return jjStartNfaWithStates_9(0, 4, 2);
      case 13:
         return jjStartNfaWithStates_9(0, 2, 2);
      case 32:
         return jjStartNfaWithStates_9(0, 1, 2);
      case 101:
         return jjMoveStringLiteralDfa1_9(0x800L);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_9(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_9(active2, 0x800L);
      default :
         break;
   }
   return jjStartNfa_9(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_9(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_9(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa3_9(active2, 0x800L);
      default :
         break;
   }
   return jjStartNfa_9(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_9(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_9(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa4_9(active2, 0x800L);
      default :
         break;
   }
   return jjStartNfa_9(2, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa4_9(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_9(2, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(3, 0L, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa5_9(active2, 0x800L);
      default :
         break;
   }
   return jjStartNfa_9(3, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa5_9(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_9(3, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(4, 0L, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_9(active2, 0x800L);
      default :
         break;
   }
   return jjStartNfa_9(4, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa6_9(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_9(4, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(5, 0L, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 116:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_9(6, 139, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_9(5, 0L, 0L, active2);
}
private int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(2);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAdd(1);
                  }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 141)
                        kind = 141;
                     jjCheckNAdd(2);
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0xf800000178000001L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_0(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_0(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_0(0, 1, 0);
      case 58:
         return jjStopAtPos(0, 174);
      case 63:
         return jjStopAtPos(0, 173);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7bffffffffffffffL & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0x7bffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_6(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_6(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_6(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_6(0, 1, 0);
      case 91:
         return jjStopAtPos(0, 150);
      case 93:
         return jjStopAtPos(0, 148);
      default :
         return jjMoveNfa_6(3, 0);
   }
}
private int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(0);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if ((0xffffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_1(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_1(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_1(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_1(0, 1, 0);
      case 58:
         return jjStopAtPos(0, 169);
      case 63:
         return jjStopAtPos(0, 171);
      default :
         return jjMoveNfa_1(3, 0);
   }
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7bffffffffffffffL & l) != 0L)
                  {
                     if (kind > 170)
                        kind = 170;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0x7bffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x10L) != 0L)
            return 2;
         if ((active0 & 0x1eL) != 0L)
            return 6;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_12()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_12(0, 3, 6);
      case 10:
         return jjStartNfaWithStates_12(0, 4, 6);
      case 13:
         return jjStartNfaWithStates_12(0, 2, 6);
      case 32:
         return jjStartNfaWithStates_12(0, 1, 6);
      case 45:
         return jjMoveStringLiteralDfa1_12(0x10L);
      default :
         return jjMoveNfa_12(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_12(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         break;
      default :
         break;
   }
   return jjStartNfa_12(0, 0L, 0L, active2);
}
private int jjStartNfaWithStates_12(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_12(state, pos + 1);
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0xffffdfffffffffffL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 3:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 0:
               case 2:
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 5:
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 4:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 0:
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 164;
            return 1;
         }
         return -1;
      case 1:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 38:
         return jjStopAtPos(0, 163);
      case 39:
         return jjStopAtPos(0, 160);
      case 40:
         return jjStopAtPos(0, 158);
      case 43:
         return jjStopAtPos(0, 162);
      case 59:
         return jjStopAtPos(0, 159);
      case 61:
         return jjStopAtPos(0, 161);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x20000000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa2_3(active2, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_3(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_3(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa3_3(active2, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_3(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_3(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_3(3, 157, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_3(2, 0L, 0L, active2);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_5(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_5(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_5(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_5(0, 1, 0);
      case 91:
         return jjStopAtPos(0, 152);
      case 93:
         return jjStopAtPos(0, 153);
      default :
         return jjMoveNfa_5(3, 0);
   }
}
private int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAdd(0);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if ((0xffffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x40L) != 0L)
            return 0;
         if ((active0 & 0x1eL) != 0L)
            return 5;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_11()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_11(0, 3, 5);
      case 10:
         return jjStartNfaWithStates_11(0, 4, 5);
      case 13:
         return jjStartNfaWithStates_11(0, 2, 5);
      case 32:
         return jjStartNfaWithStates_11(0, 1, 5);
      case 46:
         return jjMoveStringLiteralDfa1_11(0x40L);
      default :
         return jjMoveNfa_11(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_11(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         break;
      default :
         break;
   }
   return jjStartNfa_11(0, 0L, 0L, active2);
}
private int jjStartNfaWithStates_11(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_11(state, pos + 1);
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xffffbfffffffffffL & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(0);
                  break;
               case 4:
                  if ((0xffffbfffffffffffL & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(0);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffbfffffffffffL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 46)
                     jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 0:
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 4:
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 3:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_8(0, 3, 0);
      case 10:
         return jjStartNfaWithStates_8(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_8(0, 2, 0);
      case 32:
         return jjStartNfaWithStates_8(0, 1, 0);
      case 59:
         return jjStopAtPos(0, 142);
      case 91:
         return jjStopAtPos(0, 144);
      default :
         return jjMoveNfa_8(3, 0);
   }
}
private int jjStartNfaWithStates_8(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_8(state, pos + 1);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 143)
                        kind = 143;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if ((0xfffffffff7ffffffL & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 143)
                     kind = 143;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1eL) != 0L)
            return 2;
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 137;
            return 1;
         }
         return -1;
      case 1:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      case 9:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_10(0, 3, 2);
      case 10:
         return jjStartNfaWithStates_10(0, 4, 2);
      case 13:
         return jjStartNfaWithStates_10(0, 2, 2);
      case 32:
         return jjStartNfaWithStates_10(0, 1, 2);
      case 101:
         return jjMoveStringLiteralDfa1_10(0x100L);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_10(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_10(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_10(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_10(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_10(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa3_10(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_10(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_10(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_10(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa4_10(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_10(2, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa4_10(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_10(2, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(3, 0L, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa5_10(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_10(3, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa5_10(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_10(3, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(4, 0L, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa6_10(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_10(4, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa6_10(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_10(4, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(5, 0L, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_10(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_10(5, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa7_10(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_10(5, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(6, 0L, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa8_10(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_10(6, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa8_10(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_10(6, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(7, 0L, 0L, active2);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_10(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_10(7, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa9_10(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_10(7, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(8, 0L, 0L, active2);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_10(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_10(8, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa10_10(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_10(8, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(9, 0L, 0L, active2);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa11_10(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_10(9, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa11_10(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_10(9, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(10, 0L, 0L, active2);
      return 11;
   }
   switch(curChar)
   {
      case 116:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_10(11, 136, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_10(10, 0L, 0L, active2);
}
private int jjStartNfaWithStates_10(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_10(state, pos + 1);
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 138)
                     kind = 138;
                  jjCheckNAdd(2);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (kind > 138)
                     kind = 138;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar != 47)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 137)
                        kind = 137;
                     jjCheckNAdd(1);
                  }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 138)
                        kind = 138;
                     jjCheckNAdd(2);
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0xf800000178000001L & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\101", "\142\157\157\154", "\143\145\151\154", 
"\143\154\157\143\153", "\143\157\156\152", "\143\157\156\163\164", "\143\164\155\143", 
"\143\164\162\141\156", "\103", "\144\157\165\142\154\145", "\144\164\155\143", "\105", 
"\146\141\154\163\145", "\146\157\162\155\165\154\141", "\146\151\154\164\145\162", 
"\146\154\157\157\162", "\146\165\156\143", "\106", "\147\154\157\142\141\154", "\107", 
"\151\156\151\164", "\151\156\166\141\162\151\141\156\164", "\111", "\151\156\164", 
"\153\162\157\156", "\154\141\142\145\154", "\154\157\147", "\155\141\164\162\151\170", 
"\155\141\170", "\155\144\160", "\155\151\156", "\155\157\144", "\155\157\144\165\154\145", 
"\145\156\144\155\157\144\165\154\145", "\156\157\156\144\145\164\145\162\155\151\156\151\163\164\151\143", "\120", 
"\120\155\141\170", "\120\155\151\156", "\160\157\167", 
"\160\162\157\142\141\142\151\154\151\163\164\151\143", "\160\162\157\142", "\160\164\141", "\121", "\161\145\166\141\154", 
"\121\155\141\170", "\161\155\143", "\121\155\151\156", "\161\160\162\157\142", "\122", 
"\162\141\164\145", "\162\145\167\141\162\144\163", "\145\156\144\162\145\167\141\162\144\163", 
"\122\155\141\170", "\122\155\151\156", "\123", "\123\155\141\170", "\123\155\151\156", 
"\163\161\162\164", "\163\164\157\143\150\141\163\164\151\143", "\163\171\163\164\145\155", 
"\145\156\144\163\171\163\164\145\155", "\164\162\141\156", "\164\162\165\145", "\125", "\166\145\143\164\157\162", 
"\127", "\130", "\147\151\166\145\156", "\53", "\55", "\52", "\57", "\133", "\135", 
"\50", "\51", "\173", "\175", "\74\55", "\73", "\72", "\54", "\46", "\174", "\41", 
"\75\76", "\74\75\76", "\77", "\47", "\75", "\41\75", "\74\75", "\74", "\76", "\76\75", 
"\137", "\42", "\155\146\62\163\157", 
"\163\165\160\145\162\157\160\145\162\141\164\157\162", "\74\74", "\76\76", null, "\111\144\145\156\164\151\164\171", "\111\104", 
"\120\141\165\154\151\130", "\120\130", "\120\141\165\154\151\131", "\120\131", 
"\120\141\165\154\151\132", "\120\132", "\110\141\144\141\155\141\162\144", "\110\104", 
"\103\116\117\124", "\103\116", "\115\60\61", "\115\60", "\115\61", 
"\106\162\145\144\153\151\156", "\106\113", "\123\167\141\160", "\123\127", 
"\120\150\141\163\145\123\150\151\146\164", "\120\123", "\124\157\146\146\157\154\151", "\124\106", null, null, "\55\76", 
null, "\56\56", null, "\145\156\144\151\156\166\141\162\151\141\156\164", null, null, 
"\145\156\144\151\156\151\164", null, null, "\73", null, "\133", null, "\133", "\135", "\135", null, "\133", 
null, "\133", "\135", "\51", null, "\50", "\164\162\165\145", "\50", "\73", "\47", 
"\75", "\53", "\46", null, null, null, "\50", "\51", "\72", null, "\77", null, "\77", 
"\72", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "NESTING_COLON_INNER",
   "NESTING_COLON",
   "NESTING_PAR_INNER",
   "UPDATE_ENV",
   "NESTING_PAR",
   "NESTING_BRACKET_INNER",
   "NESTING_BRACKET",
   "NESTING_SEMICOLON_INNER",
   "NESTING_SEMICOLON",
   "INIT_ENV",
   "INVARIANT_ENV",
   "SEPINTERVAL_ENV",
   "ARROW_ENV",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 3, -1, 13, -1, 13, -1, -1, 13, -1, -1, 13, -1, 7, -1, -1, -1, 13, -1, 
   5, -1, -1, -1, 13, -1, 2, -1, -1, 13, -1, 4, 1, -1, -1, 1, -1, -1, -1, 13, -1, 0, -1, -1, -1, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0x17fffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x800000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x800000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[9];
private final int[] jjstateSet = new int[18];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public QMCParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public QMCParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 9; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 14 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 13;
int defaultLexState = 13;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       if (jjmatchedPos == 0 && jjmatchedKind > 165)
       {
          jjmatchedKind = 165;
       }
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
     case 10:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
     case 11:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_11();
       break;
     case 12:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_12();
       break;
     case 13:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_13();
       if (jjmatchedPos == 0 && jjmatchedKind > 176)
       {
          jjmatchedKind = 176;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 144 :
        image.append(jjstrLiteralImages[144]);
        lengthOfMatch = jjstrLiteralImages[144].length();
                                                   nestingLevel++;
         break;
      case 146 :
        image.append(jjstrLiteralImages[146]);
        lengthOfMatch = jjstrLiteralImages[146].length();
                                                         nestingLevel++;
         break;
      case 147 :
        image.append(jjstrLiteralImages[147]);
        lengthOfMatch = jjstrLiteralImages[147].length();
                                                          nestingLevel--; if (nestingLevel <= 0) SwitchTo(NESTING_SEMICOLON);
         break;
      case 150 :
        image.append(jjstrLiteralImages[150]);
        lengthOfMatch = jjstrLiteralImages[150].length();
                                                 nestingLevel++;
         break;
      case 152 :
        image.append(jjstrLiteralImages[152]);
        lengthOfMatch = jjstrLiteralImages[152].length();
                                                       nestingLevel++;
         break;
      case 153 :
        image.append(jjstrLiteralImages[153]);
        lengthOfMatch = jjstrLiteralImages[153].length();
                                                        nestingLevel--; if (nestingLevel <= 0) SwitchTo(NESTING_BRACKET);
         break;
      case 156 :
        image.append(jjstrLiteralImages[156]);
        lengthOfMatch = jjstrLiteralImages[156].length();
                                         nestingLevel++;
         break;
      case 167 :
        image.append(jjstrLiteralImages[167]);
        lengthOfMatch = jjstrLiteralImages[167].length();
                                               nestingLevel++;
         break;
      case 168 :
        image.append(jjstrLiteralImages[168]);
        lengthOfMatch = jjstrLiteralImages[168].length();
                                                nestingLevel--; if (nestingLevel <= 0) SwitchTo(NESTING_PAR);
         break;
      case 171 :
        image.append(jjstrLiteralImages[171]);
        lengthOfMatch = jjstrLiteralImages[171].length();
                                           nestingLevel++;
         break;
      case 173 :
        image.append(jjstrLiteralImages[173]);
        lengthOfMatch = jjstrLiteralImages[173].length();
                                                 nestingLevel++;
         break;
      case 174 :
        image.append(jjstrLiteralImages[174]);
        lengthOfMatch = jjstrLiteralImages[174].length();
                                              nestingLevel--; if (nestingLevel <= 0) SwitchTo(NESTING_COLON);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
