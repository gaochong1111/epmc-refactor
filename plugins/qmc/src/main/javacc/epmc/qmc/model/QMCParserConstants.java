/* Generated By:JavaCC: Do not edit this line. QMCParserConstants.java */
package epmc.qmc.model;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface QMCParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int A = 5;
  /** RegularExpression Id. */
  int BOOL = 6;
  /** RegularExpression Id. */
  int CEIL = 7;
  /** RegularExpression Id. */
  int CLOCK = 8;
  /** RegularExpression Id. */
  int CONJ = 9;
  /** RegularExpression Id. */
  int CONSTANT = 10;
  /** RegularExpression Id. */
  int CTMC = 11;
  /** RegularExpression Id. */
  int CTRAN = 12;
  /** RegularExpression Id. */
  int C = 13;
  /** RegularExpression Id. */
  int DOUBLE = 14;
  /** RegularExpression Id. */
  int DTMC = 15;
  /** RegularExpression Id. */
  int E = 16;
  /** RegularExpression Id. */
  int FALSE = 17;
  /** RegularExpression Id. */
  int FORMULA = 18;
  /** RegularExpression Id. */
  int FILTER = 19;
  /** RegularExpression Id. */
  int FLOOR = 20;
  /** RegularExpression Id. */
  int FUNCTION = 21;
  /** RegularExpression Id. */
  int F = 22;
  /** RegularExpression Id. */
  int GLOBAL = 23;
  /** RegularExpression Id. */
  int G = 24;
  /** RegularExpression Id. */
  int INIT = 25;
  /** RegularExpression Id. */
  int INVARIANT_OPEN = 26;
  /** RegularExpression Id. */
  int I = 27;
  /** RegularExpression Id. */
  int INT = 28;
  /** RegularExpression Id. */
  int KRON = 29;
  /** RegularExpression Id. */
  int LABEL = 30;
  /** RegularExpression Id. */
  int LOG = 31;
  /** RegularExpression Id. */
  int MATRIX = 32;
  /** RegularExpression Id. */
  int MAX = 33;
  /** RegularExpression Id. */
  int MDP = 34;
  /** RegularExpression Id. */
  int MIN = 35;
  /** RegularExpression Id. */
  int MOD = 36;
  /** RegularExpression Id. */
  int MODULEBEGIN = 37;
  /** RegularExpression Id. */
  int MODULEEND = 38;
  /** RegularExpression Id. */
  int NONDETERMINISTIC = 39;
  /** RegularExpression Id. */
  int P = 40;
  /** RegularExpression Id. */
  int PMAX = 41;
  /** RegularExpression Id. */
  int PMIN = 42;
  /** RegularExpression Id. */
  int POW = 43;
  /** RegularExpression Id. */
  int PROBABILISTIC = 44;
  /** RegularExpression Id. */
  int PROB = 45;
  /** RegularExpression Id. */
  int PTA = 46;
  /** RegularExpression Id. */
  int Q = 47;
  /** RegularExpression Id. */
  int QEVAL = 48;
  /** RegularExpression Id. */
  int QMAX = 49;
  /** RegularExpression Id. */
  int QMC = 50;
  /** RegularExpression Id. */
  int QMIN = 51;
  /** RegularExpression Id. */
  int QPROB = 52;
  /** RegularExpression Id. */
  int R = 53;
  /** RegularExpression Id. */
  int RATE = 54;
  /** RegularExpression Id. */
  int REWARDSBEGIN = 55;
  /** RegularExpression Id. */
  int REWARDSEND = 56;
  /** RegularExpression Id. */
  int RMAX = 57;
  /** RegularExpression Id. */
  int RMIN = 58;
  /** RegularExpression Id. */
  int S = 59;
  /** RegularExpression Id. */
  int SMAX = 60;
  /** RegularExpression Id. */
  int SMIN = 61;
  /** RegularExpression Id. */
  int SQRT = 62;
  /** RegularExpression Id. */
  int STOCHASTIC = 63;
  /** RegularExpression Id. */
  int SYSTEMBEGIN = 64;
  /** RegularExpression Id. */
  int SYSTEMEND = 65;
  /** RegularExpression Id. */
  int TRAN = 66;
  /** RegularExpression Id. */
  int TRUE = 67;
  /** RegularExpression Id. */
  int U = 68;
  /** RegularExpression Id. */
  int VECTOR = 69;
  /** RegularExpression Id. */
  int W = 70;
  /** RegularExpression Id. */
  int X = 71;
  /** RegularExpression Id. */
  int COND = 72;
  /** RegularExpression Id. */
  int PLUS = 73;
  /** RegularExpression Id. */
  int MINUS = 74;
  /** RegularExpression Id. */
  int TIMES = 75;
  /** RegularExpression Id. */
  int DIVIDE = 76;
  /** RegularExpression Id. */
  int LBRACKET = 77;
  /** RegularExpression Id. */
  int RBRACKET = 78;
  /** RegularExpression Id. */
  int LPAR = 79;
  /** RegularExpression Id. */
  int RPAR = 80;
  /** RegularExpression Id. */
  int LCURL = 81;
  /** RegularExpression Id. */
  int RCURL = 82;
  /** RegularExpression Id. */
  int RENAME = 83;
  /** RegularExpression Id. */
  int SEMICOLON = 84;
  /** RegularExpression Id. */
  int COLON = 85;
  /** RegularExpression Id. */
  int COMMA = 86;
  /** RegularExpression Id. */
  int AND = 87;
  /** RegularExpression Id. */
  int OR = 88;
  /** RegularExpression Id. */
  int NOT = 89;
  /** RegularExpression Id. */
  int IMPLIES = 90;
  /** RegularExpression Id. */
  int IFF = 91;
  /** RegularExpression Id. */
  int QUESTION = 92;
  /** RegularExpression Id. */
  int PRIME = 93;
  /** RegularExpression Id. */
  int EQ = 94;
  /** RegularExpression Id. */
  int NEQ = 95;
  /** RegularExpression Id. */
  int LEQ = 96;
  /** RegularExpression Id. */
  int LT = 97;
  /** RegularExpression Id. */
  int GT = 98;
  /** RegularExpression Id. */
  int GEQ = 99;
  /** RegularExpression Id. */
  int UNDERSCORE = 100;
  /** RegularExpression Id. */
  int QUOTE = 101;
  /** RegularExpression Id. */
  int SOMF = 102;
  /** RegularExpression Id. */
  int SUPEROPERATOR = 103;
  /** RegularExpression Id. */
  int SUPEROPERATOR_OPEN = 104;
  /** RegularExpression Id. */
  int SUPEROPERATOR_CLOSE = 105;
  /** RegularExpression Id. */
  int IMAG = 106;
  /** RegularExpression Id. */
  int IDENTITY = 107;
  /** RegularExpression Id. */
  int ID = 108;
  /** RegularExpression Id. */
  int PAULIX = 109;
  /** RegularExpression Id. */
  int PX = 110;
  /** RegularExpression Id. */
  int PAULIY = 111;
  /** RegularExpression Id. */
  int PY = 112;
  /** RegularExpression Id. */
  int PAULIZ = 113;
  /** RegularExpression Id. */
  int PZ = 114;
  /** RegularExpression Id. */
  int HADAMARD = 115;
  /** RegularExpression Id. */
  int HD = 116;
  /** RegularExpression Id. */
  int CNOT = 117;
  /** RegularExpression Id. */
  int CN = 118;
  /** RegularExpression Id. */
  int M01 = 119;
  /** RegularExpression Id. */
  int M0 = 120;
  /** RegularExpression Id. */
  int M1 = 121;
  /** RegularExpression Id. */
  int FREDKIN = 122;
  /** RegularExpression Id. */
  int FK = 123;
  /** RegularExpression Id. */
  int SWAP = 124;
  /** RegularExpression Id. */
  int SW = 125;
  /** RegularExpression Id. */
  int PHASESHIFT = 126;
  /** RegularExpression Id. */
  int PS = 127;
  /** RegularExpression Id. */
  int TOFFOLI = 128;
  /** RegularExpression Id. */
  int TF = 129;
  /** RegularExpression Id. */
  int IDENTIFIER = 130;
  /** RegularExpression Id. */
  int NUM_INT = 131;
  /** RegularExpression Id. */
  int ARROW_ARROW = 132;
  /** RegularExpression Id. */
  int ARROW_ARG = 133;
  /** RegularExpression Id. */
  int SEPINTERVAL_SEPINTERVAL = 134;
  /** RegularExpression Id. */
  int SEPINTERVAL_ARG = 135;
  /** RegularExpression Id. */
  int INVARIANT_CLOSE = 136;
  /** RegularExpression Id. */
  int INVARIANT_IDENTIFIER = 137;
  /** RegularExpression Id. */
  int INVARIANT_OTHER = 138;
  /** RegularExpression Id. */
  int INIT_CLOSE = 139;
  /** RegularExpression Id. */
  int INIT_IDENTIFIER = 140;
  /** RegularExpression Id. */
  int INIT_OTHER = 141;
  /** RegularExpression Id. */
  int NESTING_SEMICOLON_SEMICOLON = 142;
  /** RegularExpression Id. */
  int NESTING_SEMICOLON_OTHER = 143;
  /** RegularExpression Id. */
  int NESTING_SEMICOLON_BRACKET_OPEN = 144;
  /** RegularExpression Id. */
  int NESTING_SEMICOLON_INNER_OTHER = 145;
  /** RegularExpression Id. */
  int NESTING_SEMICOLON_INNER_BRACKET_OPEN = 146;
  /** RegularExpression Id. */
  int NESTING_SEMICOLON_INNER_BRACKET_CLOSE = 147;
  /** RegularExpression Id. */
  int NESTING_BRACKET_RBRACKET = 148;
  /** RegularExpression Id. */
  int NESTING_BRACKET_OTHER = 149;
  /** RegularExpression Id. */
  int NESTING_BRACKET_BRACKET_OPEN = 150;
  /** RegularExpression Id. */
  int NESTING_BRACKET_INNER_OTHER = 151;
  /** RegularExpression Id. */
  int NESTING_BRACKET_INNER_BRACKET_OPEN = 152;
  /** RegularExpression Id. */
  int NESTING_BRACKET_INNER_BRACKET_CLOSE = 153;
  /** RegularExpression Id. */
  int NESTING_PAR_RPAR = 154;
  /** RegularExpression Id. */
  int NESTING_PAR_OTHER = 155;
  /** RegularExpression Id. */
  int NESTING_PAR_PAR_OPEN = 156;
  /** RegularExpression Id. */
  int UPDATE_TRUE = 157;
  /** RegularExpression Id. */
  int UPDATE_LPAR = 158;
  /** RegularExpression Id. */
  int UPDATE_SEMICOLON = 159;
  /** RegularExpression Id. */
  int UPDATE_PRIME = 160;
  /** RegularExpression Id. */
  int UPDATE_EQ = 161;
  /** RegularExpression Id. */
  int UPDATE_PLUS = 162;
  /** RegularExpression Id. */
  int UPDATE_AND = 163;
  /** RegularExpression Id. */
  int UPDATE_IDENTIFIER = 164;
  /** RegularExpression Id. */
  int UPDATE_OTHER = 165;
  /** RegularExpression Id. */
  int NESTING_PAR_INNER_OTHER = 166;
  /** RegularExpression Id. */
  int NESTING_PAR_INNER_PAR_OPEN = 167;
  /** RegularExpression Id. */
  int NESTING_PAR_INNER_PAR_CLOSE = 168;
  /** RegularExpression Id. */
  int NESTING_COLON_COLON = 169;
  /** RegularExpression Id. */
  int NESTING_COLON_OTHER = 170;
  /** RegularExpression Id. */
  int NESTING_COLON_QUESTION = 171;
  /** RegularExpression Id. */
  int NESTING_COLON_INNER_OTHER = 172;
  /** RegularExpression Id. */
  int NESTING_COLON_INNER_QUESTION = 173;
  /** RegularExpression Id. */
  int NESTING_COLON_INNER_COLON = 174;
  /** RegularExpression Id. */
  int COMMENT = 175;
  /** RegularExpression Id. */
  int UNEXPECTED_CHAR = 176;

  /** Lexical state. */
  int NESTING_COLON_INNER = 0;
  /** Lexical state. */
  int NESTING_COLON = 1;
  /** Lexical state. */
  int NESTING_PAR_INNER = 2;
  /** Lexical state. */
  int UPDATE_ENV = 3;
  /** Lexical state. */
  int NESTING_PAR = 4;
  /** Lexical state. */
  int NESTING_BRACKET_INNER = 5;
  /** Lexical state. */
  int NESTING_BRACKET = 6;
  /** Lexical state. */
  int NESTING_SEMICOLON_INNER = 7;
  /** Lexical state. */
  int NESTING_SEMICOLON = 8;
  /** Lexical state. */
  int INIT_ENV = 9;
  /** Lexical state. */
  int INVARIANT_ENV = 10;
  /** Lexical state. */
  int SEPINTERVAL_ENV = 11;
  /** Lexical state. */
  int ARROW_ENV = 12;
  /** Lexical state. */
  int DEFAULT = 13;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"A\"",
    "\"bool\"",
    "\"ceil\"",
    "\"clock\"",
    "\"conj\"",
    "\"const\"",
    "\"ctmc\"",
    "\"ctran\"",
    "\"C\"",
    "\"double\"",
    "\"dtmc\"",
    "\"E\"",
    "\"false\"",
    "\"formula\"",
    "\"filter\"",
    "\"floor\"",
    "\"func\"",
    "\"F\"",
    "\"global\"",
    "\"G\"",
    "\"init\"",
    "\"invariant\"",
    "\"I\"",
    "\"int\"",
    "\"kron\"",
    "\"label\"",
    "\"log\"",
    "\"matrix\"",
    "\"max\"",
    "\"mdp\"",
    "\"min\"",
    "\"mod\"",
    "\"module\"",
    "\"endmodule\"",
    "\"nondeterministic\"",
    "\"P\"",
    "\"Pmax\"",
    "\"Pmin\"",
    "\"pow\"",
    "\"probabilistic\"",
    "\"prob\"",
    "\"pta\"",
    "\"Q\"",
    "\"qeval\"",
    "\"Qmax\"",
    "\"qmc\"",
    "\"Qmin\"",
    "\"qprob\"",
    "\"R\"",
    "\"rate\"",
    "\"rewards\"",
    "\"endrewards\"",
    "\"Rmax\"",
    "\"Rmin\"",
    "\"S\"",
    "\"Smax\"",
    "\"Smin\"",
    "\"sqrt\"",
    "\"stochastic\"",
    "\"system\"",
    "\"endsystem\"",
    "\"tran\"",
    "\"true\"",
    "\"U\"",
    "\"vector\"",
    "\"W\"",
    "\"X\"",
    "\"given\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"<-\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"=>\"",
    "\"<=>\"",
    "\"?\"",
    "\"\\\'\"",
    "\"=\"",
    "\"!=\"",
    "\"<=\"",
    "\"<\"",
    "\">\"",
    "\">=\"",
    "\"_\"",
    "\"\\\"\"",
    "\"mf2so\"",
    "\"superoperator\"",
    "\"<<\"",
    "\">>\"",
    "<IMAG>",
    "\"Identity\"",
    "\"ID\"",
    "\"PauliX\"",
    "\"PX\"",
    "\"PauliY\"",
    "\"PY\"",
    "\"PauliZ\"",
    "\"PZ\"",
    "\"Hadamard\"",
    "\"HD\"",
    "\"CNOT\"",
    "\"CN\"",
    "\"M01\"",
    "\"M0\"",
    "\"M1\"",
    "\"Fredkin\"",
    "\"FK\"",
    "\"Swap\"",
    "\"SW\"",
    "\"PhaseShift\"",
    "\"PS\"",
    "\"Toffoli\"",
    "\"TF\"",
    "<IDENTIFIER>",
    "<NUM_INT>",
    "\"->\"",
    "<ARROW_ARG>",
    "\"..\"",
    "<SEPINTERVAL_ARG>",
    "\"endinvariant\"",
    "<INVARIANT_IDENTIFIER>",
    "<INVARIANT_OTHER>",
    "\"endinit\"",
    "<INIT_IDENTIFIER>",
    "<INIT_OTHER>",
    "\";\"",
    "<NESTING_SEMICOLON_OTHER>",
    "\"[\"",
    "<NESTING_SEMICOLON_INNER_OTHER>",
    "\"[\"",
    "\"]\"",
    "\"]\"",
    "<NESTING_BRACKET_OTHER>",
    "\"[\"",
    "<NESTING_BRACKET_INNER_OTHER>",
    "\"[\"",
    "\"]\"",
    "\")\"",
    "<NESTING_PAR_OTHER>",
    "\"(\"",
    "\"true\"",
    "\"(\"",
    "\";\"",
    "\"\\\'\"",
    "\"=\"",
    "\"+\"",
    "\"&\"",
    "<UPDATE_IDENTIFIER>",
    "<UPDATE_OTHER>",
    "<NESTING_PAR_INNER_OTHER>",
    "\"(\"",
    "\")\"",
    "\":\"",
    "<NESTING_COLON_OTHER>",
    "\"?\"",
    "<NESTING_COLON_INNER_OTHER>",
    "\"?\"",
    "\":\"",
    "<COMMENT>",
    "<UNEXPECTED_CHAR>",
  };

}
