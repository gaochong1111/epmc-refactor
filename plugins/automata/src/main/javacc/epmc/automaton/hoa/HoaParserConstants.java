/* Generated By:JavaCC: Do not edit this line. HoaParserConstants.java */
package epmc.automaton.hoa;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface HoaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMA = 5;
  /** RegularExpression Id. */
  int EQUALS = 6;
  /** RegularExpression Id. */
  int NOT = 7;
  /** RegularExpression Id. */
  int AND = 8;
  /** RegularExpression Id. */
  int OR = 9;
  /** RegularExpression Id. */
  int LPARENTH = 10;
  /** RegularExpression Id. */
  int RPARENTH = 11;
  /** RegularExpression Id. */
  int LBRACK = 12;
  /** RegularExpression Id. */
  int RBRACK = 13;
  /** RegularExpression Id. */
  int LCURLY = 14;
  /** RegularExpression Id. */
  int RCURLY = 15;
  /** RegularExpression Id. */
  int ACC = 16;
  /** RegularExpression Id. */
  int HOA = 17;
  /** RegularExpression Id. */
  int V1 = 18;
  /** RegularExpression Id. */
  int ALIAS = 19;
  /** RegularExpression Id. */
  int NAME = 20;
  /** RegularExpression Id. */
  int TOOL = 21;
  /** RegularExpression Id. */
  int STATES = 22;
  /** RegularExpression Id. */
  int START = 23;
  /** RegularExpression Id. */
  int AP = 24;
  /** RegularExpression Id. */
  int ACC_NAME = 25;
  /** RegularExpression Id. */
  int BUCHI = 26;
  /** RegularExpression Id. */
  int GENERALIZED_BUCHI = 27;
  /** RegularExpression Id. */
  int CO_BUCHI = 28;
  /** RegularExpression Id. */
  int GENERALIZED_CO_BUCHI = 29;
  /** RegularExpression Id. */
  int STREETT = 30;
  /** RegularExpression Id. */
  int RABIN = 31;
  /** RegularExpression Id. */
  int GENERALIZED_RABIN = 32;
  /** RegularExpression Id. */
  int PARITY = 33;
  /** RegularExpression Id. */
  int ALL = 34;
  /** RegularExpression Id. */
  int NONE = 35;
  /** RegularExpression Id. */
  int MIN = 36;
  /** RegularExpression Id. */
  int MAX = 37;
  /** RegularExpression Id. */
  int ODD = 38;
  /** RegularExpression Id. */
  int EVEN = 39;
  /** RegularExpression Id. */
  int ACCEPTANCE = 40;
  /** RegularExpression Id. */
  int INF = 41;
  /** RegularExpression Id. */
  int FIN = 42;
  /** RegularExpression Id. */
  int PROPERTIES = 43;
  /** RegularExpression Id. */
  int BODY = 44;
  /** RegularExpression Id. */
  int END = 45;
  /** RegularExpression Id. */
  int STATE = 46;
  /** RegularExpression Id. */
  int T = 47;
  /** RegularExpression Id. */
  int F = 48;
  /** RegularExpression Id. */
  int NUM_INT = 49;
  /** RegularExpression Id. */
  int IDENTIFIER = 50;
  /** RegularExpression Id. */
  int ANAME = 51;
  /** RegularExpression Id. */
  int QUOTED = 52;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\",\"",
    "\"=\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"acc\"",
    "\"HOA:\"",
    "\"v1\"",
    "\"Alias\"",
    "\"name:\"",
    "\"tool:\"",
    "\"States:\"",
    "\"Start:\"",
    "\"AP:\"",
    "\"acc-name:\"",
    "\"Buchi\"",
    "\"generalized-Buchi\"",
    "\"co-Buchi\"",
    "\"generalized-co-Buchi\"",
    "\"Streett\"",
    "\"Rabin\"",
    "\"generalized-Rabin\"",
    "\"parity\"",
    "\"all\"",
    "\"none\"",
    "\"min\"",
    "\"max\"",
    "\"odd\"",
    "\"even\"",
    "\"Acceptance:\"",
    "\"Inf\"",
    "\"Fin\"",
    "\"properties:\"",
    "\"--BODY--\"",
    "\"--END--\"",
    "\"State:\"",
    "\"t\"",
    "\"f\"",
    "<NUM_INT>",
    "<IDENTIFIER>",
    "<ANAME>",
    "<QUOTED>",
  };

}
