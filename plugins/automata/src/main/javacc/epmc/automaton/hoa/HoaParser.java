/* Generated By:JavaCC: Do not edit this line. HoaParser.java */
package epmc.automaton.hoa;

import epmc.util.BitSet;
import epmc.util.BitSetUnboundedLongArray;
import java.util.Map;
import epmc.automaton.ProblemsAutomaton;
import static epmc.error.UtilError.ensure;
import epmc.expression.Expression;
import epmc.expression.standard.ExpressionOperator;
import epmc.expression.standard.ExpressionLiteral;
import epmc.operator.OperatorOr;
import epmc.operator.OperatorAnd;
import epmc.operator.OperatorNot;
import epmc.graph.explicit.GraphExplicitWrapper;
import epmc.util.UtilEscape;

public class HoaParser implements HoaParserConstants {

  public GraphExplicitWrapper parseAutomaton(Map<String,Expression> ap2expr) {
    try {
      return Automaton(ap2expr);
    } catch (ParseException e) {
      ensure(false, ProblemsHoa.HOA_PARSING_ERROR, e, e.getLocalizedMessage());
      return null;
    }
  }

  private Expression and(Expression a, Expression b) {
      return new ExpressionOperator.Builder()
        .setOperator(OperatorAnd.AND)
        .setOperands(a, b)
        .build();
  }

    private Expression or(Expression a, Expression b) {
        return new ExpressionOperator.Builder()
            .setOperator(OperatorOr.OR)
            .setOperands(a, b)
            .build();
    }

    private Expression not(Expression expression) {
        return new ExpressionOperator.Builder()
                .setOperator(OperatorNot.NOT)
                .setOperands(expression)
                .build();
    }

  final public GraphExplicitWrapper Automaton(Map<String,Expression> ap2expr) throws ParseException {
  HanoiHeader header;
  GraphExplicitWrapper graph;
    header = Header(ap2expr);
    graph = Body(header);
    {if (true) return graph;}
    throw new Error("Missing return statement in function");
  }

  final public HanoiHeader Header(Map<String,Expression> ap2expr) throws ParseException {
  HanoiHeader header = new HanoiHeader(ap2expr);
  boolean statesSpecified = false;
  boolean apSpecified = false;
  boolean acceptanceSpecified = false;
  boolean accNameSpecified = false;
  boolean toolSpecified = false;
  boolean nameSpecified = false;
    jj_consume_token(HOA);
    jj_consume_token(V1);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALIAS:
      case NAME:
      case TOOL:
      case STATES:
      case START:
      case AP:
      case ACC_NAME:
      case ACCEPTANCE:
      case PROPERTIES:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATES:
      ensure(!statesSpecified, ProblemsHoa.HOA_MULTIPLE_ITEMS_STATES); statesSpecified = true;
        States(header);
        break;
      case START:
        Start(header);
        break;
      case AP:
      ensure(!apSpecified, ProblemsHoa.HOA_MULTIPLE_ITEMS_AP); apSpecified = true;
        AP(header);
        break;
      case ALIAS:
        Alias(header);
        break;
      case ACCEPTANCE:
      ensure(!acceptanceSpecified, ProblemsHoa.HOA_MULTIPLE_ITEMS_ACCEPTANCE); acceptanceSpecified = true;
        Acceptance(header);
        break;
      case ACC_NAME:
      ensure(!accNameSpecified, ProblemsHoa.HOA_MULTIPLE_ITEMS_ACCEPTANCE); accNameSpecified = true;
        AccName(header);
        break;
      case TOOL:
      ensure(!toolSpecified, ProblemsHoa.HOA_MULTIPLE_ITEMS_TOOL); toolSpecified = true;
        Tool(header);
        break;
      case NAME:
      ensure(!nameSpecified, ProblemsHoa.HOA_MULTIPLE_ITEMS_NAME); nameSpecified = true;
        Name(header);
        break;
      case PROPERTIES:
        Properties(header);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    ensure(acceptanceSpecified, ProblemsHoa.HOA_MISSING_ITEM_ACCEPTANCE);
    BitSet startStates = header.getStartStates();
    for (int state = startStates.nextSetBit(0); state >= 0; state = startStates.nextSetBit(state + 1)) {
      ensure(state < header.getNumStates(), ProblemsHoa.HOA_INVALID_START_STATE, state, header.getNumStates());
    }
    //header.checkAcceptanceName();
    {if (true) return header;}
    throw new Error("Missing return statement in function");
  }

  final public void States(HanoiHeader header) throws ParseException {
  int numStates;
    jj_consume_token(STATES);
    numStates = Int();
                               header.setNumStates(numStates);
  }

  final public void Start(HanoiHeader header) throws ParseException {
  int startState;
    jj_consume_token(START);
    startState = Int();
                              header.setStartState(startState);
  }

  final public void AP(HanoiHeader header) throws ParseException {
  String ap;
  int numAPs;
  int numAPsAdded = 0;
    jj_consume_token(AP);
    numAPs = Int();
                       header.setNumAPs(numAPs);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTED:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      ap = Quoted();
    ensure(numAPsAdded < numAPs, ProblemsHoa.HOA_TOO_MANY_APS, numAPs, ap);
    numAPsAdded++;
    header.addAP(ap);
    }
  }

  final public void Acceptance(HanoiHeader header) throws ParseException {
  int numSets;
  Acceptance acceptance;
    jj_consume_token(ACCEPTANCE);
    numSets = Int();
                                header.setNumAccSets(numSets);
    acceptance = AcceptanceOr(numSets);
                                                                                                      header.setAcceptance(acceptance);
   header.setAcceptance(acceptance);
  }

  final public Acceptance AcceptanceOr(int numSets) throws ParseException {
  Acceptance p;
  Acceptance nextProp;
    p = AcceptanceAnd(numSets);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      nextProp = AcceptanceAnd(numSets);
      p = new AcceptanceOr(p, nextProp);
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Acceptance AcceptanceAnd(int numSets) throws ParseException {
  Acceptance p;
  Acceptance nextProp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INF:
    case FIN:
      p = AcceptanceSet(numSets);
      break;
    case T:
    case F:
      p = AcceptanceBoolean(numSets);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INF:
      case FIN:
        nextProp = AcceptanceSet(numSets);
        break;
      case T:
      case F:
        nextProp = AcceptanceBoolean(numSets);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      p = new AcceptanceAnd(p, nextProp);
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Acceptance AcceptanceSet(int numSets) throws ParseException {
  boolean negated = false;
  InfFin infFin;
  int set;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INF:
      jj_consume_token(INF);
           infFin = InfFin.INF;
      break;
    case FIN:
      jj_consume_token(FIN);
                                            infFin = InfFin.FIN;
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPARENTH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                                                                                         negated = true;
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    set = Int();
    jj_consume_token(RPARENTH);
    ensure(set < numSets, ProblemsHoa.HOA_INVALID_ACC_SET, set, numSets);
    {if (true) return new AcceptanceSet(infFin, negated, set);}
    throw new Error("Missing return statement in function");
  }

  final public Acceptance AcceptanceBoolean(int numSets) throws ParseException {
  boolean value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T:
      jj_consume_token(T);
          value = true;
      break;
    case F:
      jj_consume_token(F);
                                    value = false;
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new AcceptanceBoolean(value);}
    throw new Error("Missing return statement in function");
  }

  final public void AccName(HanoiHeader header) throws ParseException {
  int numAccs;
  int numPairs;
  int genParameter;
  AcceptanceName name = new AcceptanceName();
  String minMax;
  String oddEven;
  String identifier;
  int intParameter;
    jj_consume_token(ACC_NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BUCHI:
      jj_consume_token(BUCHI);
               name.setName(HanoiHeader.BUCHI);
      break;
    case GENERALIZED_BUCHI:
      jj_consume_token(GENERALIZED_BUCHI);
      numAccs = Int();
                                           name.setName(HanoiHeader.GENERALIZED_BUCHI); name.addParameter(numAccs);
      break;
    case CO_BUCHI:
      jj_consume_token(CO_BUCHI);
                  name.setName(HanoiHeader.CO_BUCHI);
      break;
    case GENERALIZED_CO_BUCHI:
      jj_consume_token(GENERALIZED_CO_BUCHI);
      numAccs = Int();
                                              name.setName(HanoiHeader.GENERALIZED_CO_BUCHI); name.addParameter(numAccs);
      break;
    case STREETT:
      jj_consume_token(STREETT);
      numAccs = Int();
                                 name.setName(HanoiHeader.STREETT); name.addParameter(numAccs);
      break;
    case RABIN:
      jj_consume_token(RABIN);
      numAccs = Int();
                               name.setName(HanoiHeader.RABIN); name.addParameter(numAccs);
      break;
    case GENERALIZED_RABIN:
      jj_consume_token(GENERALIZED_RABIN);
      numPairs = Int();
                                            name.setName(HanoiHeader.GENERALIZED_RABIN); name.addParameter(numPairs);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM_INT:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        genParameter = Int();
                                                                                                                                               name.addParameter(genParameter);
      }
      break;
    case PARITY:
      jj_consume_token(PARITY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MIN:
        jj_consume_token(MIN);
                      minMax = HanoiHeader.PARITY_MIN;
        break;
      case MAX:
        jj_consume_token(MAX);
                                                                 minMax = HanoiHeader.PARITY_MAX;
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ODD:
        jj_consume_token(ODD);
                                                                                                             oddEven = HanoiHeader.PARITY_ODD;
        break;
      case EVEN:
        jj_consume_token(EVEN);
                                                                                                                                                          oddEven = HanoiHeader.PARITY_EVEN;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      numPairs = Int();
                                                                                                                                                                                                                   name.setName(HanoiHeader.PARITY); name.addParameter(minMax); name.addParameter(oddEven); name.addParameter(numPairs);
      break;
    case ALL:
      jj_consume_token(ALL);
             name.setName(HanoiHeader.ALL);
      break;
    case NONE:
      jj_consume_token(NONE);
              name.setName(HanoiHeader.NONE);
      break;
    case IDENTIFIER:
      identifier = Identifier();
                                 name.setName(identifier);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM_INT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          identifier = Identifier();
                                                                                            name.addParameter(identifier);
          break;
        case NUM_INT:
          intParameter = Int();
                                                                                                                                                         name.addParameter(intParameter);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   header.setAcceptanceName(name);
  }

  final public void Alias(HanoiHeader header) throws ParseException {
  String aname;
  Expression expr;
    jj_consume_token(ALIAS);
    aname = Aname();
    expr = ExpressionOr(header);
   ensure(!header.containsAname(aname), ProblemsHoa.HOA_ANAME_SPECIFIED_TWICE,
     aname);
   header.putAname(aname, expr);
  }

  final public void Tool(HanoiHeader header) throws ParseException {
  String toolName;
  String toolVersion;
    jj_consume_token(TOOL);
    toolName = Quoted();
                              header.setToolName(toolName);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTED:
      toolVersion = Quoted();
                                                                                       header.setToolVersion(toolVersion);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void Name(HanoiHeader header) throws ParseException {
  String name;
    jj_consume_token(NAME);
    name = Quoted();
                          header.setName(name);
  }

  final public void Properties(HanoiHeader header) throws ParseException {
  String property;
    jj_consume_token(PROPERTIES);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      property = Identifier();
                                          header.addProperty(property);
    }
  }

  final public GraphExplicitWrapper Body(HanoiHeader header) throws ParseException {
  GraphPreparator graph = new GraphPreparator(header);
    jj_consume_token(BODY);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATE:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      State(header, graph);
    }
    jj_consume_token(END);
    graph.ensureStates();
    {if (true) return graph.toGraph();}
    throw new Error("Missing return statement in function");
  }

  final public void State(HanoiHeader header, GraphPreparator graph) throws ParseException {
  String stateName = null;
  int from;
  Expression stateGuard = null;
  Expression guard;
  int to;
  BitSet stateAcc;
  BitSet transAcc;
  Boolean implicitLabels = null;
  int numTransitions = 0;
    jj_consume_token(STATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      stateGuard = Guard(header);
      jj_consume_token(RBRACK);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    from = Int();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTED:
      stateName = Quoted();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    stateAcc = AcceptanceSets(header);
      ensure(from >= 0, ProblemsHoa.HOA_NEGATIVE_FROM_STATE_NUMBER, from);
      ensure(header.getNumStates() == -1 || from < header.getNumStates(),
        ProblemsHoa.HOA_INVALID_FROM_STATE, from, header.getNumStates());
      graph.prepareState(from);
      graph.setStateName(from, stateName);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
      case NUM_INT:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_9;
      }
      guard = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        jj_consume_token(LBRACK);
        guard = Guard(header);
        jj_consume_token(RBRACK);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
          ensure(stateGuard == null || guard == null,
            ProblemsHoa.HOA_BOTH_STATE_AND_EDGE_LABEL, from);
          if (stateGuard != null) {
            guard = stateGuard;
          }
          if (implicitLabels == null) {
            implicitLabels = guard == null ? true : false;
          } else {
            ensure(implicitLabels == (guard == null),
              ProblemsHoa.HOA_LABELS_EITHER_IMPLICIT_OR_EXPLICIT, from);
          }
          if (implicitLabels) {
            int bit = 1;
            for (int apNr = 0; apNr < header.getNumAPs(); apNr++) {
              Expression lit = header.numberToIdentifier(apNr);
              if ((numTransitions & bit) == 0) {
                lit = not(lit);
              }
              if (guard == null) {
                guard = lit;
              } else {
                guard = and(guard, lit);
              }
              bit <<= 1;
            }
            if (guard == null) {
              guard = ExpressionLiteral.getTrue();
            }
          }
      to = Int();
        ensure(to >= 0, ProblemsHoa.HOA_NEGATIVE_TO_STATE_NUMBER, to);
        ensure(header.getNumStates() == -1 || to < header.getNumStates(),
          ProblemsHoa.HOA_INVALID_TO_STATE, to, header.getNumStates());
      transAcc = AcceptanceSets(header);
      if (transAcc == null) {
        transAcc = new BitSetUnboundedLongArray();
      }
      if (stateAcc != null) {
        transAcc.or(stateAcc);
      }
          graph.addTransition(from, to, guard, transAcc);
          numTransitions++;
    }
    if (implicitLabels != null) {
      ensure(!implicitLabels || numTransitions == (2 << (header.getNumAPs() - 1)),
        ProblemsHoa.HOA_TRANSITION_NUMBER_INCORRECT_IMPLICIT_LABELS, from);
    }
  }

  final public BitSet AcceptanceSets(HanoiHeader header) throws ParseException {
  BitSet acc = null;
  int accState;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURLY:
      jj_consume_token(LCURLY);
      acc = new BitSetUnboundedLongArray();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM_INT:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_10;
        }
        accState = Int();
      ensure(accState >= 0, ProblemsHoa.HOA_NEGATIVE_ACC_NUMBER, accState);
      ensure(accState < header.getNumAcc(), ProblemsHoa.HOA_INVALID_ACC_NUMBER,
        accState, header.getNumAcc());
      acc.set(accState);
      }
      jj_consume_token(RCURLY);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    {if (true) return acc;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Guard(HanoiHeader header) throws ParseException {
  Expression expr;
    expr = ExpressionOr(header);
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionOr(HanoiHeader header) throws ParseException {
  Expression p;
  Expression nextProp;
    p = ExpressionAnd(header);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_11;
      }
      jj_consume_token(OR);
      nextProp = ExpressionAnd(header);
      p = or(p, nextProp);
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionAnd(HanoiHeader header) throws ParseException {
  Expression p;
  Expression nextProp;
    p = ExpressionNot(header);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_12;
      }
      jj_consume_token(AND);
      nextProp = ExpressionNot(header);
      p = and(p, nextProp);
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionNot(HanoiHeader header) throws ParseException {
  Expression p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      p = ExpressionNot(header);
      p = not(p);
      break;
    case LPARENTH:
      jj_consume_token(LPARENTH);
      p = ExpressionOr(header);
      jj_consume_token(RPARENTH);
      break;
    case T:
      p = ExpressionTrue(header);
      break;
    case F:
      p = ExpressionFalse(header);
      break;
    case NUM_INT:
    case ANAME:
      p = ExpressionIdentifier(header);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionTrue(HanoiHeader header) throws ParseException {
    jj_consume_token(T);
        {if (true) return ExpressionLiteral.getTrue();}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionFalse(HanoiHeader header) throws ParseException {
    jj_consume_token(F);
        {if (true) return ExpressionLiteral.getFalse();}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionIdentifier(HanoiHeader header) throws ParseException {
  int id;
  String aname;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM_INT:
      id = Int();
    ensure(id >= 0, ProblemsHoa.HOA_NEGATIVE_AP_NUMBER, id);
    ensure(id < header.getNumAPs(), ProblemsHoa.HOA_INVALID_AP_NUMBER,
      id, id < header.getNumAPs());
    {if (true) return header.numberToIdentifier(id);}
      break;
    case ANAME:
      aname = Aname();
     ensure(header.containsAname(aname), ProblemsHoa.HOA_ANAME_UNKNOWN,
       aname);
     {if (true) return header.aname2expr(aname);}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private int Int() throws ParseException {
        Token intg;
    intg = jj_consume_token(NUM_INT);
          {if (true) return Integer.parseInt(intg.toString());}
    throw new Error("Missing return statement in function");
  }

  final private String Quoted() throws ParseException {
  Token quoted;
    quoted = jj_consume_token(QUOTED);
    {if (true) return UtilEscape.unescapeC(quoted.toString().substring(1, quoted.toString().length() - 1));}
    throw new Error("Missing return statement in function");
  }

  final private String Aname() throws ParseException {
  Token aname;
    aname = jj_consume_token(ANAME);
    {if (true) return aname.toString();}
    throw new Error("Missing return statement in function");
  }

  final private String Identifier() throws ParseException {
  Token identifier;
    identifier = jj_consume_token(IDENTIFIER);
    {if (true) return identifier.toString();}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public HoaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3f80000,0x3f80000,0x0,0x200,0x0,0x100,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0xfc000000,0x0,0x0,0x0,0x1000,0x0,0x1000,0x1000,0x0,0x4000,0x200,0x100,0x480,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x900,0x900,0x100000,0x0,0x18600,0x0,0x18600,0x600,0x0,0x18000,0x20000,0x30,0xc0,0x60000,0x60000,0x4000f,0x100000,0x40000,0x4000,0x0,0x100000,0x20000,0x0,0x20000,0x0,0x0,0x0,0xb8000,0xa0000,};
   }

  /** Constructor with InputStream. */
  public HoaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HoaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HoaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public HoaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HoaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public HoaParser(HoaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(HoaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
